
gamma_spect_fw_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c8  0800a4c8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4c8  0800a4c8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4c8  0800a4c8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038a4  200001f8  0800a6c8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003a9c  0800a6c8  00023a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d665  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006000  00000000  00000000  0004d886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00026cb6  00000000  00000000  00053886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0007a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004ad8  00000000  00000000  0007bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6c3  00000000  00000000  000805e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000320a1  00000000  00000000  0009ecab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c041  00000000  00000000  000d0d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016cd8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052e8  00000000  00000000  0016cde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c1c 	.word	0x08009c1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	08009c1c 	.word	0x08009c1c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 8000170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017a:	4838      	ldr	r0, [pc, #224]	; (800025c <SD_PowerOn+0xec>)
{
 800017c:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800017e:	f002 f90d 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000182:	2001      	movs	r0, #1
 8000184:	f001 fc34 	bl	80019f0 <HAL_Delay>
 8000188:	240a      	movs	r4, #10
 800018a:	26ff      	movs	r6, #255	; 0xff
 800018c:	4d34      	ldr	r5, [pc, #208]	; (8000260 <SD_PowerOn+0xf0>)
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800018e:	682a      	ldr	r2, [r5, #0]
 8000190:	f88d 6010 	strb.w	r6, [sp, #16]
 8000194:	6893      	ldr	r3, [r2, #8]
 8000196:	079f      	lsls	r7, r3, #30
 8000198:	d5fc      	bpl.n	8000194 <SD_PowerOn+0x24>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800019a:	2364      	movs	r3, #100	; 0x64
 800019c:	2201      	movs	r2, #1
 800019e:	4628      	mov	r0, r5
 80001a0:	a904      	add	r1, sp, #16
 80001a2:	f004 f9ef 	bl	8004584 <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 80001a6:	3c01      	subs	r4, #1
 80001a8:	d1f1      	bne.n	800018e <SD_PowerOn+0x1e>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80001aa:	4622      	mov	r2, r4
 80001ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b0:	482a      	ldr	r0, [pc, #168]	; (800025c <SD_PowerOn+0xec>)
 80001b2:	f002 f8f3 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001b6:	2001      	movs	r0, #1
 80001b8:	f001 fc1a 	bl	80019f0 <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80001bc:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
	args[5] = 0x95;		/* CRC */
 80001be:	2395      	movs	r3, #149	; 0x95
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c0:	682a      	ldr	r2, [r5, #0]
	args[1] = 0;
 80001c2:	f88d 4011 	strb.w	r4, [sp, #17]
	args[2] = 0;
 80001c6:	f88d 4012 	strb.w	r4, [sp, #18]
	args[3] = 0;
 80001ca:	f88d 4013 	strb.w	r4, [sp, #19]
	args[4] = 0;
 80001ce:	f88d 4014 	strb.w	r4, [sp, #20]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80001d2:	f88d 1010 	strb.w	r1, [sp, #16]
	args[5] = 0x95;		/* CRC */
 80001d6:	f88d 3015 	strb.w	r3, [sp, #21]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001da:	6893      	ldr	r3, [r2, #8]
 80001dc:	0798      	lsls	r0, r3, #30
 80001de:	d5fc      	bpl.n	80001da <SD_PowerOn+0x6a>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001e0:	2364      	movs	r3, #100	; 0x64
 80001e2:	2206      	movs	r2, #6
 80001e4:	481e      	ldr	r0, [pc, #120]	; (8000260 <SD_PowerOn+0xf0>)
 80001e6:	a904      	add	r1, sp, #16
 80001e8:	f004 f9cc 	bl	8004584 <HAL_SPI_Transmit>
}
 80001ec:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 80001f0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80001f4:	2764      	movs	r7, #100	; 0x64
 80001f6:	4e1a      	ldr	r6, [pc, #104]	; (8000260 <SD_PowerOn+0xf0>)
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001f8:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 80001fa:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001fe:	6893      	ldr	r3, [r2, #8]
 8000200:	0799      	lsls	r1, r3, #30
 8000202:	d5fc      	bpl.n	80001fe <SD_PowerOn+0x8e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000204:	2301      	movs	r3, #1
 8000206:	4630      	mov	r0, r6
 8000208:	f10d 020f 	add.w	r2, sp, #15
 800020c:	f10d 010e 	add.w	r1, sp, #14
 8000210:	9700      	str	r7, [sp, #0]
 8000212:	f004 fa81 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000216:	f89d 300f 	ldrb.w	r3, [sp, #15]

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800021a:	2b01      	cmp	r3, #1
 800021c:	d001      	beq.n	8000222 <SD_PowerOn+0xb2>
 800021e:	3c01      	subs	r4, #1
 8000220:	d1ea      	bne.n	80001f8 <SD_PowerOn+0x88>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <SD_PowerOn+0xec>)
 800022a:	f002 f8b7 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800022e:	2001      	movs	r0, #1
 8000230:	f001 fbde 	bl	80019f0 <HAL_Delay>
	{
		cnt--;
	}

	DESELECT();
	SPI_TxByte(0XFF);
 8000234:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000236:	682a      	ldr	r2, [r5, #0]
 8000238:	f88d 300f 	strb.w	r3, [sp, #15]
 800023c:	6893      	ldr	r3, [r2, #8]
 800023e:	079b      	lsls	r3, r3, #30
 8000240:	d5fc      	bpl.n	800023c <SD_PowerOn+0xcc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000242:	2364      	movs	r3, #100	; 0x64
 8000244:	2201      	movs	r2, #1
 8000246:	f10d 010f 	add.w	r1, sp, #15
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <SD_PowerOn+0xf0>)
 800024c:	f004 f99a 	bl	8004584 <HAL_SPI_Transmit>

	PowerFlag = 1;
 8000250:	2201      	movs	r2, #1
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <SD_PowerOn+0xf4>)
 8000254:	701a      	strb	r2, [r3, #0]
}
 8000256:	b006      	add	sp, #24
 8000258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800025c:	40010800 	.word	0x40010800
 8000260:	20000788 	.word	0x20000788
 8000264:	20000215 	.word	0x20000215

08000268 <SD_RxDataBlock>:
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000268:	23c8      	movs	r3, #200	; 0xc8
{
 800026a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	dummy = 0xFF;
 800026e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000272:	2764      	movs	r7, #100	; 0x64
{
 8000274:	4605      	mov	r5, r0
 8000276:	4689      	mov	r9, r1
	Timer1 = 200;
 8000278:	4e30      	ldr	r6, [pc, #192]	; (800033c <SD_RxDataBlock+0xd4>)
 800027a:	4c31      	ldr	r4, [pc, #196]	; (8000340 <SD_RxDataBlock+0xd8>)
{
 800027c:	b085      	sub	sp, #20
	Timer1 = 200;
 800027e:	8033      	strh	r3, [r6, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000280:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000282:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000286:	6893      	ldr	r3, [r2, #8]
 8000288:	079b      	lsls	r3, r3, #30
 800028a:	d5fc      	bpl.n	8000286 <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800028c:	2301      	movs	r3, #1
 800028e:	4620      	mov	r0, r4
 8000290:	f10d 020f 	add.w	r2, sp, #15
 8000294:	f10d 010e 	add.w	r1, sp, #14
 8000298:	9700      	str	r7, [sp, #0]
 800029a:	f004 fa3d 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 800029e:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 80002a2:	2bff      	cmp	r3, #255	; 0xff
 80002a4:	d105      	bne.n	80002b2 <SD_RxDataBlock+0x4a>
 80002a6:	8830      	ldrh	r0, [r6, #0]
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d1e9      	bne.n	8000280 <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 80002ac:	b005      	add	sp, #20
 80002ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 80002b2:	2bfe      	cmp	r3, #254	; 0xfe
 80002b4:	d140      	bne.n	8000338 <SD_RxDataBlock+0xd0>
	dummy = 0xFF;
 80002b6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80002ba:	2764      	movs	r7, #100	; 0x64
 80002bc:	4e20      	ldr	r6, [pc, #128]	; (8000340 <SD_RxDataBlock+0xd8>)
 80002be:	44a9      	add	r9, r5
 80002c0:	3d01      	subs	r5, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002c2:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80002c4:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002c8:	6893      	ldr	r3, [r2, #8]
 80002ca:	0798      	lsls	r0, r3, #30
 80002cc:	d5fc      	bpl.n	80002c8 <SD_RxDataBlock+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80002ce:	2301      	movs	r3, #1
 80002d0:	4630      	mov	r0, r6
 80002d2:	f10d 020f 	add.w	r2, sp, #15
 80002d6:	f10d 010e 	add.w	r1, sp, #14
 80002da:	9700      	str	r7, [sp, #0]
 80002dc:	f004 fa1c 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 80002e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 80002e4:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 80002e8:	45a9      	cmp	r9, r5
 80002ea:	d1ea      	bne.n	80002c2 <SD_RxDataBlock+0x5a>
	dummy = 0xFF;
 80002ec:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002ee:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80002f0:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002f4:	6893      	ldr	r3, [r2, #8]
 80002f6:	0799      	lsls	r1, r3, #30
 80002f8:	d5fc      	bpl.n	80002f4 <SD_RxDataBlock+0x8c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80002fa:	2564      	movs	r5, #100	; 0x64
 80002fc:	2301      	movs	r3, #1
 80002fe:	f10d 020f 	add.w	r2, sp, #15
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <SD_RxDataBlock+0xd8>)
 8000304:	f10d 010e 	add.w	r1, sp, #14
 8000308:	9500      	str	r5, [sp, #0]
 800030a:	f004 fa05 	bl	8004718 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 800030e:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000310:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000312:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000316:	6893      	ldr	r3, [r2, #8]
 8000318:	079b      	lsls	r3, r3, #30
 800031a:	d5fc      	bpl.n	8000316 <SD_RxDataBlock+0xae>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800031c:	2464      	movs	r4, #100	; 0x64
 800031e:	2301      	movs	r3, #1
 8000320:	f10d 020f 	add.w	r2, sp, #15
 8000324:	f10d 010e 	add.w	r1, sp, #14
 8000328:	9400      	str	r4, [sp, #0]
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <SD_RxDataBlock+0xd8>)
 800032c:	f004 f9f4 	bl	8004718 <HAL_SPI_TransmitReceive>
	return TRUE;
 8000330:	2001      	movs	r0, #1
}
 8000332:	b005      	add	sp, #20
 8000334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 8000338:	2000      	movs	r0, #0
 800033a:	e7b7      	b.n	80002ac <SD_RxDataBlock+0x44>
 800033c:	20000216 	.word	0x20000216
 8000340:	20000788 	.word	0x20000788

08000344 <SD_TxDataBlock.part.0>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
 8000344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000348:	460c      	mov	r4, r1
 800034a:	4606      	mov	r6, r0
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800034c:	4d40      	ldr	r5, [pc, #256]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
 800034e:	b084      	sub	sp, #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000350:	682a      	ldr	r2, [r5, #0]
 8000352:	f88d 100f 	strb.w	r1, [sp, #15]
 8000356:	6893      	ldr	r3, [r2, #8]
 8000358:	079b      	lsls	r3, r3, #30
 800035a:	d5fc      	bpl.n	8000356 <SD_TxDataBlock.part.0+0x12>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800035c:	2364      	movs	r3, #100	; 0x64
 800035e:	2201      	movs	r2, #1
 8000360:	483b      	ldr	r0, [pc, #236]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
 8000362:	f10d 010f 	add.w	r1, sp, #15
 8000366:	f004 f90d 	bl	8004584 <HAL_SPI_Transmit>

	/* transmit token */
	SPI_TxByte(token);

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800036a:	2cfd      	cmp	r4, #253	; 0xfd
 800036c:	d10b      	bne.n	8000386 <SD_TxDataBlock.part.0+0x42>
		/* recv buffer clear */
		while (SPI_RxByte() == 0);
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800036e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000372:	f000 001f 	and.w	r0, r0, #31

	return FALSE;
}
 8000376:	f1a0 0005 	sub.w	r0, r0, #5
 800037a:	fab0 f080 	clz	r0, r0
 800037e:	0940      	lsrs	r0, r0, #5
 8000380:	b004      	add	sp, #16
 8000382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000386:	682a      	ldr	r2, [r5, #0]
 8000388:	6893      	ldr	r3, [r2, #8]
 800038a:	079f      	lsls	r7, r3, #30
 800038c:	d5fc      	bpl.n	8000388 <SD_TxDataBlock.part.0+0x44>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800038e:	2364      	movs	r3, #100	; 0x64
 8000390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000394:	4631      	mov	r1, r6
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
 8000398:	f004 f8f4 	bl	8004584 <HAL_SPI_Transmit>
	dummy = 0xFF;
 800039c:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800039e:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 80003a0:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003a4:	6893      	ldr	r3, [r2, #8]
 80003a6:	079c      	lsls	r4, r3, #30
 80003a8:	d5fc      	bpl.n	80003a4 <SD_TxDataBlock.part.0+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80003aa:	2464      	movs	r4, #100	; 0x64
 80003ac:	2301      	movs	r3, #1
 80003ae:	f10d 020f 	add.w	r2, sp, #15
 80003b2:	4827      	ldr	r0, [pc, #156]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
 80003b4:	f10d 010e 	add.w	r1, sp, #14
 80003b8:	9400      	str	r4, [sp, #0]
 80003ba:	f004 f9ad 	bl	8004718 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 80003be:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003c0:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 80003c2:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003c6:	6893      	ldr	r3, [r2, #8]
 80003c8:	0798      	lsls	r0, r3, #30
 80003ca:	d5fc      	bpl.n	80003c6 <SD_TxDataBlock.part.0+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80003cc:	2664      	movs	r6, #100	; 0x64
 80003ce:	4820      	ldr	r0, [pc, #128]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
 80003d0:	2301      	movs	r3, #1
 80003d2:	f10d 020f 	add.w	r2, sp, #15
 80003d6:	f10d 010e 	add.w	r1, sp, #14
 80003da:	9600      	str	r6, [sp, #0]
 80003dc:	2441      	movs	r4, #65	; 0x41
	dummy = 0xFF;
 80003de:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80003e2:	4607      	mov	r7, r0
 80003e4:	f004 f998 	bl	8004718 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003e8:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 80003ea:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003ee:	6893      	ldr	r3, [r2, #8]
 80003f0:	0799      	lsls	r1, r3, #30
 80003f2:	d5fc      	bpl.n	80003ee <SD_TxDataBlock.part.0+0xaa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80003f4:	2301      	movs	r3, #1
 80003f6:	4638      	mov	r0, r7
 80003f8:	f10d 020f 	add.w	r2, sp, #15
 80003fc:	f10d 010e 	add.w	r1, sp, #14
 8000400:	9600      	str	r6, [sp, #0]
 8000402:	f004 f989 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000406:	f89d 300f 	ldrb.w	r3, [sp, #15]
			resp = SPI_RxByte();
 800040a:	f88d 300d 	strb.w	r3, [sp, #13]
			if ((resp & 0x1F) == 0x05) break;
 800040e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000412:	f003 031f 	and.w	r3, r3, #31
 8000416:	2b05      	cmp	r3, #5
 8000418:	d003      	beq.n	8000422 <SD_TxDataBlock.part.0+0xde>
		while (i <= 64)
 800041a:	3c01      	subs	r4, #1
 800041c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000420:	d1e2      	bne.n	80003e8 <SD_TxDataBlock.part.0+0xa4>
	dummy = 0xFF;
 8000422:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000424:	2664      	movs	r6, #100	; 0x64
 8000426:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <SD_TxDataBlock.part.0+0x10c>)
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000428:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800042a:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800042e:	6893      	ldr	r3, [r2, #8]
 8000430:	079b      	lsls	r3, r3, #30
 8000432:	d5fc      	bpl.n	800042e <SD_TxDataBlock.part.0+0xea>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000434:	2301      	movs	r3, #1
 8000436:	4620      	mov	r0, r4
 8000438:	f10d 020f 	add.w	r2, sp, #15
 800043c:	f10d 010e 	add.w	r1, sp, #14
 8000440:	9600      	str	r6, [sp, #0]
 8000442:	f004 f969 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000446:	f89d 300f 	ldrb.w	r3, [sp, #15]
		while (SPI_RxByte() == 0);
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0ec      	beq.n	8000428 <SD_TxDataBlock.part.0+0xe4>
 800044e:	e78e      	b.n	800036e <SD_TxDataBlock.part.0+0x2a>
 8000450:	20000788 	.word	0x20000788

08000454 <SD_SendCmd>:
	Timer2 = 500;
 8000454:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	dummy = 0xFF;
 800045c:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800045e:	2664      	movs	r6, #100	; 0x64
{
 8000460:	4681      	mov	r9, r0
 8000462:	4688      	mov	r8, r1
	Timer2 = 500;
 8000464:	4d58      	ldr	r5, [pc, #352]	; (80005c8 <SD_SendCmd+0x174>)
 8000466:	4c59      	ldr	r4, [pc, #356]	; (80005cc <SD_SendCmd+0x178>)
{
 8000468:	b085      	sub	sp, #20
	Timer2 = 500;
 800046a:	802b      	strh	r3, [r5, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800046c:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800046e:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000472:	6893      	ldr	r3, [r2, #8]
 8000474:	0798      	lsls	r0, r3, #30
 8000476:	d5fc      	bpl.n	8000472 <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000478:	2301      	movs	r3, #1
 800047a:	4620      	mov	r0, r4
 800047c:	f10d 020f 	add.w	r2, sp, #15
 8000480:	f10d 010e 	add.w	r1, sp, #14
 8000484:	9600      	str	r6, [sp, #0]
 8000486:	f004 f947 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 800048a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 800048e:	2bff      	cmp	r3, #255	; 0xff
 8000490:	d006      	beq.n	80004a0 <SD_SendCmd+0x4c>
 8000492:	882b      	ldrh	r3, [r5, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1e9      	bne.n	800046c <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000498:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 800049a:	b005      	add	sp, #20
 800049c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004a0:	6822      	ldr	r2, [r4, #0]
 80004a2:	f88d 900f 	strb.w	r9, [sp, #15]
 80004a6:	6893      	ldr	r3, [r2, #8]
 80004a8:	0799      	lsls	r1, r3, #30
 80004aa:	d5fc      	bpl.n	80004a6 <SD_SendCmd+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	4846      	ldr	r0, [pc, #280]	; (80005cc <SD_SendCmd+0x178>)
 80004b2:	f10d 010f 	add.w	r1, sp, #15
 80004b6:	f004 f865 	bl	8004584 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80004ba:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004be:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80004c0:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004c4:	6893      	ldr	r3, [r2, #8]
 80004c6:	079b      	lsls	r3, r3, #30
 80004c8:	d5fc      	bpl.n	80004c4 <SD_SendCmd+0x70>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	2201      	movs	r2, #1
 80004ce:	483f      	ldr	r0, [pc, #252]	; (80005cc <SD_SendCmd+0x178>)
 80004d0:	f10d 010f 	add.w	r1, sp, #15
 80004d4:	f004 f856 	bl	8004584 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80004d8:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004dc:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80004de:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004e2:	6893      	ldr	r3, [r2, #8]
 80004e4:	079f      	lsls	r7, r3, #30
 80004e6:	d5fc      	bpl.n	80004e2 <SD_SendCmd+0x8e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004e8:	2364      	movs	r3, #100	; 0x64
 80004ea:	2201      	movs	r2, #1
 80004ec:	4837      	ldr	r0, [pc, #220]	; (80005cc <SD_SendCmd+0x178>)
 80004ee:	f10d 010f 	add.w	r1, sp, #15
 80004f2:	f004 f847 	bl	8004584 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80004f6:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004fa:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80004fc:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000500:	6893      	ldr	r3, [r2, #8]
 8000502:	079e      	lsls	r6, r3, #30
 8000504:	d5fc      	bpl.n	8000500 <SD_SendCmd+0xac>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000506:	2201      	movs	r2, #1
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	4830      	ldr	r0, [pc, #192]	; (80005cc <SD_SendCmd+0x178>)
 800050c:	f10d 010f 	add.w	r1, sp, #15
 8000510:	f004 f838 	bl	8004584 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000514:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000516:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051a:	6893      	ldr	r3, [r2, #8]
 800051c:	079d      	lsls	r5, r3, #30
 800051e:	d5fc      	bpl.n	800051a <SD_SendCmd+0xc6>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2201      	movs	r2, #1
 8000524:	4829      	ldr	r0, [pc, #164]	; (80005cc <SD_SendCmd+0x178>)
 8000526:	f10d 010f 	add.w	r1, sp, #15
 800052a:	f004 f82b 	bl	8004584 <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800052e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000532:	d035      	beq.n	80005a0 <SD_SendCmd+0x14c>
	else crc = 1;
 8000534:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8000538:	bf0c      	ite	eq
 800053a:	2387      	moveq	r3, #135	; 0x87
 800053c:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800053e:	6822      	ldr	r2, [r4, #0]
 8000540:	f88d 300f 	strb.w	r3, [sp, #15]
 8000544:	6893      	ldr	r3, [r2, #8]
 8000546:	0798      	lsls	r0, r3, #30
 8000548:	d5fc      	bpl.n	8000544 <SD_SendCmd+0xf0>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2201      	movs	r2, #1
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <SD_SendCmd+0x178>)
 8000550:	f10d 010f 	add.w	r1, sp, #15
 8000554:	f004 f816 	bl	8004584 <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 8000558:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 800055c:	d022      	beq.n	80005a4 <SD_SendCmd+0x150>
	else crc = 1;
 800055e:	250a      	movs	r5, #10
	dummy = 0xFF;
 8000560:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000564:	2764      	movs	r7, #100	; 0x64
 8000566:	4e19      	ldr	r6, [pc, #100]	; (80005cc <SD_SendCmd+0x178>)
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000568:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800056a:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800056e:	6893      	ldr	r3, [r2, #8]
 8000570:	079b      	lsls	r3, r3, #30
 8000572:	d5fc      	bpl.n	800056e <SD_SendCmd+0x11a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000574:	2301      	movs	r3, #1
 8000576:	4630      	mov	r0, r6
 8000578:	f10d 020f 	add.w	r2, sp, #15
 800057c:	f10d 010e 	add.w	r1, sp, #14
 8000580:	9700      	str	r7, [sp, #0]
 8000582:	f004 f8c9 	bl	8004718 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 8000586:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 800058a:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 800058e:	2b00      	cmp	r3, #0
 8000590:	da83      	bge.n	800049a <SD_SendCmd+0x46>
 8000592:	1e6b      	subs	r3, r5, #1
 8000594:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8000598:	d1e6      	bne.n	8000568 <SD_SendCmd+0x114>
}
 800059a:	b005      	add	sp, #20
 800059c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80005a0:	2395      	movs	r3, #149	; 0x95
 80005a2:	e7cc      	b.n	800053e <SD_SendCmd+0xea>
	dummy = 0xFF;
 80005a4:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a6:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80005a8:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ac:	6893      	ldr	r3, [r2, #8]
 80005ae:	0799      	lsls	r1, r3, #30
 80005b0:	d5fc      	bpl.n	80005ac <SD_SendCmd+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005b2:	2564      	movs	r5, #100	; 0x64
 80005b4:	2301      	movs	r3, #1
 80005b6:	f10d 020f 	add.w	r2, sp, #15
 80005ba:	f10d 010e 	add.w	r1, sp, #14
 80005be:	9500      	str	r5, [sp, #0]
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <SD_SendCmd+0x178>)
 80005c2:	f004 f8a9 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 80005c6:	e7ca      	b.n	800055e <SD_SendCmd+0x10a>
 80005c8:	20000218 	.word	0x20000218
 80005cc:	20000788 	.word	0x20000788

080005d0 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d147      	bne.n	8000664 <SD_disk_initialize+0x94>
{
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80005d8:	4d7c      	ldr	r5, [pc, #496]	; (80007cc <SD_disk_initialize+0x1fc>)
{
 80005da:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 80005dc:	782c      	ldrb	r4, [r5, #0]
 80005de:	f014 0402 	ands.w	r4, r4, #2
 80005e2:	d004      	beq.n	80005ee <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 80005e4:	7828      	ldrb	r0, [r5, #0]
 80005e6:	b2c0      	uxtb	r0, r0
}
 80005e8:	b007      	add	sp, #28
 80005ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 80005ee:	f7ff fdbf 	bl	8000170 <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f2:	4622      	mov	r2, r4
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4875      	ldr	r0, [pc, #468]	; (80007d0 <SD_disk_initialize+0x200>)
 80005fa:	f001 fecf 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f001 f9f6 	bl	80019f0 <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 8000604:	4621      	mov	r1, r4
 8000606:	2040      	movs	r0, #64	; 0x40
 8000608:	f7ff ff24 	bl	8000454 <SD_SendCmd>
 800060c:	2801      	cmp	r0, #1
 800060e:	4606      	mov	r6, r0
 8000610:	d031      	beq.n	8000676 <SD_disk_initialize+0xa6>
 8000612:	4e70      	ldr	r6, [pc, #448]	; (80007d4 <SD_disk_initialize+0x204>)
 8000614:	f10d 0813 	add.w	r8, sp, #19
 8000618:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 800061c:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <SD_disk_initialize+0x208>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000624:	486a      	ldr	r0, [pc, #424]	; (80007d0 <SD_disk_initialize+0x200>)
	CardType = type;
 8000626:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000628:	f001 feb8 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f9df 	bl	80019f0 <HAL_Delay>
	dummy = 0xFF;
 8000632:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000634:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000636:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800063a:	6893      	ldr	r3, [r2, #8]
 800063c:	079b      	lsls	r3, r3, #30
 800063e:	d5fc      	bpl.n	800063a <SD_disk_initialize+0x6a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000640:	2664      	movs	r6, #100	; 0x64
 8000642:	4642      	mov	r2, r8
 8000644:	4639      	mov	r1, r7
 8000646:	2301      	movs	r3, #1
 8000648:	4862      	ldr	r0, [pc, #392]	; (80007d4 <SD_disk_initialize+0x204>)
 800064a:	9600      	str	r6, [sp, #0]
 800064c:	f004 f864 	bl	8004718 <HAL_SPI_TransmitReceive>
	if (type)
 8000650:	b154      	cbz	r4, 8000668 <SD_disk_initialize+0x98>
		Stat &= ~STA_NOINIT;
 8000652:	782b      	ldrb	r3, [r5, #0]
 8000654:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000658:	702b      	strb	r3, [r5, #0]
	return Stat;
 800065a:	7828      	ldrb	r0, [r5, #0]
 800065c:	b2c0      	uxtb	r0, r0
}
 800065e:	b007      	add	sp, #28
 8000660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 8000664:	2001      	movs	r0, #1
}
 8000666:	4770      	bx	lr
	return Stat;
 8000668:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <SD_disk_initialize+0x20c>)
	return Stat;
 800066c:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 800066e:	701c      	strb	r4, [r3, #0]
}
 8000670:	b007      	add	sp, #28
 8000672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80007e0 <SD_disk_initialize+0x210>
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800067e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000682:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 8000684:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000688:	f7ff fee4 	bl	8000454 <SD_SendCmd>
 800068c:	2801      	cmp	r0, #1
 800068e:	d167      	bne.n	8000760 <SD_disk_initialize+0x190>
 8000690:	4e50      	ldr	r6, [pc, #320]	; (80007d4 <SD_disk_initialize+0x204>)
 8000692:	ab05      	add	r3, sp, #20
 8000694:	469a      	mov	sl, r3
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000696:	46b3      	mov	fp, r6
 8000698:	9303      	str	r3, [sp, #12]
 800069a:	f10d 0813 	add.w	r8, sp, #19
 800069e:	f10d 0712 	add.w	r7, sp, #18
	dummy = 0xFF;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a6:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80006a8:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006ac:	6893      	ldr	r3, [r2, #8]
 80006ae:	0798      	lsls	r0, r3, #30
 80006b0:	d5fc      	bpl.n	80006ac <SD_disk_initialize+0xdc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	4642      	mov	r2, r8
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4639      	mov	r1, r7
 80006ba:	2301      	movs	r3, #1
 80006bc:	4658      	mov	r0, fp
 80006be:	f004 f82b 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 80006c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 80006c6:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 80006ca:	ab06      	add	r3, sp, #24
 80006cc:	459a      	cmp	sl, r3
 80006ce:	d1e8      	bne.n	80006a2 <SD_disk_initialize+0xd2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80006d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d1a1      	bne.n	800061c <SD_disk_initialize+0x4c>
 80006d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80006dc:	2baa      	cmp	r3, #170	; 0xaa
 80006de:	d19d      	bne.n	800061c <SD_disk_initialize+0x4c>
 80006e0:	e003      	b.n	80006ea <SD_disk_initialize+0x11a>
				} while (Timer1);
 80006e2:	f8b9 3000 	ldrh.w	r3, [r9]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d098      	beq.n	800061c <SD_disk_initialize+0x4c>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006ea:	2100      	movs	r1, #0
 80006ec:	2077      	movs	r0, #119	; 0x77
 80006ee:	f7ff feb1 	bl	8000454 <SD_SendCmd>
 80006f2:	2801      	cmp	r0, #1
 80006f4:	d8f5      	bhi.n	80006e2 <SD_disk_initialize+0x112>
 80006f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80006fa:	2069      	movs	r0, #105	; 0x69
 80006fc:	f7ff feaa 	bl	8000454 <SD_SendCmd>
 8000700:	2800      	cmp	r0, #0
 8000702:	d1ee      	bne.n	80006e2 <SD_disk_initialize+0x112>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000704:	f8b9 3000 	ldrh.w	r3, [r9]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d087      	beq.n	800061c <SD_disk_initialize+0x4c>
 800070c:	4601      	mov	r1, r0
 800070e:	207a      	movs	r0, #122	; 0x7a
 8000710:	f7ff fea0 	bl	8000454 <SD_SendCmd>
 8000714:	2800      	cmp	r0, #0
 8000716:	d181      	bne.n	800061c <SD_disk_initialize+0x4c>
	dummy = 0xFF;
 8000718:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800071c:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8000720:	4c2c      	ldr	r4, [pc, #176]	; (80007d4 <SD_disk_initialize+0x204>)
 8000722:	f8dd b00c 	ldr.w	fp, [sp, #12]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000726:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000728:	f88d 9012 	strb.w	r9, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800072c:	6893      	ldr	r3, [r2, #8]
 800072e:	0799      	lsls	r1, r3, #30
 8000730:	d5fc      	bpl.n	800072c <SD_disk_initialize+0x15c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000732:	2301      	movs	r3, #1
 8000734:	4642      	mov	r2, r8
 8000736:	4639      	mov	r1, r7
 8000738:	4620      	mov	r0, r4
 800073a:	f8cd a000 	str.w	sl, [sp]
 800073e:	f003 ffeb 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000742:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 8000746:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 800074a:	ab06      	add	r3, sp, #24
 800074c:	459b      	cmp	fp, r3
 800074e:	d1ea      	bne.n	8000726 <SD_disk_initialize+0x156>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000750:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000754:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000758:	bf14      	ite	ne
 800075a:	240c      	movne	r4, #12
 800075c:	2404      	moveq	r4, #4
 800075e:	e75d      	b.n	800061c <SD_disk_initialize+0x4c>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000760:	4621      	mov	r1, r4
 8000762:	2077      	movs	r0, #119	; 0x77
 8000764:	f7ff fe76 	bl	8000454 <SD_SendCmd>
 8000768:	2801      	cmp	r0, #1
 800076a:	d809      	bhi.n	8000780 <SD_disk_initialize+0x1b0>
 800076c:	e026      	b.n	80007bc <SD_disk_initialize+0x1ec>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800076e:	2041      	movs	r0, #65	; 0x41
 8000770:	f7ff fe70 	bl	8000454 <SD_SendCmd>
 8000774:	b198      	cbz	r0, 800079e <SD_disk_initialize+0x1ce>
			} while (Timer1);
 8000776:	f8b9 3000 	ldrh.w	r3, [r9]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f43f af49 	beq.w	8000612 <SD_disk_initialize+0x42>
				if (type == CT_SD1)
 8000780:	2e02      	cmp	r6, #2
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000782:	f04f 0100 	mov.w	r1, #0
				if (type == CT_SD1)
 8000786:	d1f2      	bne.n	800076e <SD_disk_initialize+0x19e>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000788:	2077      	movs	r0, #119	; 0x77
 800078a:	f7ff fe63 	bl	8000454 <SD_SendCmd>
 800078e:	2801      	cmp	r0, #1
 8000790:	d8f1      	bhi.n	8000776 <SD_disk_initialize+0x1a6>
 8000792:	2100      	movs	r1, #0
 8000794:	2069      	movs	r0, #105	; 0x69
 8000796:	f7ff fe5d 	bl	8000454 <SD_SendCmd>
 800079a:	2800      	cmp	r0, #0
 800079c:	d1eb      	bne.n	8000776 <SD_disk_initialize+0x1a6>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800079e:	f8b9 3000 	ldrh.w	r3, [r9]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f43f af35 	beq.w	8000612 <SD_disk_initialize+0x42>
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	2050      	movs	r0, #80	; 0x50
 80007ae:	f7ff fe51 	bl	8000454 <SD_SendCmd>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	f47f af2d 	bne.w	8000612 <SD_disk_initialize+0x42>
 80007b8:	4634      	mov	r4, r6
 80007ba:	e72a      	b.n	8000612 <SD_disk_initialize+0x42>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80007bc:	4621      	mov	r1, r4
 80007be:	2069      	movs	r0, #105	; 0x69
 80007c0:	f7ff fe48 	bl	8000454 <SD_SendCmd>
 80007c4:	2801      	cmp	r0, #1
 80007c6:	bf98      	it	ls
 80007c8:	2602      	movls	r6, #2
 80007ca:	e7d9      	b.n	8000780 <SD_disk_initialize+0x1b0>
 80007cc:	20000000 	.word	0x20000000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	20000788 	.word	0x20000788
 80007d8:	20000214 	.word	0x20000214
 80007dc:	20000215 	.word	0x20000215
 80007e0:	20000216 	.word	0x20000216

080007e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 80007e4:	b918      	cbnz	r0, 80007ee <SD_disk_status+0xa>
	return Stat;
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <SD_disk_status+0x10>)
 80007e8:	7818      	ldrb	r0, [r3, #0]
 80007ea:	b2c0      	uxtb	r0, r0
 80007ec:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80007ee:	2001      	movs	r0, #1
}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000

080007f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	b084      	sub	sp, #16
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d14f      	bne.n	80008a0 <SD_disk_read+0xa8>
 8000800:	461c      	mov	r4, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d04c      	beq.n	80008a0 <SD_disk_read+0xa8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <SD_disk_read+0xd4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	07d8      	lsls	r0, r3, #31
 800080c:	d44c      	bmi.n	80008a8 <SD_disk_read+0xb0>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800080e:	4615      	mov	r5, r2
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <SD_disk_read+0xd8>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000812:	4830      	ldr	r0, [pc, #192]	; (80008d4 <SD_disk_read+0xdc>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	460e      	mov	r6, r1
 8000818:	075a      	lsls	r2, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	f04f 0200 	mov.w	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8000822:	bf58      	it	pl
 8000824:	026d      	lslpl	r5, r5, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000826:	f001 fdb9 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f001 f8e0 	bl	80019f0 <HAL_Delay>

	SELECT();

	if (count == 1)
 8000830:	2c01      	cmp	r4, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000832:	4629      	mov	r1, r5
	if (count == 1)
 8000834:	d03c      	beq.n	80008b0 <SD_disk_read+0xb8>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000836:	2052      	movs	r0, #82	; 0x52
 8000838:	f7ff fe0c 	bl	8000454 <SD_SendCmd>
 800083c:	4605      	mov	r5, r0
 800083e:	b300      	cbz	r0, 8000882 <SD_disk_read+0x8a>
 8000840:	2501      	movs	r5, #1
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <SD_disk_read+0xdc>)
 800084a:	f001 fda7 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f001 f8ce 	bl	80019f0 <HAL_Delay>
	dummy = 0xFF;
 8000854:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000856:	4a20      	ldr	r2, [pc, #128]	; (80008d8 <SD_disk_read+0xe0>)
	dummy = 0xFF;
 8000858:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	6893      	ldr	r3, [r2, #8]
 8000860:	079b      	lsls	r3, r3, #30
 8000862:	d5fc      	bpl.n	800085e <SD_disk_read+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000864:	2464      	movs	r4, #100	; 0x64
 8000866:	2301      	movs	r3, #1
 8000868:	f10d 020f 	add.w	r2, sp, #15
 800086c:	f10d 010e 	add.w	r1, sp, #14
 8000870:	9400      	str	r4, [sp, #0]
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <SD_disk_read+0xe0>)
 8000874:	f003 ff50 	bl	8004718 <HAL_SPI_TransmitReceive>
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8000878:	4628      	mov	r0, r5
 800087a:	b004      	add	sp, #16
 800087c:	bd70      	pop	{r4, r5, r6, pc}
			} while (--count);
 800087e:	3c01      	subs	r4, #1
 8000880:	d009      	beq.n	8000896 <SD_disk_read+0x9e>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000882:	4630      	mov	r0, r6
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	f7ff fcee 	bl	8000268 <SD_RxDataBlock>
				buff += 512;
 800088c:	f506 7600 	add.w	r6, r6, #512	; 0x200
				if (!SD_RxDataBlock(buff, 512)) break;
 8000890:	2800      	cmp	r0, #0
 8000892:	d1f4      	bne.n	800087e <SD_disk_read+0x86>
 8000894:	2501      	movs	r5, #1
			SD_SendCmd(CMD12, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	204c      	movs	r0, #76	; 0x4c
 800089a:	f7ff fddb 	bl	8000454 <SD_SendCmd>
 800089e:	e7d0      	b.n	8000842 <SD_disk_read+0x4a>
	if (pdrv || !count) return RES_PARERR;
 80008a0:	2504      	movs	r5, #4
}
 80008a2:	4628      	mov	r0, r5
 80008a4:	b004      	add	sp, #16
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008a8:	2503      	movs	r5, #3
}
 80008aa:	4628      	mov	r0, r5
 80008ac:	b004      	add	sp, #16
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80008b0:	2051      	movs	r0, #81	; 0x51
 80008b2:	f7ff fdcf 	bl	8000454 <SD_SendCmd>
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d1c2      	bne.n	8000840 <SD_disk_read+0x48>
 80008ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008be:	4630      	mov	r0, r6
 80008c0:	f7ff fcd2 	bl	8000268 <SD_RxDataBlock>
	return count ? RES_ERROR : RES_OK;
 80008c4:	fab0 f580 	clz	r5, r0
 80008c8:	096d      	lsrs	r5, r5, #5
 80008ca:	e7ba      	b.n	8000842 <SD_disk_read+0x4a>
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000214 	.word	0x20000214
 80008d4:	40010800 	.word	0x40010800
 80008d8:	20000788 	.word	0x20000788

080008dc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80008dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e0:	b087      	sub	sp, #28
 80008e2:	9103      	str	r1, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d16d      	bne.n	80009c4 <SD_disk_write+0xe8>
 80008e8:	469b      	mov	fp, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d06a      	beq.n	80009c4 <SD_disk_write+0xe8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008ee:	4b83      	ldr	r3, [pc, #524]	; (8000afc <SD_disk_write+0x220>)
 80008f0:	4614      	mov	r4, r2
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	07d6      	lsls	r6, r2, #31
 80008f6:	f100 808e 	bmi.w	8000a16 <SD_disk_write+0x13a>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	075d      	lsls	r5, r3, #29
 80008fe:	f100 809e 	bmi.w	8000a3e <SD_disk_write+0x162>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000902:	4d7f      	ldr	r5, [pc, #508]	; (8000b00 <SD_disk_write+0x224>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8000906:	782b      	ldrb	r3, [r5, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (!(CardType & CT_SD2)) sector *= 512;
 800090c:	0758      	lsls	r0, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800090e:	487d      	ldr	r0, [pc, #500]	; (8000b04 <SD_disk_write+0x228>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8000910:	bf58      	it	pl
 8000912:	0264      	lslpl	r4, r4, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000914:	f001 fd42 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f001 f869 	bl	80019f0 <HAL_Delay>

	SELECT();

	if (count == 1)
 800091e:	f1bb 0f01 	cmp.w	fp, #1
 8000922:	f000 809b 	beq.w	8000a5c <SD_disk_write+0x180>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000926:	782b      	ldrb	r3, [r5, #0]
 8000928:	079a      	lsls	r2, r3, #30
 800092a:	f100 808e 	bmi.w	8000a4a <SD_disk_write+0x16e>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800092e:	4621      	mov	r1, r4
 8000930:	2059      	movs	r0, #89	; 0x59
 8000932:	f7ff fd8f 	bl	8000454 <SD_SendCmd>
 8000936:	2800      	cmp	r0, #0
 8000938:	d14a      	bne.n	80009d0 <SD_disk_write+0xf4>
 800093a:	4c73      	ldr	r4, [pc, #460]	; (8000b08 <SD_disk_write+0x22c>)
	dummy = 0xFF;
 800093c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000940:	46a1      	mov	r9, r4
 8000942:	46a0      	mov	r8, r4
 8000944:	4e71      	ldr	r6, [pc, #452]	; (8000b0c <SD_disk_write+0x230>)
 8000946:	f10d 0517 	add.w	r5, sp, #23
 800094a:	f10d 0716 	add.w	r7, sp, #22
	Timer2 = 500;
 800094e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000952:	2464      	movs	r4, #100	; 0x64
	Timer2 = 500;
 8000954:	8033      	strh	r3, [r6, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000956:	f8d8 2000 	ldr.w	r2, [r8]
	dummy = 0xFF;
 800095a:	f88d a016 	strb.w	sl, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800095e:	6893      	ldr	r3, [r2, #8]
 8000960:	079b      	lsls	r3, r3, #30
 8000962:	d5fc      	bpl.n	800095e <SD_disk_write+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000964:	2301      	movs	r3, #1
 8000966:	462a      	mov	r2, r5
 8000968:	4639      	mov	r1, r7
 800096a:	4648      	mov	r0, r9
 800096c:	9400      	str	r4, [sp, #0]
 800096e:	f003 fed3 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000972:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8000976:	2bff      	cmp	r3, #255	; 0xff
 8000978:	d053      	beq.n	8000a22 <SD_disk_write+0x146>
 800097a:	8833      	ldrh	r3, [r6, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1ea      	bne.n	8000956 <SD_disk_write+0x7a>
	Timer2 = 500;
 8000980:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	dummy = 0xFF;
 8000984:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000988:	f04f 0964 	mov.w	r9, #100	; 0x64
 800098c:	4644      	mov	r4, r8
 800098e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8000b08 <SD_disk_write+0x22c>
	Timer2 = 500;
 8000992:	8033      	strh	r3, [r6, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000994:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000996:	f88d a016 	strb.w	sl, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800099a:	6893      	ldr	r3, [r2, #8]
 800099c:	0798      	lsls	r0, r3, #30
 800099e:	d5fc      	bpl.n	800099a <SD_disk_write+0xbe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009a0:	2301      	movs	r3, #1
 80009a2:	462a      	mov	r2, r5
 80009a4:	4639      	mov	r1, r7
 80009a6:	4640      	mov	r0, r8
 80009a8:	f8cd 9000 	str.w	r9, [sp]
 80009ac:	f003 feb4 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 80009b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	d05c      	beq.n	8000a72 <SD_disk_write+0x196>
 80009b8:	8833      	ldrh	r3, [r6, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1ea      	bne.n	8000994 <SD_disk_write+0xb8>
{
 80009be:	f04f 0b01 	mov.w	fp, #1
 80009c2:	e00c      	b.n	80009de <SD_disk_write+0x102>
	if (pdrv || !count) return RES_PARERR;
 80009c4:	f04f 0b04 	mov.w	fp, #4
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 80009c8:	4658      	mov	r0, fp
 80009ca:	b007      	add	sp, #28
 80009cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d0:	f04f 0b01 	mov.w	fp, #1
 80009d4:	4c4c      	ldr	r4, [pc, #304]	; (8000b08 <SD_disk_write+0x22c>)
 80009d6:	f10d 0517 	add.w	r5, sp, #23
 80009da:	f10d 0716 	add.w	r7, sp, #22
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e4:	4847      	ldr	r0, [pc, #284]	; (8000b04 <SD_disk_write+0x228>)
 80009e6:	f001 fcd9 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 f800 	bl	80019f0 <HAL_Delay>
	dummy = 0xFF;
 80009f0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009f2:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80009f4:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009f8:	6893      	ldr	r3, [r2, #8]
 80009fa:	079b      	lsls	r3, r3, #30
 80009fc:	d5fc      	bpl.n	80009f8 <SD_disk_write+0x11c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009fe:	2464      	movs	r4, #100	; 0x64
 8000a00:	2301      	movs	r3, #1
 8000a02:	462a      	mov	r2, r5
 8000a04:	4639      	mov	r1, r7
 8000a06:	9400      	str	r4, [sp, #0]
 8000a08:	483f      	ldr	r0, [pc, #252]	; (8000b08 <SD_disk_write+0x22c>)
 8000a0a:	f003 fe85 	bl	8004718 <HAL_SPI_TransmitReceive>
}
 8000a0e:	4658      	mov	r0, fp
 8000a10:	b007      	add	sp, #28
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a16:	f04f 0b03 	mov.w	fp, #3
}
 8000a1a:	4658      	mov	r0, fp
 8000a1c:	b007      	add	sp, #28
 8000a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return res;
 8000a22:	21fc      	movs	r1, #252	; 0xfc
 8000a24:	9803      	ldr	r0, [sp, #12]
 8000a26:	f7ff fc8d 	bl	8000344 <SD_TxDataBlock.part.0>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d0a8      	beq.n	8000980 <SD_disk_write+0xa4>
				buff += 512;
 8000a2e:	9b03      	ldr	r3, [sp, #12]
			} while (--count);
 8000a30:	f1bb 0b01 	subs.w	fp, fp, #1
				buff += 512;
 8000a34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a38:	9303      	str	r3, [sp, #12]
			} while (--count);
 8000a3a:	d188      	bne.n	800094e <SD_disk_write+0x72>
 8000a3c:	e7a0      	b.n	8000980 <SD_disk_write+0xa4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000a3e:	f04f 0b02 	mov.w	fp, #2
}
 8000a42:	4658      	mov	r0, fp
 8000a44:	b007      	add	sp, #28
 8000a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SD_SendCmd(CMD55, 0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2077      	movs	r0, #119	; 0x77
 8000a4e:	f7ff fd01 	bl	8000454 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000a52:	4659      	mov	r1, fp
 8000a54:	2057      	movs	r0, #87	; 0x57
 8000a56:	f7ff fcfd 	bl	8000454 <SD_SendCmd>
 8000a5a:	e768      	b.n	800092e <SD_disk_write+0x52>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	2058      	movs	r0, #88	; 0x58
 8000a60:	f7ff fcf8 	bl	8000454 <SD_SendCmd>
 8000a64:	4c28      	ldr	r4, [pc, #160]	; (8000b08 <SD_disk_write+0x22c>)
 8000a66:	b1e8      	cbz	r0, 8000aa4 <SD_disk_write+0x1c8>
 8000a68:	f10d 0517 	add.w	r5, sp, #23
 8000a6c:	f10d 0716 	add.w	r7, sp, #22
 8000a70:	e7a5      	b.n	80009be <SD_disk_write+0xe2>
	SPI_TxByte(token);
 8000a72:	23fd      	movs	r3, #253	; 0xfd
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a74:	6822      	ldr	r2, [r4, #0]
 8000a76:	f88d 3017 	strb.w	r3, [sp, #23]
 8000a7a:	6893      	ldr	r3, [r2, #8]
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	d5fc      	bpl.n	8000a7a <SD_disk_write+0x19e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	2201      	movs	r2, #1
 8000a84:	4629      	mov	r1, r5
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <SD_disk_write+0x22c>)
 8000a88:	f003 fd7c 	bl	8004584 <HAL_SPI_Transmit>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000a8c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000a90:	f003 031f 	and.w	r3, r3, #31
 8000a94:	2b05      	cmp	r3, #5
 8000a96:	d192      	bne.n	80009be <SD_disk_write+0xe2>
	return count ? RES_ERROR : RES_OK;
 8000a98:	f1bb 0b00 	subs.w	fp, fp, #0
 8000a9c:	bf18      	it	ne
 8000a9e:	f04f 0b01 	movne.w	fp, #1
 8000aa2:	e79c      	b.n	80009de <SD_disk_write+0x102>
	Timer2 = 500;
 8000aa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	dummy = 0xFF;
 8000aa8:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000aac:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ab0:	46a0      	mov	r8, r4
	Timer2 = 500;
 8000ab2:	4e16      	ldr	r6, [pc, #88]	; (8000b0c <SD_disk_write+0x230>)
 8000ab4:	f10d 0517 	add.w	r5, sp, #23
 8000ab8:	8033      	strh	r3, [r6, #0]
 8000aba:	f10d 0716 	add.w	r7, sp, #22
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000abe:	6820      	ldr	r0, [r4, #0]
	dummy = 0xFF;
 8000ac0:	f88d a016 	strb.w	sl, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ac4:	6883      	ldr	r3, [r0, #8]
 8000ac6:	0799      	lsls	r1, r3, #30
 8000ac8:	d5fc      	bpl.n	8000ac4 <SD_disk_write+0x1e8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000aca:	2301      	movs	r3, #1
 8000acc:	462a      	mov	r2, r5
 8000ace:	4639      	mov	r1, r7
 8000ad0:	4640      	mov	r0, r8
 8000ad2:	f8cd 9000 	str.w	r9, [sp]
 8000ad6:	f003 fe1f 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000ada:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8000ade:	2bff      	cmp	r3, #255	; 0xff
 8000ae0:	d003      	beq.n	8000aea <SD_disk_write+0x20e>
 8000ae2:	8833      	ldrh	r3, [r6, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ea      	bne.n	8000abe <SD_disk_write+0x1e2>
 8000ae8:	e769      	b.n	80009be <SD_disk_write+0xe2>
	return res;
 8000aea:	21fe      	movs	r1, #254	; 0xfe
 8000aec:	9803      	ldr	r0, [sp, #12]
 8000aee:	f7ff fc29 	bl	8000344 <SD_TxDataBlock.part.0>
	return count ? RES_ERROR : RES_OK;
 8000af2:	fab0 fb80 	clz	fp, r0
 8000af6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8000afa:	e770      	b.n	80009de <SD_disk_write+0x102>
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000214 	.word	0x20000214
 8000b04:	40010800 	.word	0x40010800
 8000b08:	20000788 	.word	0x20000788
 8000b0c:	20000218 	.word	0x20000218

08000b10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b14:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000b16:	bb10      	cbnz	r0, 8000b5e <SD_disk_ioctl+0x4e>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8000b18:	2905      	cmp	r1, #5
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4690      	mov	r8, r2
 8000b1e:	d018      	beq.n	8000b52 <SD_disk_ioctl+0x42>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b20:	4b8a      	ldr	r3, [pc, #552]	; (8000d4c <SD_disk_ioctl+0x23c>)
 8000b22:	781c      	ldrb	r4, [r3, #0]
 8000b24:	f014 0401 	ands.w	r4, r4, #1
 8000b28:	d11e      	bne.n	8000b68 <SD_disk_ioctl+0x58>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b30:	4887      	ldr	r0, [pc, #540]	; (8000d50 <SD_disk_ioctl+0x240>)
 8000b32:	f001 fc33 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 ff5a 	bl	80019f0 <HAL_Delay>

		SELECT();

		switch (ctrl)
 8000b3c:	2d0d      	cmp	r5, #13
 8000b3e:	d818      	bhi.n	8000b72 <SD_disk_ioctl+0x62>
 8000b40:	e8df f005 	tbb	[pc, r5]
 8000b44:	17927651 	.word	0x17927651
 8000b48:	17171717 	.word	0x17171717
 8000b4c:	81171717 	.word	0x81171717
 8000b50:	469a      	.short	0x469a
		switch (*ptr)
 8000b52:	7814      	ldrb	r4, [r2, #0]
 8000b54:	2c01      	cmp	r4, #1
 8000b56:	d035      	beq.n	8000bc4 <SD_disk_ioctl+0xb4>
 8000b58:	2c02      	cmp	r4, #2
 8000b5a:	d02e      	beq.n	8000bba <SD_disk_ioctl+0xaa>
 8000b5c:	b354      	cbz	r4, 8000bb4 <SD_disk_ioctl+0xa4>
 8000b5e:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 8000b60:	4620      	mov	r0, r4
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b68:	2403      	movs	r4, #3
}
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	b00b      	add	sp, #44	; 0x2c
 8000b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (ctrl)
 8000b72:	2404      	movs	r4, #4
 8000b74:	4e77      	ldr	r6, [pc, #476]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000b76:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	4873      	ldr	r0, [pc, #460]	; (8000d50 <SD_disk_ioctl+0x240>)
 8000b82:	f001 fc0b 	bl	800239c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 ff32 	bl	80019f0 <HAL_Delay>
	dummy = 0xFF;
 8000b8c:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b8e:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000b90:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b94:	6893      	ldr	r3, [r2, #8]
 8000b96:	079b      	lsls	r3, r3, #30
 8000b98:	d5fc      	bpl.n	8000b94 <SD_disk_ioctl+0x84>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b9a:	2564      	movs	r5, #100	; 0x64
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	463a      	mov	r2, r7
 8000ba0:	f10d 0116 	add.w	r1, sp, #22
 8000ba4:	9500      	str	r5, [sp, #0]
 8000ba6:	486b      	ldr	r0, [pc, #428]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000ba8:	f003 fdb6 	bl	8004718 <HAL_SPI_TransmitReceive>
}
 8000bac:	4620      	mov	r0, r4
 8000bae:	b00b      	add	sp, #44	; 0x2c
 8000bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 8000bb4:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <SD_disk_ioctl+0x248>)
 8000bb6:	701c      	strb	r4, [r3, #0]
			break;
 8000bb8:	e7d2      	b.n	8000b60 <SD_disk_ioctl+0x50>
	return PowerFlag;
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <SD_disk_ioctl+0x248>)
			res = RES_OK;		/* Power Check */
 8000bbc:	4604      	mov	r4, r0
			*(ptr + 1) = SD_CheckPower();
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	7053      	strb	r3, [r2, #1]
			break;
 8000bc2:	e7cd      	b.n	8000b60 <SD_disk_ioctl+0x50>
 8000bc4:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 8000bc6:	f7ff fad3 	bl	8000170 <SD_PowerOn>
			res = RES_OK;
 8000bca:	9803      	ldr	r0, [sp, #12]
 8000bcc:	4604      	mov	r4, r0
			break;
 8000bce:	e7c7      	b.n	8000b60 <SD_disk_ioctl+0x50>
			if (SD_SendCmd(CMD58, 0) == 0)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	207a      	movs	r0, #122	; 0x7a
 8000bd4:	f7ff fc3e 	bl	8000454 <SD_SendCmd>
 8000bd8:	4e5e      	ldr	r6, [pc, #376]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d055      	beq.n	8000c8a <SD_disk_ioctl+0x17a>
 8000bde:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 8000be2:	2404      	movs	r4, #4
 8000be4:	e7c9      	b.n	8000b7a <SD_disk_ioctl+0x6a>
	Timer2 = 500;
 8000be6:	4e5b      	ldr	r6, [pc, #364]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000be8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	dummy = 0xFF;
 8000bec:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bf0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000bf4:	46b0      	mov	r8, r6
	Timer2 = 500;
 8000bf6:	4c59      	ldr	r4, [pc, #356]	; (8000d5c <SD_disk_ioctl+0x24c>)
 8000bf8:	f10d 0b18 	add.w	fp, sp, #24
 8000bfc:	8023      	strh	r3, [r4, #0]
 8000bfe:	f10d 0717 	add.w	r7, sp, #23
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c02:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000c04:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c08:	6893      	ldr	r3, [r2, #8]
 8000c0a:	0798      	lsls	r0, r3, #30
 8000c0c:	d5fc      	bpl.n	8000c08 <SD_disk_ioctl+0xf8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c0e:	2301      	movs	r3, #1
 8000c10:	465a      	mov	r2, fp
 8000c12:	4639      	mov	r1, r7
 8000c14:	4640      	mov	r0, r8
 8000c16:	f8cd 9000 	str.w	r9, [sp]
 8000c1a:	f003 fd7d 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000c1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d02f      	beq.n	8000c86 <SD_disk_ioctl+0x176>
 8000c26:	8823      	ldrh	r3, [r4, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ea      	bne.n	8000c02 <SD_disk_ioctl+0xf2>
	res = RES_ERROR;
 8000c2c:	2401      	movs	r4, #1
 8000c2e:	e7a4      	b.n	8000b7a <SD_disk_ioctl+0x6a>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c30:	2100      	movs	r1, #0
 8000c32:	2049      	movs	r0, #73	; 0x49
 8000c34:	f7ff fc0e 	bl	8000454 <SD_SendCmd>
 8000c38:	4604      	mov	r4, r0
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d047      	beq.n	8000cce <SD_disk_ioctl+0x1be>
 8000c3e:	4e45      	ldr	r6, [pc, #276]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000c40:	f10d 0717 	add.w	r7, sp, #23
 8000c44:	e7f2      	b.n	8000c2c <SD_disk_ioctl+0x11c>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c46:	2100      	movs	r1, #0
 8000c48:	2049      	movs	r0, #73	; 0x49
 8000c4a:	f7ff fc03 	bl	8000454 <SD_SendCmd>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d1f5      	bne.n	8000c3e <SD_disk_ioctl+0x12e>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c52:	2110      	movs	r1, #16
 8000c54:	4640      	mov	r0, r8
 8000c56:	f7ff fb07 	bl	8000268 <SD_RxDataBlock>
	res = RES_ERROR;
 8000c5a:	fab0 f480 	clz	r4, r0
 8000c5e:	4e3d      	ldr	r6, [pc, #244]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000c60:	f10d 0717 	add.w	r7, sp, #23
 8000c64:	0964      	lsrs	r4, r4, #5
 8000c66:	e788      	b.n	8000b7a <SD_disk_ioctl+0x6a>
			*(WORD*) buff = 512;
 8000c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6c:	4e39      	ldr	r6, [pc, #228]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000c6e:	f10d 0717 	add.w	r7, sp, #23
 8000c72:	f8a8 3000 	strh.w	r3, [r8]
			break;
 8000c76:	e780      	b.n	8000b7a <SD_disk_ioctl+0x6a>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c78:	2100      	movs	r1, #0
 8000c7a:	204a      	movs	r0, #74	; 0x4a
 8000c7c:	f7ff fbea 	bl	8000454 <SD_SendCmd>
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d1dc      	bne.n	8000c3e <SD_disk_ioctl+0x12e>
 8000c84:	e7e5      	b.n	8000c52 <SD_disk_ioctl+0x142>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000c86:	462c      	mov	r4, r5
 8000c88:	e777      	b.n	8000b7a <SD_disk_ioctl+0x6a>
	dummy = 0xFF;
 8000c8a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c8e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000c92:	4635      	mov	r5, r6
 8000c94:	f108 34ff 	add.w	r4, r8, #4294967295
 8000c98:	f10d 0b18 	add.w	fp, sp, #24
 8000c9c:	f108 0803 	add.w	r8, r8, #3
 8000ca0:	f10d 0717 	add.w	r7, sp, #23
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ca4:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000ca6:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000caa:	6893      	ldr	r3, [r2, #8]
 8000cac:	0799      	lsls	r1, r3, #30
 8000cae:	d5fc      	bpl.n	8000caa <SD_disk_ioctl+0x19a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	465a      	mov	r2, fp
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f8cd 9000 	str.w	r9, [sp]
 8000cbc:	f003 fd2c 	bl	8004718 <HAL_SPI_TransmitReceive>
	return data;
 8000cc0:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 8000cc4:	f804 3f01 	strb.w	r3, [r4, #1]!
				for (n = 0; n < 4; n++)
 8000cc8:	4544      	cmp	r4, r8
 8000cca:	d1eb      	bne.n	8000ca4 <SD_disk_ioctl+0x194>
 8000ccc:	e789      	b.n	8000be2 <SD_disk_ioctl+0xd2>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cce:	2110      	movs	r1, #16
 8000cd0:	a806      	add	r0, sp, #24
 8000cd2:	f7ff fac9 	bl	8000268 <SD_RxDataBlock>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d0b1      	beq.n	8000c3e <SD_disk_ioctl+0x12e>
				if ((csd[0] >> 6) == 1)
 8000cda:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000cde:	099b      	lsrs	r3, r3, #6
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d023      	beq.n	8000d2c <SD_disk_ioctl+0x21c>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ce4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000ce8:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8000cf2:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	0289      	lsls	r1, r1, #10
 8000cfa:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000cfe:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d00:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8000d04:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 8000d08:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 8000d0c:	f002 020f 	and.w	r2, r2, #15
 8000d10:	0049      	lsls	r1, r1, #1
 8000d12:	f001 0106 	and.w	r1, r1, #6
 8000d16:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d1a:	440a      	add	r2, r1
 8000d1c:	3a07      	subs	r2, #7
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	4e0c      	ldr	r6, [pc, #48]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000d22:	f8c8 3000 	str.w	r3, [r8]
 8000d26:	f10d 0717 	add.w	r7, sp, #23
 8000d2a:	e726      	b.n	8000b7a <SD_disk_ioctl+0x6a>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d2c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8000d30:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8000d34:	3301      	adds	r3, #1
 8000d36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	029b      	lsls	r3, r3, #10
 8000d3e:	4e05      	ldr	r6, [pc, #20]	; (8000d54 <SD_disk_ioctl+0x244>)
 8000d40:	f8c8 3000 	str.w	r3, [r8]
 8000d44:	f10d 0717 	add.w	r7, sp, #23
 8000d48:	e717      	b.n	8000b7a <SD_disk_ioctl+0x6a>
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	40010800 	.word	0x40010800
 8000d54:	20000788 	.word	0x20000788
 8000d58:	20000215 	.word	0x20000215
 8000d5c:	20000218 	.word	0x20000218

08000d60 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//start/stop button pressed
    if(GPIO_Pin == START_BTN_Pin)
 8000d60:	2840      	cmp	r0, #64	; 0x40
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_EXTI_Callback+0x12>
    	//meas_start = 0 -> wait
    	//meas_start = 1 -> start measurment cycle
    	//meas_start = 2 -> stop measurment cycle
        meas_start++;
    }
    if((GPIO_Pin == THRESHOLD_IRQ_Pin)&&(meas_start == 1))
 8000d64:	2880      	cmp	r0, #128	; 0x80
 8000d66:	d103      	bne.n	8000d70 <HAL_GPIO_EXTI_Callback+0x10>
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	//notify the main loop to measure detector signal
    	if(data_ready == 0)data_ready++;
    }
}
 8000d70:	4770      	bx	lr
        meas_start++;
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d74:	7813      	ldrb	r3, [r2, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	7013      	strb	r3, [r2, #0]
    if((GPIO_Pin == THRESHOLD_IRQ_Pin)&&(meas_start == 1))
 8000d7c:	4770      	bx	lr
    	if(data_ready == 0)data_ready++;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d1f4      	bne.n	8000d70 <HAL_GPIO_EXTI_Callback+0x10>
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	3201      	adds	r2, #1
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	e7ef      	b.n	8000d70 <HAL_GPIO_EXTI_Callback+0x10>
 8000d90:	20000828 	.word	0x20000828
 8000d94:	20000220 	.word	0x20000220

08000d98 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d98:	2300      	movs	r3, #0
{
 8000d9a:	b530      	push	{r4, r5, lr}
 8000d9c:	b095      	sub	sp, #84	; 0x54

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000da4:	2109      	movs	r1, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000dac:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db6:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	930d      	str	r3, [sp, #52]	; 0x34
 8000dbc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbe:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dca:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dce:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dd2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f002 fb3e 	bl	8003454 <HAL_RCC_OscConfig>
 8000dd8:	b108      	cbz	r0, 8000dde <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dea:	4621      	mov	r1, r4
 8000dec:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000df4:	f002 fd5a 	bl	80038ac <HAL_RCC_ClockConfig>
 8000df8:	b108      	cbz	r0, 8000dfe <SystemClock_Config+0x66>
 8000dfa:	b672      	cpsid	i
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8000dfe:	2413      	movs	r4, #19
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e00:	f44f 7100 	mov.w	r1, #512	; 0x200
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e0e:	e9cd 4101 	strd	r4, r1, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e12:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	f002 fe09 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	b108      	cbz	r0, 8000e20 <SystemClock_Config+0x88>
 8000e1c:	b672      	cpsid	i
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <SystemClock_Config+0x86>
}
 8000e20:	b015      	add	sp, #84	; 0x54
 8000e22:	bd30      	pop	{r4, r5, pc}

08000e24 <main>:
{
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000e2c:	2602      	movs	r6, #2
{
 8000e2e:	b0bd      	sub	sp, #244	; 0xf4
  HAL_Init();
 8000e30:	f000 fdba 	bl	80019a8 <HAL_Init>
  SystemClock_Config();
 8000e34:	f7ff ffb0 	bl	8000d98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 8000e3c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4ba8      	ldr	r3, [pc, #672]	; (80010e4 <main+0x2c0>)
  HAL_GPIO_WritePin(GPIOA, SYS_BEEP_Pin|LED_RUN_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000e42:	f248 010c 	movw	r1, #32780	; 0x800c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SYS_BEEP_Pin|LED_RUN_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000e48:	48a7      	ldr	r0, [pc, #668]	; (80010e8 <main+0x2c4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	f042 0220 	orr.w	r2, r2, #32
 8000e4e:	619a      	str	r2, [r3, #24]
 8000e50:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e52:	f44f 2860 	mov.w	r8, #917504	; 0xe0000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	f002 0220 	and.w	r2, r2, #32
 8000e5a:	920e      	str	r2, [sp, #56]	; 0x38
 8000e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8000e60:	4fa2      	ldr	r7, [pc, #648]	; (80010ec <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	f042 0204 	orr.w	r2, r2, #4
 8000e66:	619a      	str	r2, [r3, #24]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	f002 0204 	and.w	r2, r2, #4
 8000e6e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	f042 0208 	orr.w	r2, r2, #8
 8000e78:	619a      	str	r2, [r3, #24]
 8000e7a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SYS_BEEP_Pin|LED_RUN_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000e7c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	9310      	str	r3, [sp, #64]	; 0x40
 8000e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOA, SYS_BEEP_Pin|LED_RUN_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000e86:	f001 fa89 	bl	800239c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PEAK_DET_RST_Pin|LED_COM_Pin|LED_CON_Pin|LED_SD_Pin, GPIO_PIN_RESET);
 8000e8a:	4622      	mov	r2, r4
 8000e8c:	f240 3181 	movw	r1, #897	; 0x381
 8000e90:	4897      	ldr	r0, [pc, #604]	; (80010f0 <main+0x2cc>)
 8000e92:	f001 fa83 	bl	800239c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V_DET_TOOGLE_GPIO_Port, V_DET_TOOGLE_Pin, GPIO_PIN_SET);
 8000e96:	462a      	mov	r2, r5
 8000e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9c:	4894      	ldr	r0, [pc, #592]	; (80010f0 <main+0x2cc>)
 8000e9e:	f001 fa7d 	bl	800239c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	4891      	ldr	r0, [pc, #580]	; (80010e8 <main+0x2c4>)
 8000ea4:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	e9cd 6432 	strd	r6, r4, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	9534      	str	r5, [sp, #208]	; 0xd0
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f001 f968 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYS_BEEP_Pin|SD_CS_Pin;
 8000eb0:	f248 0304 	movw	r3, #32772	; 0x8004
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	488c      	ldr	r0, [pc, #560]	; (80010e8 <main+0x2c4>)
 8000eb6:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Pin = SYS_BEEP_Pin|SD_CS_Pin;
 8000eb8:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	e9cd 5433 	strd	r5, r4, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	9635      	str	r6, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f001 f95e 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RUN_Pin;
 8000ec4:	2308      	movs	r3, #8
  HAL_GPIO_Init(LED_RUN_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	4888      	ldr	r0, [pc, #544]	; (80010e8 <main+0x2c4>)
 8000ec8:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Pin = LED_RUN_Pin;
 8000eca:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ecc:	e9cd 5633 	strd	r5, r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	9635      	str	r6, [sp, #212]	; 0xd4
  HAL_GPIO_Init(LED_RUN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f001 f955 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	4b86      	ldr	r3, [pc, #536]	; (80010f4 <main+0x2d0>)
  HAL_GPIO_Init(THRESHOLD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000eda:	4883      	ldr	r0, [pc, #524]	; (80010e8 <main+0x2c4>)
 8000edc:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ede:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee2:	9534      	str	r5, [sp, #208]	; 0xd0
  HAL_GPIO_Init(THRESHOLD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f001 f94c 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PEAK_DET_RST_Pin|LED_COM_Pin;
 8000ee8:	2381      	movs	r3, #129	; 0x81
 8000eea:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	4880      	ldr	r0, [pc, #512]	; (80010f0 <main+0x2cc>)
 8000ef0:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	9335      	str	r3, [sp, #212]	; 0xd4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef4:	e9cd 5633 	strd	r5, r6, [sp, #204]	; 0xcc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f001 f942 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DET_CON_Pin;
 8000efc:	2304      	movs	r3, #4
  HAL_GPIO_Init(DET_CON_GPIO_Port, &GPIO_InitStruct);
 8000efe:	487c      	ldr	r0, [pc, #496]	; (80010f0 <main+0x2cc>)
 8000f00:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Pin = DET_CON_Pin;
 8000f02:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f04:	e9cd 4633 	strd	r4, r6, [sp, #204]	; 0xcc
  HAL_GPIO_Init(DET_CON_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f001 f93a 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = V_DET_TOOGLE_Pin;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(V_DET_TOOGLE_GPIO_Port, &GPIO_InitStruct);
 8000f10:	4877      	ldr	r0, [pc, #476]	; (80010f0 <main+0x2cc>)
 8000f12:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Pin = V_DET_TOOGLE_Pin;
 8000f14:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	9635      	str	r6, [sp, #212]	; 0xd4
  HAL_GPIO_Init(V_DET_TOOGLE_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f001 f930 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	2040      	movs	r0, #64	; 0x40
 8000f22:	4b75      	ldr	r3, [pc, #468]	; (80010f8 <main+0x2d4>)
  HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f24:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f26:	e9cd 0332 	strd	r0, r3, [sp, #200]	; 0xc8
  HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	4871      	ldr	r0, [pc, #452]	; (80010f0 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	9434      	str	r4, [sp, #208]	; 0xd0
  HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f001 f927 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CON_Pin|LED_SD_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	486e      	ldr	r0, [pc, #440]	; (80010f0 <main+0x2cc>)
 8000f38:	a932      	add	r1, sp, #200	; 0xc8
  GPIO_InitStruct.Pin = LED_CON_Pin|LED_SD_Pin;
 8000f3a:	9332      	str	r3, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f3c:	e9cd 5633 	strd	r5, r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	9635      	str	r6, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f001 f91d 	bl	8002180 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f46:	4622      	mov	r2, r4
 8000f48:	4621      	mov	r1, r4
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f001 f8b4 	bl	80020b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f50:	2017      	movs	r0, #23
 8000f52:	f001 f8ef 	bl	8002134 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <main+0x2d8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f58:	4638      	mov	r0, r7
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 8000f5e:	9434      	str	r4, [sp, #208]	; 0xd0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f60:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f62:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f64:	753c      	strb	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	607c      	str	r4, [r7, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f68:	f8c7 801c 	str.w	r8, [r7, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	613d      	str	r5, [r7, #16]
  hadc1.Instance = ADC1;
 8000f6e:	603b      	str	r3, [r7, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f70:	f000 ff74 	bl	8001e5c <HAL_ADC_Init>
 8000f74:	b108      	cbz	r0, 8000f7a <main+0x156>
 8000f76:	b672      	cpsid	i
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <main+0x154>
  sConfig.Channel = ADC_CHANNEL_6;
 8000f7a:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f7c:	9034      	str	r0, [sp, #208]	; 0xd0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7e:	a932      	add	r1, sp, #200	; 0xc8
 8000f80:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_6;
 8000f82:	9332      	str	r3, [sp, #200]	; 0xc8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f84:	9533      	str	r5, [sp, #204]	; 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	f000 fdfb 	bl	8001b80 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b998      	cbnz	r0, 8000fb6 <main+0x192>
  hadc2.Instance = ADC2;
 8000f8e:	4c5c      	ldr	r4, [pc, #368]	; (8001100 <main+0x2dc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f90:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 8000f94:	9334      	str	r3, [sp, #208]	; 0xd0
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f96:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f98:	7323      	strb	r3, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	7523      	strb	r3, [r4, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9c:	6063      	str	r3, [r4, #4]
  hadc2.Instance = ADC2;
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <main+0x2e0>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fa0:	4620      	mov	r0, r4
  hadc2.Instance = ADC2;
 8000fa2:	6023      	str	r3, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 8000fa8:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000faa:	f000 ff57 	bl	8001e5c <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b118      	cbz	r0, 8000fba <main+0x196>
 8000fb2:	b672      	cpsid	i
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x190>
 8000fb6:	b672      	cpsid	i
 8000fb8:	e7fe      	b.n	8000fb8 <main+0x194>
  sConfig.Channel = ADC_CHANNEL_5;
 8000fba:	2205      	movs	r2, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	a932      	add	r1, sp, #200	; 0xc8
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fc0:	e9cd 5333 	strd	r5, r3, [sp, #204]	; 0xcc
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc4:	9232      	str	r2, [sp, #200]	; 0xc8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc6:	f000 fddb 	bl	8001b80 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b998      	cbnz	r0, 8000ff6 <main+0x1d2>
  hi2c2.Instance = I2C2;
 8000fce:	484e      	ldr	r0, [pc, #312]	; (8001108 <main+0x2e4>)
 8000fd0:	4a4e      	ldr	r2, [pc, #312]	; (800110c <main+0x2e8>)
  hi2c2.Init.OwnAddress2 = 0;
 8000fd2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c2.Instance = I2C2;
 8000fd6:	6002      	str	r2, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <main+0x2ec>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fda:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c2.Init.ClockSpeed = 100000;
 8000fde:	6042      	str	r2, [r0, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fe6:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fea:	f001 f9f1 	bl	80023d0 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b118      	cbz	r0, 8000ffa <main+0x1d6>
 8000ff2:	b672      	cpsid	i
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x1d0>
 8000ff6:	b672      	cpsid	i
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x1d4>
  hspi1.Instance = SPI1;
 8000ffa:	4846      	ldr	r0, [pc, #280]	; (8001114 <main+0x2f0>)
 8000ffc:	4a46      	ldr	r2, [pc, #280]	; (8001118 <main+0x2f4>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100c:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.CRCPolynomial = 10;
 8001010:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 8001012:	6002      	str	r2, [r0, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001014:	6183      	str	r3, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800101a:	2318      	movs	r3, #24
  hspi1.Init.CRCPolynomial = 10;
 800101c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101e:	6042      	str	r2, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001020:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001022:	f003 fa51 	bl	80044c8 <HAL_SPI_Init>
 8001026:	4606      	mov	r6, r0
 8001028:	b108      	cbz	r0, 800102e <main+0x20a>
 800102a:	b672      	cpsid	i
  while (1)
 800102c:	e7fe      	b.n	800102c <main+0x208>
  MX_FATFS_Init();
 800102e:	f004 fc35 	bl	800589c <MX_FATFS_Init>
  hrtc.Instance = RTC;
 8001032:	4c3a      	ldr	r4, [pc, #232]	; (800111c <main+0x2f8>)
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <main+0x2fc>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001036:	4620      	mov	r0, r4
  hrtc.Instance = RTC;
 8001038:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	6063      	str	r3, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001040:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_TimeTypeDef sTime = {0};
 8001044:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
  RTC_DateTypeDef DateToUpdate = {0};
 8001048:	9632      	str	r6, [sp, #200]	; 0xc8
  RTC_TimeTypeDef sTime = {0};
 800104a:	f88d 60a2 	strb.w	r6, [sp, #162]	; 0xa2
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800104e:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001050:	f002 ffc2 	bl	8003fd8 <HAL_RTC_Init>
 8001054:	b108      	cbz	r0, 800105a <main+0x236>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x234>
  sTime.Hours = 0x0;
 800105a:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  sTime.Minutes = 0x0;
 800105e:	f88d 00a1 	strb.w	r0, [sp, #161]	; 0xa1
  sTime.Seconds = 0x0;
 8001062:	f88d 00a2 	strb.w	r0, [sp, #162]	; 0xa2
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001066:	462a      	mov	r2, r5
 8001068:	4620      	mov	r0, r4
 800106a:	a928      	add	r1, sp, #160	; 0xa0
 800106c:	f003 f830 	bl	80040d0 <HAL_RTC_SetTime>
 8001070:	b108      	cbz	r0, 8001076 <main+0x252>
 8001072:	b672      	cpsid	i
  while (1)
 8001074:	e7fe      	b.n	8001074 <main+0x250>
  DateToUpdate.Year = 0x20;
 8001076:	2320      	movs	r3, #32
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001078:	4620      	mov	r0, r4
 800107a:	462a      	mov	r2, r5
 800107c:	a932      	add	r1, sp, #200	; 0xc8
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800107e:	f88d 50c8 	strb.w	r5, [sp, #200]	; 0xc8
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001082:	f88d 50c9 	strb.w	r5, [sp, #201]	; 0xc9
  DateToUpdate.Date = 0x1;
 8001086:	f88d 50ca 	strb.w	r5, [sp, #202]	; 0xca
  DateToUpdate.Year = 0x20;
 800108a:	f88d 30cb 	strb.w	r3, [sp, #203]	; 0xcb
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800108e:	f003 f8bb 	bl	8004208 <HAL_RTC_SetDate>
 8001092:	4604      	mov	r4, r0
 8001094:	b108      	cbz	r0, 800109a <main+0x276>
 8001096:	b672      	cpsid	i
  while (1)
 8001098:	e7fe      	b.n	8001098 <main+0x274>
  MX_USB_DEVICE_Init();
 800109a:	f007 fa17 	bl	80084cc <MX_USB_DEVICE_Init>
  htim1.Instance = TIM1;
 800109e:	4d21      	ldr	r5, [pc, #132]	; (8001124 <main+0x300>)
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <main+0x304>)
  htim1.Init.Period = 65535;
 80010a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Instance = TIM1;
 80010a6:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 48+1;
 80010a8:	2331      	movs	r3, #49	; 0x31
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010aa:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ac:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 80010b0:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
  htim1.Init.RepetitionCounter = 0;
 80010b8:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 80010c0:	60ea      	str	r2, [r5, #12]
  htim1.Init.Prescaler = 48+1;
 80010c2:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c4:	f003 fd46 	bl	8004b54 <HAL_TIM_Base_Init>
 80010c8:	b108      	cbz	r0, 80010ce <main+0x2aa>
 80010ca:	b672      	cpsid	i
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x2a8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <main+0x300>)
 80010d4:	a932      	add	r1, sp, #200	; 0xc8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d8:	f003 fc4a 	bl	8004970 <HAL_TIM_ConfigClockSource>
 80010dc:	b330      	cbz	r0, 800112c <main+0x308>
 80010de:	b672      	cpsid	i
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0x2bc>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	200006c0 	.word	0x200006c0
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	10210000 	.word	0x10210000
 80010f8:	10110000 	.word	0x10110000
 80010fc:	40012400 	.word	0x40012400
 8001100:	200006f0 	.word	0x200006f0
 8001104:	40012800 	.word	0x40012800
 8001108:	20000720 	.word	0x20000720
 800110c:	40005800 	.word	0x40005800
 8001110:	000186a0 	.word	0x000186a0
 8001114:	20000788 	.word	0x20000788
 8001118:	40013000 	.word	0x40013000
 800111c:	20000774 	.word	0x20000774
 8001120:	40002800 	.word	0x40002800
 8001124:	200007e0 	.word	0x200007e0
 8001128:	40012c00 	.word	0x40012c00
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	e9cd 0028 	strd	r0, r0, [sp, #160]	; 0xa0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001130:	a928      	add	r1, sp, #160	; 0xa0
 8001132:	48b6      	ldr	r0, [pc, #728]	; (800140c <main+0x5e8>)
 8001134:	f003 fd3c 	bl	8004bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	b108      	cbz	r0, 800113e <main+0x31a>
 800113a:	b672      	cpsid	i
  while (1)
 800113c:	e7fe      	b.n	800113c <main+0x318>
  char sd_buffer[40] = "0123456789ABCDEF0123456789ABCDEF\n";
 800113e:	4eb4      	ldr	r6, [pc, #720]	; (8001410 <main+0x5ec>)
 8001140:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
 8001144:	f8cd 009a 	str.w	r0, [sp, #154]	; 0x9a
 8001148:	f8ad 009e 	strh.w	r0, [sp, #158]	; 0x9e
  char file_name_buff[32] = "noname";
 800114c:	f8cd 005f 	str.w	r0, [sp, #95]	; 0x5f
 8001150:	f8cd 0063 	str.w	r0, [sp, #99]	; 0x63
 8001154:	f8cd 0067 	str.w	r0, [sp, #103]	; 0x67
 8001158:	f8cd 006b 	str.w	r0, [sp, #107]	; 0x6b
 800115c:	f8cd 006f 	str.w	r0, [sp, #111]	; 0x6f
 8001160:	f8cd 0073 	str.w	r0, [sp, #115]	; 0x73
 8001164:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
  char sd_buffer[40] = "0123456789ABCDEF0123456789ABCDEF\n";
 8001168:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800116a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800116e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001174:	f856 3b08 	ldr.w	r3, [r6], #8
 8001178:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8001414 <main+0x5f0>
  char file_name_buff[32] = "noname";
 800117c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001180:	9016      	str	r0, [sp, #88]	; 0x58
 8001182:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001186:	48a4      	ldr	r0, [pc, #656]	; (8001418 <main+0x5f4>)
  char file_name_buff[32] = "noname";
 8001188:	0c09      	lsrs	r1, r1, #16
  char sd_buffer[40] = "0123456789ABCDEF0123456789ABCDEF\n";
 800118a:	f8ac 3000 	strh.w	r3, [ip]
  char file_name_buff[32] = "noname";
 800118e:	f88d 105e 	strb.w	r1, [sp, #94]	; 0x5e
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001192:	f000 ff03 	bl	8001f9c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001196:	48a1      	ldr	r0, [pc, #644]	; (800141c <main+0x5f8>)
 8001198:	f000 ff00 	bl	8001f9c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim1);
 800119c:	489b      	ldr	r0, [pc, #620]	; (800140c <main+0x5e8>)
 800119e:	4fa0      	ldr	r7, [pc, #640]	; (8001420 <main+0x5fc>)
 80011a0:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8001424 <main+0x600>
	  if(strcmp(vcp_command,"start") == 0)
 80011a4:	4ca0      	ldr	r4, [pc, #640]	; (8001428 <main+0x604>)
  HAL_TIM_Base_Start(&htim1);
 80011a6:	f003 fbbb 	bl	8004920 <HAL_TIM_Base_Start>
 80011aa:	e014      	b.n	80011d6 <main+0x3b2>
		 if(meas_start == 0)
 80011ac:	f899 3000 	ldrb.w	r3, [r9]
 80011b0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80dc 	beq.w	8001372 <main+0x54e>
	      memset(vcp_command,'0',sizeof(vcp_command));
 80011ba:	2220      	movs	r2, #32
 80011bc:	2130      	movs	r1, #48	; 0x30
 80011be:	4620      	mov	r0, r4
 80011c0:	f007 fbf6 	bl	80089b0 <memset>
	 if(meas_start == 2)
 80011c4:	f899 3000 	ldrb.w	r3, [r9]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d06d      	beq.n	80012a8 <main+0x484>
	 if(data_ready == 1)
 80011cc:	4b97      	ldr	r3, [pc, #604]	; (800142c <main+0x608>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	f000 8153 	beq.w	800147c <main+0x658>
	  if(sys_tick_ms >= 100)
 80011d6:	4b96      	ldr	r3, [pc, #600]	; (8001430 <main+0x60c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	d812      	bhi.n	8001204 <main+0x3e0>
	  if(strcmp(vcp_command,"start") == 0)
 80011de:	4620      	mov	r0, r4
 80011e0:	4994      	ldr	r1, [pc, #592]	; (8001434 <main+0x610>)
 80011e2:	f7fe ffb3 	bl	800014c <strcmp>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d0e0      	beq.n	80011ac <main+0x388>
	  else if(strcmp(vcp_command,"stop") == 0)
 80011ea:	4620      	mov	r0, r4
 80011ec:	4992      	ldr	r1, [pc, #584]	; (8001438 <main+0x614>)
 80011ee:	f7fe ffad 	bl	800014c <strcmp>
 80011f2:	b978      	cbnz	r0, 8001214 <main+0x3f0>
		  if(meas_start == 1)meas_start = 2;
 80011f4:	f899 3000 	ldrb.w	r3, [r9]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1de      	bne.n	80011ba <main+0x396>
 80011fc:	2302      	movs	r3, #2
 80011fe:	f889 3000 	strb.w	r3, [r9]
 8001202:	e7da      	b.n	80011ba <main+0x396>
		  sys_tick_ms = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <main+0x60c>)
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001208:	2108      	movs	r1, #8
 800120a:	488c      	ldr	r0, [pc, #560]	; (800143c <main+0x618>)
		  sys_tick_ms = 0;
 800120c:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800120e:	f001 f8c9 	bl	80023a4 <HAL_GPIO_TogglePin>
 8001212:	e7e4      	b.n	80011de <main+0x3ba>
	  else if(strcmp(vcp_command,"temp") == 0)
 8001214:	4620      	mov	r0, r4
 8001216:	498a      	ldr	r1, [pc, #552]	; (8001440 <main+0x61c>)
 8001218:	f7fe ff98 	bl	800014c <strcmp>
 800121c:	2800      	cmp	r0, #0
 800121e:	f000 81b5 	beq.w	800158c <main+0x768>
	  else if(strcmp(vcp_command,"set_time") == 0)
 8001222:	4620      	mov	r0, r4
 8001224:	4987      	ldr	r1, [pc, #540]	; (8001444 <main+0x620>)
 8001226:	f7fe ff91 	bl	800014c <strcmp>
 800122a:	4606      	mov	r6, r0
 800122c:	2800      	cmp	r0, #0
 800122e:	f000 817d 	beq.w	800152c <main+0x708>
	  else if(strcmp(vcp_command,"set_file_name") == 0)
 8001232:	4620      	mov	r0, r4
 8001234:	4984      	ldr	r1, [pc, #528]	; (8001448 <main+0x624>)
 8001236:	f7fe ff89 	bl	800014c <strcmp>
 800123a:	2800      	cmp	r0, #0
 800123c:	f000 8166 	beq.w	800150c <main+0x6e8>
	  else if(strcmp(vcp_command,"get_time") == 0)
 8001240:	4620      	mov	r0, r4
 8001242:	4982      	ldr	r1, [pc, #520]	; (800144c <main+0x628>)
 8001244:	f7fe ff82 	bl	800014c <strcmp>
 8001248:	4606      	mov	r6, r0
 800124a:	2800      	cmp	r0, #0
 800124c:	d1ba      	bne.n	80011c4 <main+0x3a0>
		  memset(time,'0',sizeof(time));
 800124e:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001252:	4602      	mov	r2, r0
 8001254:	a90c      	add	r1, sp, #48	; 0x30
 8001256:	487e      	ldr	r0, [pc, #504]	; (8001450 <main+0x62c>)
		  memset(time,'0',sizeof(time));
 8001258:	9314      	str	r3, [sp, #80]	; 0x50
 800125a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800125e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001260:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001264:	f002 ffc0 	bl	80041e8 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001268:	4632      	mov	r2, r6
 800126a:	a90d      	add	r1, sp, #52	; 0x34
 800126c:	4878      	ldr	r0, [pc, #480]	; (8001450 <main+0x62c>)
 800126e:	f003 f873 	bl	8004358 <HAL_RTC_GetDate>
		  sprintf(time,"%2d-%02d-%02d-%02d-%02d-%02d",2000 + gDate.Year,gDate.Month,gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001272:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001276:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800127a:	9303      	str	r3, [sp, #12]
 800127c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001280:	4974      	ldr	r1, [pc, #464]	; (8001454 <main+0x630>)
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001288:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8001292:	a811      	add	r0, sp, #68	; 0x44
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800129a:	f007 fb91 	bl	80089c0 <siprintf>
	      CDC_Transmit_FS(time, sizeof(time));
 800129e:	2113      	movs	r1, #19
 80012a0:	a811      	add	r0, sp, #68	; 0x44
 80012a2:	f007 f97f 	bl	80085a4 <CDC_Transmit_FS>
 80012a6:	e788      	b.n	80011ba <main+0x396>
	     CDC_Transmit_FS(file_name, sizeof(file_name));
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	486b      	ldr	r0, [pc, #428]	; (8001458 <main+0x634>)
 80012ac:	f007 f97a 	bl	80085a4 <CDC_Transmit_FS>
		 f_mount(&fs, "", 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	496a      	ldr	r1, [pc, #424]	; (800145c <main+0x638>)
 80012b4:	486a      	ldr	r0, [pc, #424]	; (8001460 <main+0x63c>)
 80012b6:	f006 fdaf 	bl	8007e18 <f_mount>
		 f_open(&fil, file_name, FA_OPEN_ALWAYS | FA_WRITE);
 80012ba:	2212      	movs	r2, #18
 80012bc:	4966      	ldr	r1, [pc, #408]	; (8001458 <main+0x634>)
 80012be:	4869      	ldr	r0, [pc, #420]	; (8001464 <main+0x640>)
 80012c0:	f006 fde6 	bl	8007e90 <f_open>
		 f_lseek(&fil, fil.fsize);
 80012c4:	4b67      	ldr	r3, [pc, #412]	; (8001464 <main+0x640>)
		 for (int i = 0;i < 2048;i++)
 80012c6:	2600      	movs	r6, #0
		 f_lseek(&fil, fil.fsize);
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 ff42 	bl	8008154 <f_lseek>
         HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80012d0:	2200      	movs	r2, #0
 80012d2:	a90d      	add	r1, sp, #52	; 0x34
 80012d4:	485e      	ldr	r0, [pc, #376]	; (8001450 <main+0x62c>)
 80012d6:	f002 ff87 	bl	80041e8 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80012da:	2200      	movs	r2, #0
 80012dc:	a911      	add	r1, sp, #68	; 0x44
 80012de:	485c      	ldr	r0, [pc, #368]	; (8001450 <main+0x62c>)
 80012e0:	f003 f83a 	bl	8004358 <HAL_RTC_GetDate>
         sprintf(meas_end_time,"%2d-%02d-%02d-%02d-%02d-%02d",2000 + gDate.Year,gDate.Month,gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 80012e4:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80012e8:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80012ec:	9303      	str	r3, [sp, #12]
 80012ee:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80012f2:	4958      	ldr	r1, [pc, #352]	; (8001454 <main+0x630>)
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80012fa:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8001304:	a832      	add	r0, sp, #200	; 0xc8
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800130c:	f007 fb58 	bl	80089c0 <siprintf>
		 sprintf(sd_buffer,"%s;%s\n",meas_start_time,meas_end_time);
 8001310:	4955      	ldr	r1, [pc, #340]	; (8001468 <main+0x644>)
 8001312:	ab32      	add	r3, sp, #200	; 0xc8
 8001314:	aa28      	add	r2, sp, #160	; 0xa0
 8001316:	a81e      	add	r0, sp, #120	; 0x78
 8001318:	f007 fb52 	bl	80089c0 <siprintf>
		 f_puts(sd_buffer, &fil);
 800131c:	4951      	ldr	r1, [pc, #324]	; (8001464 <main+0x640>)
 800131e:	a81e      	add	r0, sp, #120	; 0x78
 8001320:	f007 f842 	bl	80083a8 <f_puts>
			sprintf(sd_buffer,"%d;%d\n",sensor_data[i].channel_count,sensor_data[i].channel_count_ovf);
 8001324:	f8df b144 	ldr.w	fp, [pc, #324]	; 800146c <main+0x648>
		    f_puts(sd_buffer, &fil);
 8001328:	f8df a138 	ldr.w	sl, [pc, #312]	; 8001464 <main+0x640>
			sprintf(sd_buffer,"%d;%d\n",sensor_data[i].channel_count,sensor_data[i].channel_count_ovf);
 800132c:	f837 2026 	ldrh.w	r2, [r7, r6, lsl #2]
 8001330:	eb07 0386 	add.w	r3, r7, r6, lsl #2
 8001334:	4659      	mov	r1, fp
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	b292      	uxth	r2, r2
 800133a:	a81e      	add	r0, sp, #120	; 0x78
 800133c:	f007 fb40 	bl	80089c0 <siprintf>
		 for (int i = 0;i < 2048;i++)
 8001340:	3601      	adds	r6, #1
		    f_puts(sd_buffer, &fil);
 8001342:	4651      	mov	r1, sl
 8001344:	a81e      	add	r0, sp, #120	; 0x78
 8001346:	f007 f82f 	bl	80083a8 <f_puts>
		 for (int i = 0;i < 2048;i++)
 800134a:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 800134e:	d1ed      	bne.n	800132c <main+0x508>
		 f_close(&fil);
 8001350:	4844      	ldr	r0, [pc, #272]	; (8001464 <main+0x640>)
 8001352:	f006 fe99 	bl	8008088 <f_close>
		 f_mount(NULL, "", 0);
 8001356:	2200      	movs	r2, #0
 8001358:	4940      	ldr	r1, [pc, #256]	; (800145c <main+0x638>)
 800135a:	4610      	mov	r0, r2
 800135c:	f006 fd5c 	bl	8007e18 <f_mount>
		 meas_start = 0;
 8001360:	2200      	movs	r2, #0
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001366:	4842      	ldr	r0, [pc, #264]	; (8001470 <main+0x64c>)
		 meas_start = 0;
 8001368:	f889 2000 	strb.w	r2, [r9]
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800136c:	f001 f816 	bl	800239c <HAL_GPIO_WritePin>
 8001370:	e72c      	b.n	80011cc <main+0x3a8>
			 memcpy(file_name_buff,vcp_data,sizeof(vcp_data));
 8001372:	f8df c100 	ldr.w	ip, [pc, #256]	; 8001474 <main+0x650>
 8001376:	ae16      	add	r6, sp, #88	; 0x58
 8001378:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800137c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800137e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001382:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001386:	4652      	mov	r2, sl
 8001388:	a90d      	add	r1, sp, #52	; 0x34
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <main+0x62c>)
 800138c:	f002 ff2c 	bl	80041e8 <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001390:	4652      	mov	r2, sl
 8001392:	a911      	add	r1, sp, #68	; 0x44
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <main+0x62c>)
 8001396:	f002 ffdf 	bl	8004358 <HAL_RTC_GetDate>
			 sprintf(file_name,"%s_%2d-%02d-%02d-%02d-%02d-%02d.txt",file_name_buff,2000 + gDate.Year,gDate.Month,gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 800139a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800139e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 80013a2:	9204      	str	r2, [sp, #16]
 80013a4:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80013a8:	4933      	ldr	r1, [pc, #204]	; (8001478 <main+0x654>)
 80013aa:	9203      	str	r2, [sp, #12]
 80013ac:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80013b0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013b4:	9202      	str	r2, [sp, #8]
 80013b6:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 80013ba:	4827      	ldr	r0, [pc, #156]	; (8001458 <main+0x634>)
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	aa16      	add	r2, sp, #88	; 0x58
 80013c6:	f007 fafb 	bl	80089c0 <siprintf>
			 sprintf(meas_start_time,"%2d-%02d-%02d-%02d-%02d-%02d",2000 + gDate.Year,gDate.Month,gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 80013ca:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80013ce:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80013d8:	491e      	ldr	r1, [pc, #120]	; (8001454 <main+0x630>)
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80013e0:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80013ea:	a828      	add	r0, sp, #160	; 0xa0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80013f2:	f007 fae5 	bl	80089c0 <siprintf>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <main+0x64c>)
 80013fe:	f000 ffcd 	bl	800239c <HAL_GPIO_WritePin>
			 meas_start = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	f889 3000 	strb.w	r3, [r9]
	        memset(vcp_command,'0',sizeof(vcp_command));
 8001408:	e6d7      	b.n	80011ba <main+0x396>
 800140a:	bf00      	nop
 800140c:	200007e0 	.word	0x200007e0
 8001410:	08009c34 	.word	0x08009c34
 8001414:	20000828 	.word	0x20000828
 8001418:	200006c0 	.word	0x200006c0
 800141c:	200006f0 	.word	0x200006f0
 8001420:	2000082c 	.word	0x2000082c
 8001424:	2000021c 	.word	0x2000021c
 8001428:	20002830 	.word	0x20002830
 800142c:	20000220 	.word	0x20000220
 8001430:	2000282c 	.word	0x2000282c
 8001434:	08009c88 	.word	0x08009c88
 8001438:	08009cd4 	.word	0x08009cd4
 800143c:	40010800 	.word	0x40010800
 8001440:	08009cdc 	.word	0x08009cdc
 8001444:	08009ce8 	.word	0x08009ce8
 8001448:	08009d08 	.word	0x08009d08
 800144c:	08009d18 	.word	0x08009d18
 8001450:	20000774 	.word	0x20000774
 8001454:	08009cb4 	.word	0x08009cb4
 8001458:	20000250 	.word	0x20000250
 800145c:	08009d5c 	.word	0x08009d5c
 8001460:	20000290 	.word	0x20000290
 8001464:	20000224 	.word	0x20000224
 8001468:	08009d24 	.word	0x08009d24
 800146c:	08009d2c 	.word	0x08009d2c
 8001470:	40010c00 	.word	0x40010c00
 8001474:	20002850 	.word	0x20002850
 8001478:	08009c90 	.word	0x08009c90
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800147c:	2200      	movs	r2, #0
 800147e:	682b      	ldr	r3, [r5, #0]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001484:	2a04      	cmp	r2, #4
 8001486:	d9fc      	bls.n	8001482 <main+0x65e>
		 DET_VALUE = 0;
 8001488:	2600      	movs	r6, #0
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	4858      	ldr	r0, [pc, #352]	; (80015f0 <main+0x7cc>)
		 DET_VALUE = 0;
 800148e:	f8c8 6000 	str.w	r6, [r8]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001492:	f000 ff87 	bl	80023a4 <HAL_GPIO_TogglePin>
		 HAL_ADC_Start(&hadc1);
 8001496:	4857      	ldr	r0, [pc, #348]	; (80015f4 <main+0x7d0>)
 8001498:	f000 fc50 	bl	8001d3c <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1,5);
 800149c:	2105      	movs	r1, #5
 800149e:	4855      	ldr	r0, [pc, #340]	; (80015f4 <main+0x7d0>)
 80014a0:	f000 fab8 	bl	8001a14 <HAL_ADC_PollForConversion>
		 DET_VALUE = HAL_ADC_GetValue(&hadc1);
 80014a4:	4853      	ldr	r0, [pc, #332]	; (80015f4 <main+0x7d0>)
 80014a6:	f000 fb67 	bl	8001b78 <HAL_ADC_GetValue>
 80014aa:	4603      	mov	r3, r0
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	4850      	ldr	r0, [pc, #320]	; (80015f0 <main+0x7cc>)
		 DET_VALUE = HAL_ADC_GetValue(&hadc1);
 80014b0:	f8c8 3000 	str.w	r3, [r8]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80014b4:	f000 ff76 	bl	80023a4 <HAL_GPIO_TogglePin>
		  if(sensor_data[DET_VALUE].channel_count == 65535)
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
		 DET_VALUE = DET_VALUE/2;
 80014bc:	f8d8 3000 	ldr.w	r3, [r8]
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	f8c8 3000 	str.w	r3, [r8]
		  if(sensor_data[DET_VALUE].channel_count == 65535)
 80014c6:	f8d8 3000 	ldr.w	r3, [r8]
 80014ca:	f837 3023 	ldrh.w	r3, [r7, r3, lsl #2]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d07f      	beq.n	80015d4 <main+0x7b0>
		  	  sensor_data[DET_VALUE].channel_count++;
 80014d4:	f8d8 2000 	ldr.w	r2, [r8]
 80014d8:	f837 3022 	ldrh.w	r3, [r7, r2, lsl #2]
 80014dc:	3301      	adds	r3, #1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f827 3022 	strh.w	r3, [r7, r2, lsl #2]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	4842      	ldr	r0, [pc, #264]	; (80015f0 <main+0x7cc>)
 80014e8:	4611      	mov	r1, r2
 80014ea:	f000 ff57 	bl	800239c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80014ee:	2200      	movs	r2, #0
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80014f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f6:	2a13      	cmp	r2, #19
 80014f8:	d9fc      	bls.n	80014f4 <main+0x6d0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2101      	movs	r1, #1
 80014fe:	483c      	ldr	r0, [pc, #240]	; (80015f0 <main+0x7cc>)
 8001500:	f000 ff4c 	bl	800239c <HAL_GPIO_WritePin>
		  data_ready = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <main+0x7d4>)
 8001508:	7013      	strb	r3, [r2, #0]
 800150a:	e664      	b.n	80011d6 <main+0x3b2>
		  memcpy(file_name_buff,vcp_data,sizeof(vcp_data));
 800150c:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80015fc <main+0x7d8>
 8001510:	ae16      	add	r6, sp, #88	; 0x58
 8001512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001516:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001518:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800151c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	      memset(vcp_command,'0',sizeof(vcp_command));
 8001520:	2220      	movs	r2, #32
 8001522:	2130      	movs	r1, #48	; 0x30
 8001524:	4620      	mov	r0, r4
 8001526:	f007 fa43 	bl	80089b0 <memset>
 800152a:	e64b      	b.n	80011c4 <main+0x3a0>
		  sscanf(vcp_data,"%d-%d-%d-%d-%d-%d",&year,&month,&date,&hours, &mins,&sec);
 800152c:	ab0b      	add	r3, sp, #44	; 0x2c
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	ab0a      	add	r3, sp, #40	; 0x28
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	ab09      	add	r3, sp, #36	; 0x24
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	ab0c      	add	r3, sp, #48	; 0x30
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	aa11      	add	r2, sp, #68	; 0x44
 800153e:	ab0d      	add	r3, sp, #52	; 0x34
 8001540:	492f      	ldr	r1, [pc, #188]	; (8001600 <main+0x7dc>)
 8001542:	482e      	ldr	r0, [pc, #184]	; (80015fc <main+0x7d8>)
 8001544:	f007 fa5c 	bl	8008a00 <siscanf>
		  sTime.Hours = (uint8_t)hours;
 8001548:	9b09      	ldr	r3, [sp, #36]	; 0x24
		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800154a:	4632      	mov	r2, r6
		  sTime.Hours = (uint8_t)hours;
 800154c:	f88d 301c 	strb.w	r3, [sp, #28]
		  sTime.Minutes = (uint8_t)mins;
 8001550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001552:	a907      	add	r1, sp, #28
		  sTime.Minutes = (uint8_t)mins;
 8001554:	f88d 301d 	strb.w	r3, [sp, #29]
		  sTime.Seconds = (uint8_t)sec;
 8001558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800155a:	482a      	ldr	r0, [pc, #168]	; (8001604 <main+0x7e0>)
		  sTime.Seconds = (uint8_t)sec;
 800155c:	f88d 301e 	strb.w	r3, [sp, #30]
		  sDate.Date = (uint8_t)date;
 8001560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001562:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		  sDate.Month = (uint8_t)month;
 8001566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001568:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		  sDate.Year = (uint8_t)year;
 800156c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800156e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001572:	f002 fdad 	bl	80040d0 <HAL_RTC_SetTime>
		  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001576:	4632      	mov	r2, r6
 8001578:	a908      	add	r1, sp, #32
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <main+0x7e0>)
 800157c:	f002 fe44 	bl	8004208 <HAL_RTC_SetDate>
	        memset(vcp_command,'0',sizeof(vcp_command));
 8001580:	2220      	movs	r2, #32
 8001582:	2130      	movs	r1, #48	; 0x30
 8001584:	4620      	mov	r0, r4
 8001586:	f007 fa13 	bl	80089b0 <memset>
 800158a:	e61b      	b.n	80011c4 <main+0x3a0>
		  volatile int16_t AD_RES = 0;
 800158c:	f8ad 001a 	strh.w	r0, [sp, #26]
	        HAL_ADC_Start(&hadc2);
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <main+0x7e4>)
 8001592:	f000 fbd3 	bl	8001d3c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc2, 10);
 8001596:	210a      	movs	r1, #10
 8001598:	481b      	ldr	r0, [pc, #108]	; (8001608 <main+0x7e4>)
 800159a:	f000 fa3b 	bl	8001a14 <HAL_ADC_PollForConversion>
	        AD_RES = HAL_ADC_GetValue(&hadc2);
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <main+0x7e4>)
 80015a0:	f000 faea 	bl	8001b78 <HAL_ADC_GetValue>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	f8ad 301a 	strh.w	r3, [sp, #26]
	        sprintf(buffer,"%d\n",AD_RES);
 80015ac:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <main+0x7e8>)
 80015b2:	b212      	sxth	r2, r2
 80015b4:	a811      	add	r0, sp, #68	; 0x44
 80015b6:	f007 fa03 	bl	80089c0 <siprintf>
	        CDC_Transmit_FS(buffer, sizeof(buffer));
 80015ba:	2105      	movs	r1, #5
 80015bc:	a811      	add	r0, sp, #68	; 0x44
 80015be:	f006 fff1 	bl	80085a4 <CDC_Transmit_FS>
	        HAL_Delay(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fa14 	bl	80019f0 <HAL_Delay>
	        memset(vcp_command,'0',sizeof(vcp_command));
 80015c8:	2220      	movs	r2, #32
 80015ca:	2130      	movs	r1, #48	; 0x30
 80015cc:	4620      	mov	r0, r4
 80015ce:	f007 f9ef 	bl	80089b0 <memset>
 80015d2:	e5f7      	b.n	80011c4 <main+0x3a0>
		  	  sensor_data[DET_VALUE].channel_count = 0;
 80015d4:	f8d8 3000 	ldr.w	r3, [r8]
 80015d8:	f827 6023 	strh.w	r6, [r7, r3, lsl #2]
		  	  sensor_data[DET_VALUE].channel_count_ovf++;
 80015dc:	f8d8 2000 	ldr.w	r2, [r8]
 80015e0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80015e4:	7893      	ldrb	r3, [r2, #2]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	7093      	strb	r3, [r2, #2]
 80015ec:	e77a      	b.n	80014e4 <main+0x6c0>
 80015ee:	bf00      	nop
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	200006c0 	.word	0x200006c0
 80015f8:	20000220 	.word	0x20000220
 80015fc:	20002850 	.word	0x20002850
 8001600:	08009cf4 	.word	0x08009cf4
 8001604:	20000774 	.word	0x20000774
 8001608:	200006f0 	.word	0x200006f0
 800160c:	08009ce4 	.word	0x08009ce4

08001610 <Error_Handler>:
 8001610:	b672      	cpsid	i
  while (1)
 8001612:	e7fe      	b.n	8001612 <Error_Handler+0x2>

08001614 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_MspInit+0x3c>)
{
 8001616:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	f002 0201 	and.w	r2, r2, #1
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	684b      	ldr	r3, [r1, #4]
 8001640:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001648:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	b002      	add	sp, #8
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000

08001658 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	2300      	movs	r3, #0
{
 800165a:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 800165c:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_ADC_MspInit+0x9c>)
 800165e:	6802      	ldr	r2, [r0, #0]
{
 8001660:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 8001662:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001668:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800166c:	d004      	beq.n	8001678 <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_ADC_MspInit+0xa0>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d021      	beq.n	80016b8 <HAL_ADC_MspInit+0x60>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001674:	b009      	add	sp, #36	; 0x24
 8001676:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ONBRD_NTC_Pin|DET_INPUT_Pin;
 8001678:	2550      	movs	r5, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167a:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001680:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001684:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168c:	619a      	str	r2, [r3, #24]
 800168e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001692:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	619a      	str	r2, [r3, #24]
 80016a2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f000 fd66 	bl	8002180 <HAL_GPIO_Init>
}
 80016b4:	b009      	add	sp, #36	; 0x24
 80016b6:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ONBRD_NTC_Pin|EXT_NTC_Pin;
 80016b8:	2530      	movs	r5, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016bc:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80016c0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c8:	619a      	str	r2, [r3, #24]
 80016ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80016d2:	9202      	str	r2, [sp, #8]
 80016d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	f042 0204 	orr.w	r2, r2, #4
 80016dc:	619a      	str	r2, [r3, #24]
 80016de:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e0:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	9303      	str	r3, [sp, #12]
 80016ea:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f000 fd48 	bl	8002180 <HAL_GPIO_Init>
}
 80016f0:	b009      	add	sp, #36	; 0x24
 80016f2:	bd30      	pop	{r4, r5, pc}
 80016f4:	40012400 	.word	0x40012400
 80016f8:	40012800 	.word	0x40012800
 80016fc:	40010800 	.word	0x40010800

08001700 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	2300      	movs	r3, #0
{
 8001702:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_I2C_MspInit+0x5c>)
 8001706:	6801      	ldr	r1, [r0, #0]
{
 8001708:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 800170a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001710:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8001714:	d001      	beq.n	800171a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001716:	b007      	add	sp, #28
 8001718:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4c0f      	ldr	r4, [pc, #60]	; (8001760 <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	69a3      	ldr	r3, [r4, #24]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	61a3      	str	r3, [r4, #24]
 800172e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001730:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173e:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f000 fd1e 	bl	8002180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001744:	69e3      	ldr	r3, [r4, #28]
 8001746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174a:	61e3      	str	r3, [r4, #28]
 800174c:	69e3      	ldr	r3, [r4, #28]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b01      	ldr	r3, [sp, #4]
}
 8001756:	b007      	add	sp, #28
 8001758:	bd30      	pop	{r4, r5, pc}
 800175a:	bf00      	nop
 800175c:	40005800 	.word	0x40005800
 8001760:	40021000 	.word	0x40021000
 8001764:	40010c00 	.word	0x40010c00

08001768 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RTC_MspInit+0x34>)
 800176a:	6802      	ldr	r2, [r0, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d000      	beq.n	8001772 <HAL_RTC_MspInit+0xa>
 8001770:	4770      	bx	lr
{
 8001772:	b500      	push	{lr}
 8001774:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001776:	f001 fe67 	bl	8003448 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800177a:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 800177e:	4909      	ldr	r1, [pc, #36]	; (80017a4 <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001786:	61da      	str	r2, [r3, #28]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001792:	f8c1 043c 	str.w	r0, [r1, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001796:	b003      	add	sp, #12
 8001798:	f85d fb04 	ldr.w	pc, [sp], #4
 800179c:	40002800 	.word	0x40002800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42420000 	.word	0x42420000

080017a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_SPI_MspInit+0x78>)
 80017ae:	6802      	ldr	r2, [r0, #0]
{
 80017b0:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80017b2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80017b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 80017bc:	d001      	beq.n	80017c2 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017be:	b006      	add	sp, #24
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c2:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80017c4:	2628      	movs	r6, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80017cc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	f042 0208 	orr.w	r2, r2, #8
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	e9cd 6502 	strd	r6, r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f000 fcc1 	bl	8002180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fe:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <HAL_SPI_MspInit+0x7c>)
 8001802:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001804:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f000 fcb9 	bl	8002180 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_SPI_MspInit+0x80>)
 8001810:	6853      	ldr	r3, [r2, #4]
 8001812:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6053      	str	r3, [r2, #4]
}
 800181c:	b006      	add	sp, #24
 800181e:	bd70      	pop	{r4, r5, r6, pc}
 8001820:	40013000 	.word	0x40013000
 8001824:	40010c00 	.word	0x40010c00
 8001828:	40010000 	.word	0x40010000

0800182c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_TIM_Base_MspInit+0x28>)
 800182e:	6802      	ldr	r2, [r0, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d000      	beq.n	8001836 <HAL_TIM_Base_MspInit+0xa>
 8001834:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800183a:	699a      	ldr	r2, [r3, #24]
{
 800183c:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800184e:	b002      	add	sp, #8
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00

08001858 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler>
 800185a:	bf00      	nop

0800185c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <HardFault_Handler>
 800185e:	bf00      	nop

08001860 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler>
 8001862:	bf00      	nop

08001864 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <BusFault_Handler>
 8001866:	bf00      	nop

08001868 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler>
 800186a:	bf00      	nop

0800186c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <DebugMon_Handler>:
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <PendSV_Handler>:
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <SysTick_Handler+0x20>)
 800187a:	8813      	ldrh	r3, [r2, #0]
 800187c:	b10b      	cbz	r3, 8001882 <SysTick_Handler+0xa>
		Timer1--;
 800187e:	3b01      	subs	r3, #1
 8001880:	8013      	strh	r3, [r2, #0]
	if(Timer2 > 0)
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <SysTick_Handler+0x24>)
 8001884:	8813      	ldrh	r3, [r2, #0]
 8001886:	b10b      	cbz	r3, 800188c <SysTick_Handler+0x14>
		Timer2--;
 8001888:	3b01      	subs	r3, #1
 800188a:	8013      	strh	r3, [r2, #0]
	sys_tick_ms++;
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <SysTick_Handler+0x28>)
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 b89a 	b.w	80019cc <HAL_IncTick>
 8001898:	20000216 	.word	0x20000216
 800189c:	20000218 	.word	0x20000218
 80018a0:	2000282c 	.word	0x2000282c

080018a4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018a4:	4801      	ldr	r0, [pc, #4]	; (80018ac <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80018a6:	f000 bef3 	b.w	8002690 <HAL_PCD_IRQHandler>
 80018aa:	bf00      	nop
 80018ac:	20003580 	.word	0x20003580

080018b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DET_INPUT_Pin);
 80018b2:	2040      	movs	r0, #64	; 0x40
 80018b4:	f000 fd80 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(THRESHOLD_IRQ_Pin);
 80018b8:	2080      	movs	r0, #128	; 0x80
 80018ba:	f000 fd7d 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  HAL_GPIO_EXTI_IRQHandler(START_BTN_Pin);

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(START_BTN_Pin);
 80018c2:	2040      	movs	r0, #64	; 0x40
 80018c4:	f000 bd78 	b.w	80023b8 <HAL_GPIO_EXTI_IRQHandler>

080018c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	490d      	ldr	r1, [pc, #52]	; (8001900 <_sbrk+0x38>)
{
 80018ca:	4603      	mov	r3, r0
 80018cc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <_sbrk+0x3c>)
 80018d0:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80018d2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018d6:	b120      	cbz	r0, 80018e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d8:	4403      	add	r3, r0
 80018da:	4293      	cmp	r3, r2
 80018dc:	d807      	bhi.n	80018ee <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018de:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80018e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018e2:	4c0a      	ldr	r4, [pc, #40]	; (800190c <_sbrk+0x44>)
 80018e4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4403      	add	r3, r0
 80018e8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80018ea:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80018ec:	d9f7      	bls.n	80018de <_sbrk+0x16>
    errno = ENOMEM;
 80018ee:	f007 f835 	bl	800895c <__errno>
 80018f2:	220c      	movs	r2, #12
 80018f4:	4603      	mov	r3, r0
    return (void *)-1;
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	bf00      	nop
 8001900:	20002870 	.word	0x20002870
 8001904:	20005000 	.word	0x20005000
 8001908:	00000400 	.word	0x00000400
 800190c:	20003aa0 	.word	0x20003aa0

08001910 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193a:	f7ff ffe9 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f007 f813 	bl	8008968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001942:	f7ff fa6f 	bl	8000e24 <main>
  bx lr
 8001946:	4770      	bx	lr
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001950:	0800a4d0 	.word	0x0800a4d0
  ldr r2, =_sbss
 8001954:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001958:	20003a9c 	.word	0x20003a9c

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_InitTick+0x3c>)
{
 8001968:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196a:	7811      	ldrb	r1, [r2, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_InitTick+0x40>)
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	fbb2 f0f3 	udiv	r0, r2, r3
 8001978:	f000 fbea 	bl	8002150 <HAL_SYSTICK_Config>
 800197c:	b908      	cbnz	r0, 8001982 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	2d0f      	cmp	r5, #15
 8001980:	d901      	bls.n	8001986 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	4602      	mov	r2, r0
 800198a:	4629      	mov	r1, r5
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 fb92 	bl	80020b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_InitTick+0x44>)
 8001996:	4620      	mov	r0, r4
 8001998:	601d      	str	r5, [r3, #0]
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004
 80019a4:	2000000c 	.word	0x2000000c

080019a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x20>)
{
 80019aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	f000 fb6d 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f7ff ffd0 	bl	8001960 <HAL_InitTick>
  HAL_MspInit();
 80019c0:	f7ff fe28 	bl	8001614 <HAL_MspInit>
}
 80019c4:	2000      	movs	r0, #0
 80019c6:	bd08      	pop	{r3, pc}
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x10>)
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_IncTick+0x14>)
 80019d0:	6811      	ldr	r1, [r2, #0]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	440b      	add	r3, r1
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20002874 	.word	0x20002874
 80019e0:	20000008 	.word	0x20000008

080019e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <HAL_GetTick+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20002874 	.word	0x20002874

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff fff6 	bl	80019e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80019fa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80019fc:	d002      	beq.n	8001a04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_Delay+0x20>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	1b40      	subs	r0, r0, r5
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d3fa      	bcc.n	8001a04 <HAL_Delay+0x14>
  {
  }
}
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a18:	2500      	movs	r5, #0
{
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a1e:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a20:	f7ff ffe0 	bl	80019e4 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a24:	6833      	ldr	r3, [r6, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	05d7      	lsls	r7, r2, #23
 8001a2a:	d472      	bmi.n	8001b12 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4607      	mov	r7, r0
 8001a30:	05d5      	lsls	r5, r2, #23
 8001a32:	d403      	bmi.n	8001a3c <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a36:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001a3a:	d01e      	beq.n	8001a7a <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_ADC_PollForConversion+0x154>)
 8001a3e:	2002      	movs	r0, #2
 8001a40:	681d      	ldr	r5, [r3, #0]
 8001a42:	f002 f875 	bl	8003b30 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a46:	6833      	ldr	r3, [r6, #0]
 8001a48:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_ADC_PollForConversion+0x158>)
 8001a4a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a4c:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a50:	4211      	tst	r1, r2
 8001a52:	d125      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x8c>
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8001a5a:	4211      	tst	r1, r2
 8001a5c:	d120      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x8c>
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_ADC_PollForConversion+0x15c>)
 8001a62:	4211      	tst	r1, r2
 8001a64:	d17e      	bne.n	8001b64 <HAL_ADC_PollForConversion+0x150>
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8001a6c:	4211      	tst	r1, r2
 8001a6e:	bf14      	ite	ne
 8001a70:	2029      	movne	r0, #41	; 0x29
 8001a72:	2014      	moveq	r0, #20
 8001a74:	e01e      	b.n	8001ab4 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 8001a76:	1c60      	adds	r0, r4, #1
 8001a78:	d154      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	0791      	lsls	r1, r2, #30
 8001a7e:	d5fa      	bpl.n	8001a76 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a80:	f06f 0212 	mvn.w	r2, #18
 8001a84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a86:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8c:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a98:	d055      	beq.n	8001b46 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a9a:	2000      	movs	r0, #0
}
 8001a9c:	b003      	add	sp, #12
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_ADC_PollForConversion+0x15c>)
 8001aa4:	4211      	tst	r1, r2
 8001aa6:	d12a      	bne.n	8001afe <HAL_ADC_PollForConversion+0xea>
 8001aa8:	68d9      	ldr	r1, [r3, #12]
 8001aaa:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8001aae:	4211      	tst	r1, r2
 8001ab0:	d125      	bne.n	8001afe <HAL_ADC_PollForConversion+0xea>
 8001ab2:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ab4:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ab8:	9a01      	ldr	r2, [sp, #4]
 8001aba:	4295      	cmp	r5, r2
 8001abc:	d809      	bhi.n	8001ad2 <HAL_ADC_PollForConversion+0xbe>
 8001abe:	e7df      	b.n	8001a80 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ac0:	9b01      	ldr	r3, [sp, #4]
 8001ac2:	42ab      	cmp	r3, r5
 8001ac4:	d311      	bcc.n	8001aea <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	d237      	bcs.n	8001b42 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 8001ad2:	1c62      	adds	r2, r4, #1
 8001ad4:	d0f7      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d0f2      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0xac>
 8001ada:	f7ff ff83 	bl	80019e4 <HAL_GetTick>
 8001ade:	1bc0      	subs	r0, r0, r7
 8001ae0:	42a0      	cmp	r0, r4
 8001ae2:	d9f0      	bls.n	8001ac6 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ae4:	9b01      	ldr	r3, [sp, #4]
 8001ae6:	42ab      	cmp	r3, r5
 8001ae8:	d2ed      	bcs.n	8001ac6 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 8001aea:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8001aec:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8001af0:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8001afa:	b003      	add	sp, #12
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001afe:	6919      	ldr	r1, [r3, #16]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <HAL_ADC_PollForConversion+0x160>)
 8001b02:	4211      	tst	r1, r2
 8001b04:	d114      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x11c>
 8001b06:	68d9      	ldr	r1, [r3, #12]
 8001b08:	4211      	tst	r1, r2
 8001b0a:	bf14      	ite	ne
 8001b0c:	20fc      	movne	r0, #252	; 0xfc
 8001b0e:	2054      	moveq	r0, #84	; 0x54
 8001b10:	e7d0      	b.n	8001ab4 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b14:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001b16:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	f043 0320 	orr.w	r3, r3, #32
 8001b1e:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8001b20:	b003      	add	sp, #12
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b24:	b934      	cbnz	r4, 8001b34 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f012 0202 	ands.w	r2, r2, #2
 8001b2c:	d1a5      	bne.n	8001a7a <HAL_ADC_PollForConversion+0x66>
 8001b2e:	e7dd      	b.n	8001aec <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b30:	20fc      	movs	r0, #252	; 0xfc
 8001b32:	e7bf      	b.n	8001ab4 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b34:	f7ff ff56 	bl	80019e4 <HAL_GetTick>
 8001b38:	1bc3      	subs	r3, r0, r7
 8001b3a:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b3c:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b3e:	d99c      	bls.n	8001a7a <HAL_ADC_PollForConversion+0x66>
 8001b40:	e7f1      	b.n	8001b26 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	e79c      	b.n	8001a80 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b46:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1a6      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b52:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001b56:	04db      	lsls	r3, r3, #19
 8001b58:	d49f      	bmi.n	8001a9a <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b62:	e79b      	b.n	8001a9c <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b64:	2029      	movs	r0, #41	; 0x29
 8001b66:	e7a5      	b.n	8001ab4 <HAL_ADC_PollForConversion+0xa0>
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	24924924 	.word	0x24924924
 8001b70:	12492492 	.word	0x12492492
 8001b74:	00249249 	.word	0x00249249

08001b78 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001b80:	2300      	movs	r3, #0
{ 
 8001b82:	b530      	push	{r4, r5, lr}
 8001b84:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001b86:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b88:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d074      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0xfa>
 8001b90:	2301      	movs	r3, #1
 8001b92:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b96:	684b      	ldr	r3, [r1, #4]
 8001b98:	4602      	mov	r2, r0
 8001b9a:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b9c:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8001b9e:	d932      	bls.n	8001c06 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ba0:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ba2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001ba6:	d84e      	bhi.n	8001c46 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ba8:	f04f 0c1f 	mov.w	ip, #31
 8001bac:	6808      	ldr	r0, [r1, #0]
 8001bae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001bb0:	3b23      	subs	r3, #35	; 0x23
 8001bb2:	fa00 fe03 	lsl.w	lr, r0, r3
 8001bb6:	fa0c f303 	lsl.w	r3, ip, r3
 8001bba:	ea25 0303 	bic.w	r3, r5, r3
 8001bbe:	ea43 030e 	orr.w	r3, r3, lr
 8001bc2:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc4:	2809      	cmp	r0, #9
 8001bc6:	d930      	bls.n	8001c2a <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bc8:	f04f 0c07 	mov.w	ip, #7
 8001bcc:	688d      	ldr	r5, [r1, #8]
 8001bce:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001bd2:	68e3      	ldr	r3, [r4, #12]
 8001bd4:	391e      	subs	r1, #30
 8001bd6:	408d      	lsls	r5, r1
 8001bd8:	fa0c f101 	lsl.w	r1, ip, r1
 8001bdc:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be0:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001be4:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be6:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001be8:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bea:	d844      	bhi.n	8001c76 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_ADC_ConfigChannel+0x128>)
 8001bee:	429c      	cmp	r4, r3
 8001bf0:	d038      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001bf6:	f043 0320 	orr.w	r3, r3, #32
 8001bfa:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001c02:	b003      	add	sp, #12
 8001c04:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c06:	f04f 0c1f 	mov.w	ip, #31
 8001c0a:	6808      	ldr	r0, [r1, #0]
 8001c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c10:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001c12:	3b05      	subs	r3, #5
 8001c14:	fa00 fe03 	lsl.w	lr, r0, r3
 8001c18:	fa0c f303 	lsl.w	r3, ip, r3
 8001c1c:	ea25 0303 	bic.w	r3, r5, r3
 8001c20:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c24:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c26:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c28:	d8ce      	bhi.n	8001bc8 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c2a:	2507      	movs	r5, #7
 8001c2c:	6889      	ldr	r1, [r1, #8]
 8001c2e:	6923      	ldr	r3, [r4, #16]
 8001c30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001c34:	4081      	lsls	r1, r0
 8001c36:	fa05 f000 	lsl.w	r0, r5, r0
 8001c3a:	ea23 0300 	bic.w	r3, r3, r0
 8001c3e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c40:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c42:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c44:	e7da      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c46:	f04f 0c1f 	mov.w	ip, #31
 8001c4a:	6808      	ldr	r0, [r1, #0]
 8001c4c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001c4e:	3b41      	subs	r3, #65	; 0x41
 8001c50:	fa00 fe03 	lsl.w	lr, r0, r3
 8001c54:	fa0c f303 	lsl.w	r3, ip, r3
 8001c58:	ea25 0303 	bic.w	r3, r5, r3
 8001c5c:	ea43 030e 	orr.w	r3, r3, lr
 8001c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c62:	e7af      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c64:	68a3      	ldr	r3, [r4, #8]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	d405      	bmi.n	8001c76 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c6a:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c6c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c72:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c74:	d004      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c76:	2000      	movs	r0, #0
 8001c78:	e7c0      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8001c7a:	2002      	movs	r0, #2
}
 8001c7c:	b003      	add	sp, #12
 8001c7e:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_ADC_ConfigChannel+0x12c>)
 8001c82:	490b      	ldr	r1, [pc, #44]	; (8001cb0 <HAL_ADC_ConfigChannel+0x130>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fba1 1303 	umull	r1, r3, r1, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ed      	beq.n	8001c76 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x11a>
 8001ca6:	e7e6      	b.n	8001c76 <HAL_ADC_ConfigChannel+0xf6>
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001cb4:	2300      	movs	r3, #0
{
 8001cb6:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	6802      	ldr	r2, [r0, #0]
{
 8001cba:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001cbc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	07d9      	lsls	r1, r3, #31
 8001cc2:	d427      	bmi.n	8001d14 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <ADC_Enable+0x80>)
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	481b      	ldr	r0, [pc, #108]	; (8001d38 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8001ccc:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cce:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001cd2:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001cd8:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001cdc:	9b01      	ldr	r3, [sp, #4]
 8001cde:	b12b      	cbz	r3, 8001cec <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fe7a 	bl	80019e4 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001cf2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	07da      	lsls	r2, r3, #31
 8001cf8:	d40c      	bmi.n	8001d14 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cfa:	f7ff fe73 	bl	80019e4 <HAL_GetTick>
 8001cfe:	1b43      	subs	r3, r0, r5
 8001d00:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d02:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d04:	d903      	bls.n	8001d0e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	f012 0201 	ands.w	r2, r2, #1
 8001d0c:	d005      	beq.n	8001d1a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	07db      	lsls	r3, r3, #31
 8001d12:	d5f2      	bpl.n	8001cfa <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d14:	2000      	movs	r0, #0
}
 8001d16:	b003      	add	sp, #12
 8001d18:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8001d1a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001d1e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001d2e:	b003      	add	sp, #12
 8001d30:	bd30      	pop	{r4, r5, pc}
 8001d32:	bf00      	nop
 8001d34:	20000004 	.word	0x20000004
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001d3c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d038      	beq.n	8001db6 <HAL_ADC_Start+0x7a>
 8001d44:	2301      	movs	r3, #1
{
 8001d46:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001d48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	f7ff ffb1 	bl	8001cb4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001d52:	bb60      	cbnz	r0, 8001dae <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8001d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	4929      	ldr	r1, [pc, #164]	; (8001e00 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d66:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d6a:	d026      	beq.n	8001dba <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d72:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d74:	6853      	ldr	r3, [r2, #4]
 8001d76:	0559      	lsls	r1, r3, #21
 8001d78:	d42b      	bmi.n	8001dd2 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001d7c:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d82:	bf18      	it	ne
 8001d84:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001d86:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8a:	bf18      	it	ne
 8001d8c:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d92:	f06f 0302 	mvn.w	r3, #2
 8001d96:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d98:	6893      	ldr	r3, [r2, #8]
 8001d9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001da2:	d01d      	beq.n	8001de0 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001da4:	6893      	ldr	r3, [r2, #8]
 8001da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001daa:	6093      	str	r3, [r2, #8]
}
 8001dac:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8001dae:	2300      	movs	r3, #0
 8001db0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001db4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001db6:	2002      	movs	r0, #2
}
 8001db8:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_ADC_Start+0xc8>)
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001dc2:	d0d3      	beq.n	8001d6c <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001dc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001dca:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	055b      	lsls	r3, r3, #21
 8001dd0:	d5d3      	bpl.n	8001d7a <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dde:	e7cc      	b.n	8001d7a <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_ADC_Start+0xc4>)
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001de6:	6893      	ldr	r3, [r2, #8]
 8001de8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001dec:	6093      	str	r3, [r2, #8]
}
 8001dee:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001df0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001df4:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001df6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001dfa:	d1d3      	bne.n	8001da4 <HAL_ADC_Start+0x68>
 8001dfc:	e7f3      	b.n	8001de6 <HAL_ADC_Start+0xaa>
 8001dfe:	bf00      	nop
 8001e00:	40012800 	.word	0x40012800
 8001e04:	40012400 	.word	0x40012400

08001e08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e08:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e0a:	6803      	ldr	r3, [r0, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	07d4      	lsls	r4, r2, #31
 8001e10:	d401      	bmi.n	8001e16 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e12:	2000      	movs	r0, #0
}
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001e16:	4604      	mov	r4, r0
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001e20:	f7ff fde0 	bl	80019e4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e24:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001e26:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	07d9      	lsls	r1, r3, #31
 8001e2c:	d5f1      	bpl.n	8001e12 <ADC_ConversionStop_Disable+0xa>
 8001e2e:	e002      	b.n	8001e36 <ADC_ConversionStop_Disable+0x2e>
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	07db      	lsls	r3, r3, #31
 8001e34:	d5ed      	bpl.n	8001e12 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e36:	f7ff fdd5 	bl	80019e4 <HAL_GetTick>
 8001e3a:	1b43      	subs	r3, r0, r5
 8001e3c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e3e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e40:	d9f6      	bls.n	8001e30 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	07d2      	lsls	r2, r2, #31
 8001e46:	d5f3      	bpl.n	8001e30 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8001e48:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e54:	4303      	orrs	r3, r0
 8001e56:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001e58:	bd38      	pop	{r3, r4, r5, pc}
 8001e5a:	bf00      	nop

08001e5c <HAL_ADC_Init>:
  if(hadc == NULL)
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d06b      	beq.n	8001f38 <HAL_ADC_Init+0xdc>
{
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e64:	4604      	mov	r4, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04d      	beq.n	8001f06 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff ffcc 	bl	8001e08 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e72:	f013 0310 	ands.w	r3, r3, #16
 8001e76:	d140      	bne.n	8001efa <HAL_ADC_Init+0x9e>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d13e      	bne.n	8001efa <HAL_ADC_Init+0x9e>
    ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e7e:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001e80:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001e84:	f022 0202 	bic.w	r2, r2, #2
 8001e88:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e8c:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e90:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e92:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e94:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e96:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e9a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e9e:	d038      	beq.n	8001f12 <HAL_ADC_Init+0xb6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea0:	7d22      	ldrb	r2, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ea2:	2d01      	cmp	r5, #1
 8001ea4:	bf0c      	ite	eq
 8001ea6:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8001eaa:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eae:	2a01      	cmp	r2, #1
 8001eb0:	d04e      	beq.n	8001f50 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CR1,
 8001eb2:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001eb4:	4e37      	ldr	r6, [pc, #220]	; (8001f94 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001eb6:	6857      	ldr	r7, [r2, #4]
 8001eb8:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001ebc:	ea47 070c 	orr.w	r7, r7, ip
 8001ec0:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001ec2:	6897      	ldr	r7, [r2, #8]
 8001ec4:	403e      	ands	r6, r7
 8001ec6:	430e      	orrs	r6, r1
 8001ec8:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eca:	2d01      	cmp	r5, #1
 8001ecc:	d030      	beq.n	8001f30 <HAL_ADC_Init+0xd4>
    MODIFY_REG(hadc->Instance->SQR1,
 8001ece:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001ed0:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8001ed4:	ea4c 0303 	orr.w	r3, ip, r3
 8001ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eda:	6892      	ldr	r2, [r2, #8]
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_ADC_Init+0x13c>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	d02b      	beq.n	8001f3c <HAL_ADC_Init+0xe0>
      tmp_hal_status = HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ee8:	f023 0312 	bic.w	r3, r3, #18
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ef4:	4303      	orrs	r3, r0
 8001ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001f08:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001f0c:	f7ff fba4 	bl	8001658 <HAL_ADC_MspInit>
 8001f10:	e7ab      	b.n	8001e6a <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f12:	7d22      	ldrb	r2, [r4, #20]
 8001f14:	2a01      	cmp	r2, #1
 8001f16:	d01a      	beq.n	8001f4e <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CR1,
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	6853      	ldr	r3, [r2, #4]
 8001f1c:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001f26:	6895      	ldr	r5, [r2, #8]
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_ADC_Init+0x138>)
 8001f2a:	402b      	ands	r3, r5
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f30:	6923      	ldr	r3, [r4, #16]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	e7ca      	b.n	8001ece <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
}
 8001f3a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f4e:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f50:	b1ce      	cbz	r6, 8001f86 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8001f62:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001f64:	4e0b      	ldr	r6, [pc, #44]	; (8001f94 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001f66:	6857      	ldr	r7, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f68:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001f6c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001f70:	ea47 070c 	orr.w	r7, r7, ip
 8001f74:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001f76:	6897      	ldr	r7, [r2, #8]
 8001f78:	ea06 0607 	and.w	r6, r6, r7
 8001f7c:	ea46 0601 	orr.w	r6, r6, r1
 8001f80:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f82:	d1a2      	bne.n	8001eca <HAL_ADC_Init+0x6e>
 8001f84:	e7d4      	b.n	8001f30 <HAL_ADC_Init+0xd4>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f86:	69a2      	ldr	r2, [r4, #24]
 8001f88:	1e57      	subs	r7, r2, #1
 8001f8a:	ea4c 3747 	orr.w	r7, ip, r7, lsl #13
 8001f8e:	f447 6c00 	orr.w	ip, r7, #2048	; 0x800
 8001f92:	e7e6      	b.n	8001f62 <HAL_ADC_Init+0x106>
 8001f94:	ffe1f7fd 	.word	0xffe1f7fd
 8001f98:	ff1f0efe 	.word	0xff1f0efe

08001f9c <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f9c:	2300      	movs	r3, #0
{
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001fa2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d05f      	beq.n	800206c <HAL_ADCEx_Calibration_Start+0xd0>
 8001fac:	2301      	movs	r3, #1
 8001fae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	f7ff ff28 	bl	8001e08 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fb8:	4605      	mov	r5, r0
 8001fba:	b128      	cbz	r0, 8001fc8 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbc:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8001fbe:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8001fc0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd0:	f023 0302 	bic.w	r3, r3, #2
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fda:	2002      	movs	r0, #2
 8001fdc:	6816      	ldr	r6, [r2, #0]
 8001fde:	f001 fda7 	bl	8003b30 <HAL_RCCEx_GetPeriphCLKFreq>
 8001fe2:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001fe6:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8001fe8:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8001fea:	9b01      	ldr	r3, [sp, #4]
 8001fec:	b12b      	cbz	r3, 8001ffa <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8001fee:	9b01      	ldr	r3, [sp, #4]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fe5a 	bl	8001cb4 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	6893      	ldr	r3, [r2, #8]
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800200a:	f7ff fceb 	bl	80019e4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800200e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002010:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	0711      	lsls	r1, r2, #28
 8002016:	d50b      	bpl.n	8002030 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002018:	f7ff fce4 	bl	80019e4 <HAL_GetTick>
 800201c:	1b83      	subs	r3, r0, r6
 800201e:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002020:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002022:	d902      	bls.n	800202a <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	0712      	lsls	r2, r2, #28
 8002028:	d424      	bmi.n	8002074 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	0710      	lsls	r0, r2, #28
 800202e:	d4f3      	bmi.n	8002018 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	f042 0204 	orr.w	r2, r2, #4
 8002036:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002038:	f7ff fcd4 	bl	80019e4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800203c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800203e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0759      	lsls	r1, r3, #29
 8002044:	d50b      	bpl.n	800205e <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002046:	f7ff fccd 	bl	80019e4 <HAL_GetTick>
 800204a:	1b83      	subs	r3, r0, r6
 800204c:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800204e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002050:	d902      	bls.n	8002058 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	0752      	lsls	r2, r2, #29
 8002056:	d40d      	bmi.n	8002074 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	075b      	lsls	r3, r3, #29
 800205c:	d4f3      	bmi.n	8002046 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002060:	f023 0303 	bic.w	r3, r3, #3
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	62a3      	str	r3, [r4, #40]	; 0x28
 800206a:	e7a7      	b.n	8001fbc <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 800206c:	2502      	movs	r5, #2
}
 800206e:	4628      	mov	r0, r5
 8002070:	b002      	add	sp, #8
 8002072:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002074:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002076:	2200      	movs	r2, #0
}
 8002078:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 800207a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800207c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002080:	f023 0312 	bic.w	r3, r3, #18
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800208a:	b002      	add	sp, #8
 800208c:	bd70      	pop	{r4, r5, r6, pc}
 800208e:	bf00      	nop
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002094:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800209a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800209e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80020b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ba:	b500      	push	{lr}
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c2:	f1c3 0e07 	rsb	lr, r3, #7
 80020c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ce:	bf28      	it	cs
 80020d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d4:	f1bc 0f06 	cmp.w	ip, #6
 80020d8:	d91b      	bls.n	8002112 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020da:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	fa0c fc03 	lsl.w	ip, ip, r3
 80020e4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 3cff 	mov.w	ip, #4294967295
 80020ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80020f0:	ea21 010c 	bic.w	r1, r1, ip
 80020f4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80020f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80020fc:	db0c      	blt.n	8002118 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	0109      	lsls	r1, r1, #4
 8002100:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002104:	b2c9      	uxtb	r1, r1
 8002106:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800210a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800210e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002112:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002114:	4613      	mov	r3, r2
 8002116:	e7e7      	b.n	80020e8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_NVIC_SetPriority+0x78>)
 800211a:	f000 000f 	and.w	r0, r0, #15
 800211e:	0109      	lsls	r1, r1, #4
 8002120:	b2c9      	uxtb	r1, r1
 8002122:	4403      	add	r3, r0
 8002124:	7619      	strb	r1, [r3, #24]
 8002126:	f85d fb04 	ldr.w	pc, [sp], #4
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00
 8002130:	e000ecfc 	.word	0xe000ecfc

08002134 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002134:	2800      	cmp	r0, #0
 8002136:	db07      	blt.n	8002148 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002138:	2301      	movs	r3, #1
 800213a:	f000 011f 	and.w	r1, r0, #31
 800213e:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_NVIC_EnableIRQ+0x18>)
 8002140:	0940      	lsrs	r0, r0, #5
 8002142:	408b      	lsls	r3, r1
 8002144:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	3801      	subs	r0, #1
 8002152:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002156:	d20f      	bcs.n	8002178 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002158:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002164:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	4c05      	ldr	r4, [pc, #20]	; (800217c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002168:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002172:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002174:	6119      	str	r1, [r3, #16]
 8002176:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002178:	2001      	movs	r0, #1
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	680e      	ldr	r6, [r1, #0]
{
 8002186:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	2e00      	cmp	r6, #0
 800218a:	f000 80b5 	beq.w	80022f8 <HAL_GPIO_Init+0x178>
 800218e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002190:	4f7a      	ldr	r7, [pc, #488]	; (800237c <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8002192:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002194:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002196:	4d7a      	ldr	r5, [pc, #488]	; (8002380 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002198:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002384 <HAL_GPIO_Init+0x204>
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800219e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a0:	fa36 f403 	lsrs.w	r4, r6, r3
 80021a4:	f102 0204 	add.w	r2, r2, #4
 80021a8:	f000 80a6 	beq.w	80022f8 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 80021ac:	2401      	movs	r4, #1
 80021ae:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80021b0:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b4:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80021b8:	d1f1      	bne.n	800219e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80021ba:	684e      	ldr	r6, [r1, #4]
 80021bc:	2e12      	cmp	r6, #18
 80021be:	f200 809e 	bhi.w	80022fe <HAL_GPIO_Init+0x17e>
 80021c2:	2e12      	cmp	r6, #18
 80021c4:	d81a      	bhi.n	80021fc <HAL_GPIO_Init+0x7c>
 80021c6:	e8df f006 	tbb	[pc, r6]
 80021ca:	b9a7      	.short	0xb9a7
 80021cc:	1919ceb5 	.word	0x1919ceb5
 80021d0:	19191919 	.word	0x19191919
 80021d4:	19191919 	.word	0x19191919
 80021d8:	b1191919 	.word	0xb1191919
 80021dc:	bc          	.byte	0xbc
 80021dd:	00          	.byte	0x00
 80021de:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002388 <HAL_GPIO_Init+0x208>
 80021e2:	4576      	cmp	r6, lr
 80021e4:	f000 8098 	beq.w	8002318 <HAL_GPIO_Init+0x198>
 80021e8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80021ec:	4576      	cmp	r6, lr
 80021ee:	f000 8093 	beq.w	8002318 <HAL_GPIO_Init+0x198>
 80021f2:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80021f6:	4576      	cmp	r6, lr
 80021f8:	f000 808e 	beq.w	8002318 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021fc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002200:	bf9c      	itt	ls
 8002202:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002204:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002206:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800220a:	bf84      	itt	hi
 800220c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002210:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002214:	f8de 4000 	ldr.w	r4, [lr]
 8002218:	fa0a f90b 	lsl.w	r9, sl, fp
 800221c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002220:	ea24 040b 	bic.w	r4, r4, fp
 8002224:	ea44 0409 	orr.w	r4, r4, r9
 8002228:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222c:	684c      	ldr	r4, [r1, #4]
 800222e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002232:	d079      	beq.n	8002328 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002234:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002238:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800223c:	f04e 0e01 	orr.w	lr, lr, #1
 8002240:	f8c7 e018 	str.w	lr, [r7, #24]
 8002244:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002248:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800224c:	f00e 0e01 	and.w	lr, lr, #1
 8002250:	f8cd e004 	str.w	lr, [sp, #4]
 8002254:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002258:	f023 0e03 	bic.w	lr, r3, #3
 800225c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002260:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002264:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002268:	fa06 f609 	lsl.w	r6, r6, r9
 800226c:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002270:	f8df b118 	ldr.w	fp, [pc, #280]	; 800238c <HAL_GPIO_Init+0x20c>
 8002274:	4558      	cmp	r0, fp
 8002276:	d013      	beq.n	80022a0 <HAL_GPIO_Init+0x120>
 8002278:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800227c:	4558      	cmp	r0, fp
 800227e:	d06b      	beq.n	8002358 <HAL_GPIO_Init+0x1d8>
 8002280:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002390 <HAL_GPIO_Init+0x210>
 8002284:	4558      	cmp	r0, fp
 8002286:	d060      	beq.n	800234a <HAL_GPIO_Init+0x1ca>
 8002288:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002394 <HAL_GPIO_Init+0x214>
 800228c:	4558      	cmp	r0, fp
 800228e:	bf0c      	ite	eq
 8002290:	f04f 0b03 	moveq.w	fp, #3
 8002294:	f04f 0b04 	movne.w	fp, #4
 8002298:	fa0b f909 	lsl.w	r9, fp, r9
 800229c:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80022a0:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80022a4:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80022aa:	bf14      	ite	ne
 80022ac:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b0:	ea26 060c 	biceq.w	r6, r6, ip
 80022b4:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80022b6:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80022bc:	bf14      	ite	ne
 80022be:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c2:	ea26 060c 	biceq.w	r6, r6, ip
 80022c6:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c8:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ca:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ce:	bf14      	ite	ne
 80022d0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d4:	ea26 060c 	biceq.w	r6, r6, ip
 80022d8:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022da:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80022de:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	d01f      	beq.n	8002322 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e2:	ea44 040c 	orr.w	r4, r4, ip
 80022e6:	60ec      	str	r4, [r5, #12]
 80022e8:	680e      	ldr	r6, [r1, #0]
	position++;
 80022ea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	fa36 f403 	lsrs.w	r4, r6, r3
 80022f0:	f102 0204 	add.w	r2, r2, #4
 80022f4:	f47f af5a 	bne.w	80021ac <HAL_GPIO_Init+0x2c>
  }
}
 80022f8:	b003      	add	sp, #12
 80022fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80022fe:	4546      	cmp	r6, r8
 8002300:	d00a      	beq.n	8002318 <HAL_GPIO_Init+0x198>
 8002302:	f67f af6c 	bls.w	80021de <HAL_GPIO_Init+0x5e>
 8002306:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002398 <HAL_GPIO_Init+0x218>
 800230a:	4576      	cmp	r6, lr
 800230c:	d004      	beq.n	8002318 <HAL_GPIO_Init+0x198>
 800230e:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002312:	4576      	cmp	r6, lr
 8002314:	f47f af72 	bne.w	80021fc <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002318:	688e      	ldr	r6, [r1, #8]
 800231a:	bb3e      	cbnz	r6, 800236c <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800231c:	f04f 0a04 	mov.w	sl, #4
 8002320:	e76c      	b.n	80021fc <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002322:	ea24 040c 	bic.w	r4, r4, ip
 8002326:	60ec      	str	r4, [r5, #12]
 8002328:	680e      	ldr	r6, [r1, #0]
 800232a:	e738      	b.n	800219e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800232c:	68cc      	ldr	r4, [r1, #12]
 800232e:	f104 0a04 	add.w	sl, r4, #4
          break;
 8002332:	e763      	b.n	80021fc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002334:	68cc      	ldr	r4, [r1, #12]
 8002336:	f104 0a08 	add.w	sl, r4, #8
          break;
 800233a:	e75f      	b.n	80021fc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800233c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002340:	e75c      	b.n	80021fc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002342:	68cc      	ldr	r4, [r1, #12]
 8002344:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002348:	e758      	b.n	80021fc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800234a:	f04f 0b02 	mov.w	fp, #2
 800234e:	fa0b f909 	lsl.w	r9, fp, r9
 8002352:	ea46 0609 	orr.w	r6, r6, r9
 8002356:	e7a3      	b.n	80022a0 <HAL_GPIO_Init+0x120>
 8002358:	f04f 0b01 	mov.w	fp, #1
 800235c:	fa0b f909 	lsl.w	r9, fp, r9
 8002360:	ea46 0609 	orr.w	r6, r6, r9
 8002364:	e79c      	b.n	80022a0 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8002366:	f04f 0a00 	mov.w	sl, #0
 800236a:	e747      	b.n	80021fc <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800236c:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236e:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002372:	bf0c      	ite	eq
 8002374:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002376:	6144      	strne	r4, [r0, #20]
 8002378:	e740      	b.n	80021fc <HAL_GPIO_Init+0x7c>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40010400 	.word	0x40010400
 8002384:	10220000 	.word	0x10220000
 8002388:	10120000 	.word	0x10120000
 800238c:	40010800 	.word	0x40010800
 8002390:	40011000 	.word	0x40011000
 8002394:	40011400 	.word	0x40011400
 8002398:	10310000 	.word	0x10310000

0800239c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239c:	b902      	cbnz	r2, 80023a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239e:	0409      	lsls	r1, r1, #16
 80023a0:	6101      	str	r1, [r0, #16]
  }
}
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023a4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a6:	ea01 0203 	and.w	r2, r1, r3
 80023aa:	ea21 0103 	bic.w	r1, r1, r3
 80023ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80023b2:	6101      	str	r1, [r0, #16]
}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80023ba:	6951      	ldr	r1, [r2, #20]
 80023bc:	4201      	tst	r1, r0
 80023be:	d100      	bne.n	80023c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80023c0:	4770      	bx	lr
{
 80023c2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c6:	f7fe fccb 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ca:	bd08      	pop	{r3, pc}
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f000 80b9 	beq.w	8002548 <HAL_I2C_Init+0x178>
{
 80023d6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023dc:	4604      	mov	r4, r0
 80023de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8098 	beq.w	8002518 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ea:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002408:	f001 faf0 	bl	80039ec <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	494f      	ldr	r1, [pc, #316]	; (800254c <HAL_I2C_Init+0x17c>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d84f      	bhi.n	80024b4 <HAL_I2C_Init+0xe4>
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_I2C_Init+0x180>)
 8002416:	4290      	cmp	r0, r2
 8002418:	d97c      	bls.n	8002514 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800241a:	4d4e      	ldr	r5, [pc, #312]	; (8002554 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800241c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800241e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002422:	1e43      	subs	r3, r0, #1
 8002424:	fbb3 f3f2 	udiv	r3, r3, r2
 8002428:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002430:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002432:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002436:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800243a:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800243e:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002440:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002442:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002444:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002448:	ea41 010c 	orr.w	r1, r1, ip
 800244c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800244e:	69d1      	ldr	r1, [r2, #28]
 8002450:	ea13 0f0e 	tst.w	r3, lr
 8002454:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002458:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800245c:	d161      	bne.n	8002522 <HAL_I2C_Init+0x152>
 800245e:	2304      	movs	r3, #4
 8002460:	430b      	orrs	r3, r1
 8002462:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800246a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800246e:	4303      	orrs	r3, r0
 8002470:	430b      	orrs	r3, r1
 8002472:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002474:	6891      	ldr	r1, [r2, #8]
 8002476:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800247a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800247e:	4303      	orrs	r3, r0
 8002480:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002484:	430b      	orrs	r3, r1
 8002486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002488:	68d0      	ldr	r0, [r2, #12]
 800248a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800248e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002492:	430b      	orrs	r3, r1
 8002494:	4303      	orrs	r3, r0
 8002496:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024aa:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 80024b0:	4608      	mov	r0, r1
}
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_I2C_Init+0x188>)
 80024b6:	4290      	cmp	r0, r2
 80024b8:	d92c      	bls.n	8002514 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80024ba:	4d26      	ldr	r5, [pc, #152]	; (8002554 <HAL_I2C_Init+0x184>)
 80024bc:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80024c4:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c8:	fb02 f101 	mul.w	r1, r2, r1
 80024cc:	4d23      	ldr	r5, [pc, #140]	; (800255c <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ce:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d0:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d4:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d6:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80024dc:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80024e0:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e2:	6a15      	ldr	r5, [r2, #32]
 80024e4:	3101      	adds	r1, #1
 80024e6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80024ea:	4329      	orrs	r1, r5
 80024ec:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ee:	69d1      	ldr	r1, [r2, #28]
 80024f0:	68a5      	ldr	r5, [r4, #8]
 80024f2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80024f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024fa:	b9ad      	cbnz	r5, 8002528 <HAL_I2C_Init+0x158>
 80024fc:	3801      	subs	r0, #1
 80024fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	b1d3      	cbz	r3, 8002544 <HAL_I2C_Init+0x174>
 800250e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002512:	e7a5      	b.n	8002460 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
}
 8002516:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002518:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800251c:	f7ff f8f0 	bl	8001700 <HAL_I2C_MspInit>
 8002520:	e762      	b.n	80023e8 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	e79b      	b.n	8002460 <HAL_I2C_Init+0x90>
 8002528:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800252c:	3801      	subs	r0, #1
 800252e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	b113      	cbz	r3, 8002544 <HAL_I2C_Init+0x174>
 800253e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002542:	e78d      	b.n	8002460 <HAL_I2C_Init+0x90>
 8002544:	2301      	movs	r3, #1
 8002546:	e78b      	b.n	8002460 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	4770      	bx	lr
 800254c:	000186a0 	.word	0x000186a0
 8002550:	001e847f 	.word	0x001e847f
 8002554:	431bde83 	.word	0x431bde83
 8002558:	003d08ff 	.word	0x003d08ff
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002564:	2800      	cmp	r0, #0
 8002566:	d074      	beq.n	8002652 <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002568:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800256c:	4605      	mov	r5, r0
 800256e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002572:	2b00      	cmp	r3, #0
 8002574:	d068      	beq.n	8002648 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002576:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002578:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 800257a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800257e:	6828      	ldr	r0, [r5, #0]
 8002580:	f002 fb5a 	bl	8004c38 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002584:	f856 eb10 	ldr.w	lr, [r6], #16
 8002588:	466c      	mov	r4, sp
 800258a:	46b4      	mov	ip, r6
 800258c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002592:	f8dc 3000 	ldr.w	r3, [ip]
 8002596:	1d2f      	adds	r7, r5, #4
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	4670      	mov	r0, lr
 800259c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80025a0:	f002 fb38 	bl	8004c14 <USB_CoreInit>
 80025a4:	4604      	mov	r4, r0
 80025a6:	b130      	cbz	r0, 80025b6 <HAL_PCD_Init+0x56>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80025a8:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025aa:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80025ac:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ae:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 80025b2:	b007      	add	sp, #28
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025b6:	4601      	mov	r1, r0
 80025b8:	6828      	ldr	r0, [r5, #0]
 80025ba:	f002 fb47 	bl	8004c4c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	6868      	ldr	r0, [r5, #4]
 80025c0:	b350      	cbz	r0, 8002618 <HAL_PCD_Init+0xb8>
 80025c2:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80025c4:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c8:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80025ca:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80025ce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d2:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80025d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025da:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025dc:	fa5f f28c 	uxtb.w	r2, ip
 80025e0:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025e2:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80025e6:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ea:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ee:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f0:	d3eb      	bcc.n	80025ca <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 80025f2:	2200      	movs	r2, #0
 80025f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80025f8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80025fe:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	b2cc      	uxtb	r4, r1
 8002604:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002606:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800260a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800260e:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002612:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002616:	d3ed      	bcc.n	80025f4 <HAL_PCD_Init+0x94>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002618:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800261a:	466c      	mov	r4, sp
 800261c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261e:	6833      	ldr	r3, [r6, #0]
 8002620:	6828      	ldr	r0, [r5, #0]
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002628:	f002 fb12 	bl	8004c50 <USB_DevInit>
 800262c:	4604      	mov	r4, r0
 800262e:	2800      	cmp	r0, #0
 8002630:	d1ba      	bne.n	80025a8 <HAL_PCD_Init+0x48>
  hpcd->State = HAL_PCD_STATE_READY;
 8002632:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002634:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8002638:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800263a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800263e:	f003 f8f5 	bl	800582c <USB_DevDisconnect>
}
 8002642:	4620      	mov	r0, r4
 8002644:	b007      	add	sp, #28
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002648:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800264c:	f006 f84a 	bl	80086e4 <HAL_PCD_MspInit>
 8002650:	e791      	b.n	8002576 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8002652:	2401      	movs	r4, #1
}
 8002654:	4620      	mov	r0, r4
 8002656:	b007      	add	sp, #28
 8002658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800265c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800265e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002662:	2b01      	cmp	r3, #1
 8002664:	d012      	beq.n	800268c <HAL_PCD_Start+0x30>
 8002666:	4604      	mov	r4, r0
 8002668:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 800266a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800266c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002670:	f002 fad8 	bl	8004c24 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002674:	4629      	mov	r1, r5
 8002676:	4620      	mov	r0, r4
 8002678:	f006 f96e 	bl	8008958 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	f003 f8d3 	bl	8005828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002682:	2300      	movs	r3, #0
 8002684:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8002688:	4618      	mov	r0, r3
}
 800268a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800268c:	2002      	movs	r0, #2
}
 800268e:	bd38      	pop	{r3, r4, r5, pc}

08002690 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002694:	4604      	mov	r4, r0
 8002696:	b085      	sub	sp, #20
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002698:	6800      	ldr	r0, [r0, #0]
 800269a:	f003 f8c9 	bl	8005830 <USB_ReadInterrupts>
 800269e:	0403      	lsls	r3, r0, #16
 80026a0:	f100 808c 	bmi.w	80027bc <HAL_PCD_IRQHandler+0x12c>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	f003 f8c3 	bl	8005830 <USB_ReadInterrupts>
 80026aa:	0542      	lsls	r2, r0, #21
 80026ac:	f100 80af 	bmi.w	800280e <HAL_PCD_IRQHandler+0x17e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026b0:	6820      	ldr	r0, [r4, #0]
 80026b2:	f003 f8bd 	bl	8005830 <USB_ReadInterrupts>
 80026b6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026ba:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026bc:	d007      	beq.n	80026ce <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80026c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026ce:	f003 f8af 	bl	8005830 <USB_ReadInterrupts>
 80026d2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026d6:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026d8:	d007      	beq.n	80026ea <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80026de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026ea:	f003 f8a1 	bl	8005830 <USB_ReadInterrupts>
 80026ee:	04c3      	lsls	r3, r0, #19
 80026f0:	f100 8253 	bmi.w	8002b9a <HAL_PCD_IRQHandler+0x50a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	f003 f89b 	bl	8005830 <USB_ReadInterrupts>
 80026fa:	0507      	lsls	r7, r0, #20
 80026fc:	d547      	bpl.n	800278e <HAL_PCD_IRQHandler+0xfe>
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80026fe:	6821      	ldr	r1, [r4, #0]
 8002700:	f1ad 0302 	sub.w	r3, sp, #2
 8002704:	460d      	mov	r5, r1
 8002706:	461a      	mov	r2, r3
 8002708:	460e      	mov	r6, r1
 800270a:	f10d 000e 	add.w	r0, sp, #14
 800270e:	f836 7b04 	ldrh.w	r7, [r6], #4
 8002712:	f822 7f02 	strh.w	r7, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 8002716:	4290      	cmp	r0, r2
 8002718:	d1f9      	bne.n	800270e <HAL_PCD_IRQHandler+0x7e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800271a:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800271e:	b292      	uxth	r2, r2
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002728:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	0412      	lsls	r2, r2, #16
 8002732:	0c12      	lsrs	r2, r2, #16
 8002734:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002738:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 800273c:	0556      	lsls	r6, r2, #21
 800273e:	d5fb      	bpl.n	8002738 <HAL_PCD_IRQHandler+0xa8>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002740:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	0412      	lsls	r2, r2, #16
 800274a:	0c12      	lsrs	r2, r2, #16
 800274c:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002750:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8002754:	4298      	cmp	r0, r3
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002756:	f825 2b04 	strh.w	r2, [r5], #4
    for (i = 0U; i < 8U; i++)
 800275a:	d1f9      	bne.n	8002750 <HAL_PCD_IRQHandler+0xc0>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800275c:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002760:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002762:	b29b      	uxth	r3, r3
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800276c:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8002770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800277c:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8002780:	b29b      	uxth	r3, r3
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800278a:	f005 fffd 	bl	8008788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f003 f84e 	bl	8005830 <USB_ReadInterrupts>
 8002794:	0582      	lsls	r2, r0, #22
 8002796:	f100 81f3 	bmi.w	8002b80 <HAL_PCD_IRQHandler+0x4f0>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	f003 f848 	bl	8005830 <USB_ReadInterrupts>
 80027a0:	05c3      	lsls	r3, r0, #23
 80027a2:	d508      	bpl.n	80027b6 <HAL_PCD_IRQHandler+0x126>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80027aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80027b6:	b005      	add	sp, #20
 80027b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80027c2:	4610      	mov	r0, r2
 80027c4:	041f      	lsls	r7, r3, #16
 80027c6:	f57f af6e 	bpl.w	80026a6 <HAL_PCD_IRQHandler+0x16>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027ca:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8002acc <HAL_PCD_IRQHandler+0x43c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027ce:	f8df a300 	ldr.w	sl, [pc, #768]	; 8002ad0 <HAL_PCD_IRQHandler+0x440>
    wIstr = hpcd->Instance->ISTR;
 80027d2:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80027d6:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80027d8:	f015 050f 	ands.w	r5, r5, #15
 80027dc:	f040 8087 	bne.w	80028ee <HAL_PCD_IRQHandler+0x25e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027e0:	f011 0110 	ands.w	r1, r1, #16
 80027e4:	f000 819f 	beq.w	8002b26 <HAL_PCD_IRQHandler+0x496>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027e8:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027ea:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027ee:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027f0:	f040 81f1 	bne.w	8002bd6 <HAL_PCD_IRQHandler+0x546>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027f4:	041e      	lsls	r6, r3, #16
 80027f6:	d428      	bmi.n	800284a <HAL_PCD_IRQHandler+0x1ba>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80027fe:	0419      	lsls	r1, r3, #16
 8002800:	d4e7      	bmi.n	80027d2 <HAL_PCD_IRQHandler+0x142>
 8002802:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002804:	f003 f814 	bl	8005830 <USB_ReadInterrupts>
 8002808:	0542      	lsls	r2, r0, #21
 800280a:	f57f af51 	bpl.w	80026b0 <HAL_PCD_IRQHandler+0x20>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800280e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002810:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002812:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002822:	f005 ff9f 	bl	8008764 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8002826:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800282a:	2b01      	cmp	r3, #1
 800282c:	f43f af40 	beq.w	80026b0 <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 8002830:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8002832:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002834:	4629      	mov	r1, r5
 8002836:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002838:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800283c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002840:	f002 ffec 	bl	800581c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002844:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8002848:	e732      	b.n	80026b0 <HAL_PCD_IRQHandler+0x20>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800284a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800284e:	8802      	ldrh	r2, [r0, #0]
 8002850:	4013      	ands	r3, r2
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002858:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800285c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002860:	b29b      	uxth	r3, r3
 8002862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002866:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800286a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002876:	b193      	cbz	r3, 800289e <HAL_PCD_IRQHandler+0x20e>
 8002878:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800287c:	b179      	cbz	r1, 800289e <HAL_PCD_IRQHandler+0x20e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800287e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002882:	f002 ffeb 	bl	800585c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800288a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800288e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002890:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002892:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002894:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002898:	f005 ff4c 	bl	8008734 <HAL_PCD_DataOutStageCallback>
 800289c:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800289e:	8803      	ldrh	r3, [r0, #0]
 80028a0:	4602      	mov	r2, r0
 80028a2:	051d      	lsls	r5, r3, #20
 80028a4:	d4a9      	bmi.n	80027fa <HAL_PCD_IRQHandler+0x16a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028a6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80028aa:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 80028b4:	2900      	cmp	r1, #0
 80028b6:	f040 8282 	bne.w	8002dbe <HAL_PCD_IRQHandler+0x72e>
 80028ba:	5ae9      	ldrh	r1, [r5, r3]
 80028bc:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80028c0:	0409      	lsls	r1, r1, #16
 80028c2:	0c09      	lsrs	r1, r1, #16
 80028c4:	52e9      	strh	r1, [r5, r3]
 80028c6:	5ae9      	ldrh	r1, [r5, r3]
 80028c8:	b289      	uxth	r1, r1
 80028ca:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80028ce:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028d0:	8803      	ldrh	r3, [r0, #0]
 80028d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80028e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ea:	8003      	strh	r3, [r0, #0]
 80028ec:	e785      	b.n	80027fa <HAL_PCD_IRQHandler+0x16a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028ee:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80028f2:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028f4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028f6:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028fa:	f100 80a3 	bmi.w	8002a44 <HAL_PCD_IRQHandler+0x3b4>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028fe:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002902:	f43f af79 	beq.w	80027f8 <HAL_PCD_IRQHandler+0x168>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002906:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800290a:	1977      	adds	r7, r6, r5
 800290c:	b29b      	uxth	r3, r3
 800290e:	ea03 0309 	and.w	r3, r3, r9
 8002912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002916:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800291a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800291e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002922:	4602      	mov	r2, r0
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002924:	2b03      	cmp	r3, #3
 8002926:	f000 80d5 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x444>
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80d2 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x444>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d103      	bne.n	800293c <HAL_PCD_IRQHandler+0x2ac>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002934:	f418 7f80 	tst.w	r8, #256	; 0x100
 8002938:	f000 80cc 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x444>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800293c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002940:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002944:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002946:	f000 81c5 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x644>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800294e:	3302      	adds	r3, #2
 8002950:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002954:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len > TxByteNbre)
 8002958:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8002960:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002964:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002968:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 800296c:	459e      	cmp	lr, r3
 800296e:	f240 82c1 	bls.w	8002ef4 <HAL_PCD_IRQHandler+0x864>
      ep->xfer_len -= TxByteNbre;
 8002972:	ebae 0e03 	sub.w	lr, lr, r3
 8002976:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800297a:	f1be 0f00 	cmp.w	lr, #0
 800297e:	f000 82bc 	beq.w	8002efa <HAL_PCD_IRQHandler+0x86a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002982:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8002986:	d00f      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x318>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002988:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 800298c:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8002990:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8002994:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002998:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800299c:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 80029a0:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80029a4:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80029a8:	eb06 0e05 	add.w	lr, r6, r5
 80029ac:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80029b0:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 80029b4:	f1bc 0f01 	cmp.w	ip, #1
 80029b8:	f040 828c 	bne.w	8002ed4 <HAL_PCD_IRQHandler+0x844>
        ep->xfer_buff += TxByteNbre;
 80029bc:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80029c0:	f8de 8048 	ldr.w	r8, [lr, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 80029c4:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 80029c8:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80029cc:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80029d0:	441a      	add	r2, r3
 80029d2:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80029d6:	f8de 2038 	ldr.w	r2, [lr, #56]	; 0x38
 80029da:	4590      	cmp	r8, r2
 80029dc:	f0c0 835c 	bcc.w	8003098 <HAL_PCD_IRQHandler+0xa08>
          ep->xfer_len_db -= len;
 80029e0:	eba8 0302 	sub.w	r3, r8, r2
 80029e4:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e8:	b293      	uxth	r3, r2
 80029ea:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80029ee:	f1be 0f00 	cmp.w	lr, #0
 80029f2:	f040 8343 	bne.w	800307c <HAL_PCD_IRQHandler+0x9ec>
 80029f6:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 80029fa:	f200 4804 	addw	r8, r0, #1028	; 0x404
 80029fe:	fa1f fe8e 	uxth.w	lr, lr
 8002a02:	44c6      	add	lr, r8
 8002a04:	ea4f 1801 	mov.w	r8, r1, lsl #4
 8002a08:	eb0e 1101 	add.w	r1, lr, r1, lsl #4
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	f040 8375 	bne.w	80030fc <HAL_PCD_IRQHandler+0xa6c>
 8002a12:	f83e 2008 	ldrh.w	r2, [lr, r8]
 8002a16:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a1a:	0412      	lsls	r2, r2, #16
 8002a1c:	0c12      	lsrs	r2, r2, #16
 8002a1e:	f82e 2008 	strh.w	r2, [lr, r8]
 8002a22:	f83e 2008 	ldrh.w	r2, [lr, r8]
 8002a26:	b292      	uxth	r2, r2
 8002a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2c:	f82e 2008 	strh.w	r2, [lr, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a30:	1972      	adds	r2, r6, r5
 8002a32:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002a36:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002a38:	4661      	mov	r1, ip
 8002a3a:	f002 feff 	bl	800583c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	4602      	mov	r2, r0
 8002a42:	e247      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x844>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a48:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002a4c:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a4e:	4013      	ands	r3, r2
 8002a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a54:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002a58:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002a5c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80db 	bne.w	8002c1c <HAL_PCD_IRQHandler+0x58c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a6a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3306      	adds	r3, #6
 8002a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a7a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002a82:	461f      	mov	r7, r3
          if (count != 0U)
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8116 	bne.w	8002cb6 <HAL_PCD_IRQHandler+0x626>
        ep->xfer_count += count;
 8002a8a:	1971      	adds	r1, r6, r5
 8002a8c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8002a90:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002a94:	00c9      	lsls	r1, r1, #3
 8002a96:	443a      	add	r2, r7
 8002a98:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002a9c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002aa0:	443a      	add	r2, r7
 8002aa2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002aa6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002aaa:	b122      	cbz	r2, 8002ab6 <HAL_PCD_IRQHandler+0x426>
 8002aac:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002ab0:	42bb      	cmp	r3, r7
 8002ab2:	f240 8107 	bls.w	8002cc4 <HAL_PCD_IRQHandler+0x634>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ab6:	1973      	adds	r3, r6, r5
 8002ab8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002ac2:	f005 fe37 	bl	8008734 <HAL_PCD_DataOutStageCallback>
 8002ac6:	6820      	ldr	r0, [r4, #0]
 8002ac8:	e719      	b.n	80028fe <HAL_PCD_IRQHandler+0x26e>
 8002aca:	bf00      	nop
 8002acc:	ffff8f0f 	.word	0xffff8f0f
 8002ad0:	ffff8fbf 	.word	0xffff8fbf
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ad4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ad8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3302      	adds	r3, #2
 8002ae0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8002ae4:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ae6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002aea:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8002aee:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8002af2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f240 80c2 	bls.w	8002c82 <HAL_PCD_IRQHandler+0x5f2>
            ep->xfer_len -= TxByteNbre;
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	f000 80bf 	beq.w	8002c86 <HAL_PCD_IRQHandler+0x5f6>
            ep->xfer_buff += TxByteNbre;
 8002b08:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002b0a:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8002b0c:	441a      	add	r2, r3
 8002b0e:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002b10:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002b12:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8002b16:	4413      	add	r3, r2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b18:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
            ep->xfer_count += TxByteNbre;
 8002b1c:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1e:	f002 faff 	bl	8005120 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	e668      	b.n	80027f8 <HAL_PCD_IRQHandler+0x168>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b26:	8803      	ldrh	r3, [r0, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea03 0309 	and.w	r3, r3, r9
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b38:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002b46:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002b4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b50:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002b52:	4413      	add	r3, r2
 8002b54:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f005 fdf6 	bl	8008748 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0de      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x492>
 8002b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1db      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x492>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b6a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b74:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8002b78:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8002b7a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002b7e:	e63c      	b.n	80027fa <HAL_PCD_IRQHandler+0x16a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b80:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002b82:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b84:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002b94:	f005 fde2 	bl	800875c <HAL_PCD_SOFCallback>
 8002b98:	e5ff      	b.n	800279a <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b9a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002b9c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002bb2:	f023 0308 	bic.w	r3, r3, #8
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002bbe:	f005 fdf3 	bl	80087a8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002bd4:	e58f      	b.n	80026f6 <HAL_PCD_IRQHandler+0x66>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bda:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002be4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002be8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bec:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bf4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002bfc:	f002 fe2e 	bl	800585c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c04:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c06:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c08:	8811      	ldrh	r1, [r2, #0]
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c10:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c12:	f005 fd87 	bl	8008724 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	4602      	mov	r2, r0
 8002c1a:	e5ee      	b.n	80027fa <HAL_PCD_IRQHandler+0x16a>
          if (ep->type == EP_TYPE_BULK)
 8002c1c:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	f000 80d7 	beq.w	8002dd4 <HAL_PCD_IRQHandler+0x744>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c26:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002c2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c46:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002c4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c4e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c58:	d019      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x5fe>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c64:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002c6c:	461f      	mov	r7, r3
              if (count != 0U)
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f43f af0b 	beq.w	8002a8a <HAL_PCD_IRQHandler+0x3fa>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c74:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002c78:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002c7c:	f002 fdee 	bl	800585c <USB_ReadPMA>
 8002c80:	e703      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
 8002c82:	2300      	movs	r3, #0
 8002c84:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c86:	4620      	mov	r0, r4
 8002c88:	f005 fd5e 	bl	8008748 <HAL_PCD_DataInStageCallback>
 8002c8c:	e749      	b.n	8002b22 <HAL_PCD_IRQHandler+0x492>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c8e:	3306      	adds	r3, #6
 8002c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c98:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002ca0:	461f      	mov	r7, r3
              if (count != 0U)
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f43f aef1 	beq.w	8002a8a <HAL_PCD_IRQHandler+0x3fa>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ca8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002cac:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002cb0:	f002 fdd4 	bl	800585c <USB_ReadPMA>
 8002cb4:	e6e9      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cb6:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002cba:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002cbe:	f002 fdcd 	bl	800585c <USB_ReadPMA>
 8002cc2:	e6e2      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
        ep = &hpcd->OUT_ep[epindex];
 8002cc4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	4421      	add	r1, r4
 8002ccc:	f002 fa28 	bl	8005120 <USB_EPStartXfer>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	e614      	b.n	80028fe <HAL_PCD_IRQHandler+0x26e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002cd8:	3306      	adds	r3, #6
 8002cda:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002cde:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ce2:	f8b3 e400 	ldrh.w	lr, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 8002ce6:	1973      	adds	r3, r6, r5
 8002ce8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002cec:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cf0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8002cf4:	45f3      	cmp	fp, lr
 8002cf6:	f0c0 80ab 	bcc.w	8002e50 <HAL_PCD_IRQHandler+0x7c0>
      ep->xfer_len -= TxByteNbre;
 8002cfa:	ebab 0c0e 	sub.w	ip, fp, lr
 8002cfe:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002d02:	f1bc 0f00 	cmp.w	ip, #0
 8002d06:	f000 80a5 	beq.w	8002e54 <HAL_PCD_IRQHandler+0x7c4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d0a:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8002d0e:	d10d      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x69c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d10:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002d2c:	1973      	adds	r3, r6, r5
 8002d2e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d32:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8002d36:	f1bc 0f01 	cmp.w	ip, #1
 8002d3a:	f040 80cb 	bne.w	8002ed4 <HAL_PCD_IRQHandler+0x844>
        ep->xfer_buff += TxByteNbre;
 8002d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d40:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8002d44:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002d4a:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002d4e:	4472      	add	r2, lr
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d54:	4590      	cmp	r8, r2
 8002d56:	f0c0 81b5 	bcc.w	80030c4 <HAL_PCD_IRQHandler+0xa34>
          ep->xfer_len_db -= len;
 8002d5a:	eba8 0802 	sub.w	r8, r8, r2
 8002d5e:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d62:	fa1f fe82 	uxth.w	lr, r2
 8002d66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 819d 	bne.w	80030aa <HAL_PCD_IRQHandler+0xa1a>
 8002d70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d74:	f200 480c 	addw	r8, r0, #1036	; 0x40c
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4443      	add	r3, r8
 8002d7c:	ea4f 1801 	mov.w	r8, r1, lsl #4
 8002d80:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	f040 81d9 	bne.w	800313c <HAL_PCD_IRQHandler+0xaac>
 8002d8a:	f833 2008 	ldrh.w	r2, [r3, r8]
 8002d8e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	0c12      	lsrs	r2, r2, #16
 8002d96:	f823 2008 	strh.w	r2, [r3, r8]
 8002d9a:	f833 2008 	ldrh.w	r2, [r3, r8]
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da4:	f823 2008 	strh.w	r2, [r3, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002da8:	1972      	adds	r2, r6, r5
 8002daa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002dae:	4673      	mov	r3, lr
 8002db0:	4661      	mov	r1, ip
 8002db2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002db4:	f002 fd42 	bl	800583c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	4602      	mov	r2, r0
 8002dbc:	e08a      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x844>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dbe:	293e      	cmp	r1, #62	; 0x3e
 8002dc0:	f200 80cb 	bhi.w	8002f5a <HAL_PCD_IRQHandler+0x8ca>
 8002dc4:	084e      	lsrs	r6, r1, #1
 8002dc6:	07c9      	lsls	r1, r1, #31
 8002dc8:	bf48      	it	mi
 8002dca:	3601      	addmi	r6, #1
 8002dcc:	02b1      	lsls	r1, r6, #10
 8002dce:	b289      	uxth	r1, r1
 8002dd0:	52e9      	strh	r1, [r5, r3]
 8002dd2:	e57d      	b.n	80028d0 <HAL_PCD_IRQHandler+0x240>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dd8:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ddc:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dde:	f000 80c7 	beq.w	8002f70 <HAL_PCD_IRQHandler+0x8e0>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002de2:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002de6:	3302      	adds	r3, #2
 8002de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002dec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002df0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8002df4:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002dfc:	459c      	cmp	ip, r3
 8002dfe:	461f      	mov	r7, r3
 8002e00:	f0c0 8112 	bcc.w	8003028 <HAL_PCD_IRQHandler+0x998>
      ep->xfer_len -= count;
 8002e04:	ebac 0c03 	sub.w	ip, ip, r3
 8002e08:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002e0c:	f1bc 0f00 	cmp.w	ip, #0
 8002e10:	f000 810e 	beq.w	8003030 <HAL_PCD_IRQHandler+0x9a0>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e14:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002e18:	d00d      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x7a6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e1a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8002e1e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002e22:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002e26:	0409      	lsls	r1, r1, #16
 8002e28:	0c09      	lsrs	r1, r1, #16
 8002e2a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002e2e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002e32:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80c3 	beq.w	8002fc2 <HAL_PCD_IRQHandler+0x932>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e3c:	1971      	adds	r1, r6, r5
 8002e3e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002e42:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002e46:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002e4a:	f002 fd07 	bl	800585c <USB_ReadPMA>
 8002e4e:	e61c      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
 8002e50:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e54:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80be 	bne.w	8002fda <HAL_PCD_IRQHandler+0x94a>
 8002e5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e62:	f200 4504 	addw	r5, r0, #1028	; 0x404
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	441d      	add	r5, r3
 8002e6a:	010b      	lsls	r3, r1, #4
 8002e6c:	5aea      	ldrh	r2, [r5, r3]
 8002e6e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e72:	0412      	lsls	r2, r2, #16
 8002e74:	0c12      	lsrs	r2, r2, #16
 8002e76:	52ea      	strh	r2, [r5, r3]
 8002e78:	5aea      	ldrh	r2, [r5, r3]
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e80:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e86:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	4410      	add	r0, r2
 8002e8e:	5ac2      	ldrh	r2, [r0, r3]
 8002e90:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e94:	0412      	lsls	r2, r2, #16
 8002e96:	0c12      	lsrs	r2, r2, #16
 8002e98:	52c2      	strh	r2, [r0, r3]
 8002e9a:	5ac2      	ldrh	r2, [r0, r3]
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea2:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f005 fc4f 	bl	8008748 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eaa:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eae:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eb0:	d183      	bne.n	8002dba <HAL_PCD_IRQHandler+0x72a>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002eb8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ed4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002ed8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	ea03 030a 	and.w	r3, r3, sl
 8002ee2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8002ef2:	e482      	b.n	80027fa <HAL_PCD_IRQHandler+0x16a>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002efa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d17f      	bne.n	8003002 <HAL_PCD_IRQHandler+0x972>
 8002f02:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f06:	f200 4504 	addw	r5, r0, #1028	; 0x404
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	441d      	add	r5, r3
 8002f0e:	010b      	lsls	r3, r1, #4
 8002f10:	5aea      	ldrh	r2, [r5, r3]
 8002f12:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f16:	0412      	lsls	r2, r2, #16
 8002f18:	0c12      	lsrs	r2, r2, #16
 8002f1a:	52ea      	strh	r2, [r5, r3]
 8002f1c:	5aea      	ldrh	r2, [r5, r3]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f24:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f26:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f2a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4410      	add	r0, r2
 8002f32:	5ac2      	ldrh	r2, [r0, r3]
 8002f34:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f38:	0412      	lsls	r2, r2, #16
 8002f3a:	0c12      	lsrs	r2, r2, #16
 8002f3c:	52c2      	strh	r2, [r0, r3]
 8002f3e:	5ac2      	ldrh	r2, [r0, r3]
 8002f40:	b292      	uxth	r2, r2
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f46:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f005 fbfd 	bl	8008748 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f4e:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f52:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f54:	d1ad      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x822>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f56:	4602      	mov	r2, r0
 8002f58:	e7bc      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x844>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f5a:	094e      	lsrs	r6, r1, #5
 8002f5c:	06cf      	lsls	r7, r1, #27
 8002f5e:	4988      	ldr	r1, [pc, #544]	; (8003180 <HAL_PCD_IRQHandler+0xaf0>)
 8002f60:	bf08      	it	eq
 8002f62:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002f66:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002f6a:	b289      	uxth	r1, r1
 8002f6c:	52e9      	strh	r1, [r5, r3]
 8002f6e:	e4af      	b.n	80028d0 <HAL_PCD_IRQHandler+0x240>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f70:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002f74:	3306      	adds	r3, #6
 8002f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f7e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8002f82:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002f8a:	459e      	cmp	lr, r3
 8002f8c:	461f      	mov	r7, r3
 8002f8e:	d360      	bcc.n	8003052 <HAL_PCD_IRQHandler+0x9c2>
      ep->xfer_len -= count;
 8002f90:	ebae 0e03 	sub.w	lr, lr, r3
 8002f94:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002f98:	f1be 0f00 	cmp.w	lr, #0
 8002f9c:	d05b      	beq.n	8003056 <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f9e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x930>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fa4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8002fa8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002fac:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002fb0:	0409      	lsls	r1, r1, #16
 8002fb2:	0c09      	lsrs	r1, r1, #16
 8002fb4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002fb8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002fbc:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8002fc0:	b90b      	cbnz	r3, 8002fc6 <HAL_PCD_IRQHandler+0x936>
 8002fc2:	461f      	mov	r7, r3
 8002fc4:	e561      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fc6:	1971      	adds	r1, r6, r5
 8002fc8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002fcc:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002fd0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002fd4:	f002 fc42 	bl	800585c <USB_ReadPMA>
 8002fd8:	e557      	b.n	8002a8a <HAL_PCD_IRQHandler+0x3fa>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f47f af62 	bne.w	8002ea4 <HAL_PCD_IRQHandler+0x814>
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002fe6:	010d      	lsls	r5, r1, #4
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8002fee:	4413      	add	r3, r2
 8002ff0:	535e      	strh	r6, [r3, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ff2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ff6:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8002ffa:	b292      	uxth	r2, r2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	535e      	strh	r6, [r3, r5]
 8003000:	e750      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x814>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003002:	2b01      	cmp	r3, #1
 8003004:	d1a0      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x8b8>
 8003006:	2600      	movs	r6, #0
 8003008:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800300c:	010d      	lsls	r5, r1, #4
 800300e:	b29a      	uxth	r2, r3
 8003010:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8003014:	4413      	add	r3, r2
 8003016:	535e      	strh	r6, [r3, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003018:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800301c:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003020:	b292      	uxth	r2, r2
 8003022:	4413      	add	r3, r2
 8003024:	535e      	strh	r6, [r3, r5]
 8003026:	e78f      	b.n	8002f48 <HAL_PCD_IRQHandler+0x8b8>
 8003028:	f04f 0c00 	mov.w	ip, #0
 800302c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003030:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8003034:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003038:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800303c:	0409      	lsls	r1, r1, #16
 800303e:	0c09      	lsrs	r1, r1, #16
 8003040:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003044:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003048:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800304c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8003050:	e6e0      	b.n	8002e14 <HAL_PCD_IRQHandler+0x784>
 8003052:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003056:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800305a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800305e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003062:	0409      	lsls	r1, r1, #16
 8003064:	0c09      	lsrs	r1, r1, #16
 8003066:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800306a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800306e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003072:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8003076:	e792      	b.n	8002f9e <HAL_PCD_IRQHandler+0x90e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003078:	fa1f f388 	uxth.w	r3, r8
 800307c:	f1be 0f01 	cmp.w	lr, #1
 8003080:	f47f acd6 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x3a0>
 8003084:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003088:	0109      	lsls	r1, r1, #4
 800308a:	fa1f fe82 	uxth.w	lr, r2
 800308e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003092:	4472      	add	r2, lr
 8003094:	5253      	strh	r3, [r2, r1]
 8003096:	e4cb      	b.n	8002a30 <HAL_PCD_IRQHandler+0x3a0>
        else if (ep->xfer_len_db == 0U)
 8003098:	f1b8 0f00 	cmp.w	r8, #0
 800309c:	d119      	bne.n	80030d2 <HAL_PCD_IRQHandler+0xa42>
          ep->xfer_fill_db = 0U;
 800309e:	461a      	mov	r2, r3
 80030a0:	f88e 804c 	strb.w	r8, [lr, #76]	; 0x4c
 80030a4:	e4a1      	b.n	80029ea <HAL_PCD_IRQHandler+0x35a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030a6:	fa1f fe88 	uxth.w	lr, r8
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f47f ae7c 	bne.w	8002da8 <HAL_PCD_IRQHandler+0x718>
 80030b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030b4:	0109      	lsls	r1, r1, #4
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 80030bc:	4413      	add	r3, r2
 80030be:	f823 e001 	strh.w	lr, [r3, r1]
 80030c2:	e671      	b.n	8002da8 <HAL_PCD_IRQHandler+0x718>
        else if (ep->xfer_len_db == 0U)
 80030c4:	f1b8 0f00 	cmp.w	r8, #0
 80030c8:	d125      	bne.n	8003116 <HAL_PCD_IRQHandler+0xa86>
          ep->xfer_fill_db = 0U;
 80030ca:	4672      	mov	r2, lr
 80030cc:	f883 804c 	strb.w	r8, [r3, #76]	; 0x4c
 80030d0:	e649      	b.n	8002d66 <HAL_PCD_IRQHandler+0x6d6>
          ep->xfer_fill_db = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80030d8:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030dc:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80030e0:	f1be 0f00 	cmp.w	lr, #0
 80030e4:	d1c8      	bne.n	8003078 <HAL_PCD_IRQHandler+0x9e8>
 80030e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	f200 4304 	addw	r3, r0, #1028	; 0x404
 80030f0:	4413      	add	r3, r2
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030f2:	4642      	mov	r2, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030f8:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030fc:	2a3e      	cmp	r2, #62	; 0x3e
 80030fe:	d827      	bhi.n	8003150 <HAL_PCD_IRQHandler+0xac0>
 8003100:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8003104:	07d2      	lsls	r2, r2, #31
 8003106:	bf48      	it	mi
 8003108:	f10e 0e01 	addmi.w	lr, lr, #1
 800310c:	ea4f 228e 	mov.w	r2, lr, lsl #10
 8003110:	b292      	uxth	r2, r2
 8003112:	800a      	strh	r2, [r1, #0]
 8003114:	e48c      	b.n	8002a30 <HAL_PCD_IRQHandler+0x3a0>
          ep->xfer_len_db = 0U;
 8003116:	2200      	movs	r2, #0
 8003118:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800311a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800311e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1bf      	bne.n	80030a6 <HAL_PCD_IRQHandler+0xa16>
 8003126:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800312a:	fa1f fe88 	uxth.w	lr, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800312e:	b29a      	uxth	r2, r3
 8003130:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003134:	4413      	add	r3, r2
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003136:	4642      	mov	r2, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003138:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800313c:	2a3e      	cmp	r2, #62	; 0x3e
 800313e:	d813      	bhi.n	8003168 <HAL_PCD_IRQHandler+0xad8>
 8003140:	0853      	lsrs	r3, r2, #1
 8003142:	07d2      	lsls	r2, r2, #31
 8003144:	bf48      	it	mi
 8003146:	3301      	addmi	r3, #1
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	b29b      	uxth	r3, r3
 800314c:	800b      	strh	r3, [r1, #0]
 800314e:	e62b      	b.n	8002da8 <HAL_PCD_IRQHandler+0x718>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003150:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003154:	06d2      	lsls	r2, r2, #27
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <HAL_PCD_IRQHandler+0xaf0>)
 8003158:	bf08      	it	eq
 800315a:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800315e:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 8003162:	b292      	uxth	r2, r2
 8003164:	800a      	strh	r2, [r1, #0]
 8003166:	e463      	b.n	8002a30 <HAL_PCD_IRQHandler+0x3a0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003168:	0953      	lsrs	r3, r2, #5
 800316a:	06d2      	lsls	r2, r2, #27
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_PCD_IRQHandler+0xaf0>)
 800316e:	bf08      	it	eq
 8003170:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8003174:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003178:	b29b      	uxth	r3, r3
 800317a:	800b      	strh	r3, [r1, #0]
 800317c:	e614      	b.n	8002da8 <HAL_PCD_IRQHandler+0x718>
 800317e:	bf00      	nop
 8003180:	ffff8000 	.word	0xffff8000

08003184 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003184:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8003188:	2a01      	cmp	r2, #1
 800318a:	d00e      	beq.n	80031aa <HAL_PCD_SetAddress+0x26>
{
 800318c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800318e:	2201      	movs	r2, #1
 8003190:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003192:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8003194:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8003198:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319c:	f002 fb3e 	bl	800581c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 80031a6:	4618      	mov	r0, r3
}
 80031a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80031aa:	2002      	movs	r0, #2
}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80031b0:	f001 0c07 	and.w	ip, r1, #7
 80031b4:	0609      	lsls	r1, r1, #24
{
 80031b6:	b510      	push	{r4, lr}
 80031b8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80031ba:	d425      	bmi.n	8003208 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 80031bc:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80031c4:	00c0      	lsls	r0, r0, #3
 80031c6:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80031ca:	4420      	add	r0, r4
 80031cc:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d0:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 80031d2:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80031d4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d6:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 80031da:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80031dc:	b10a      	cbz	r2, 80031e2 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80031de:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80031e2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80031e4:	bf04      	itt	eq
 80031e6:	2300      	moveq	r3, #0
 80031e8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80031ea:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d019      	beq.n	8003226 <HAL_PCD_EP_Open+0x76>
 80031f2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80031f6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031fa:	f001 fd3d 	bl	8004c78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031fe:	2300      	movs	r3, #0
 8003200:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 8003204:	4618      	mov	r0, r3
}
 8003206:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003208:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800320c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003210:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003214:	2001      	movs	r0, #1
 8003216:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003218:	eb0c 0100 	add.w	r1, ip, r0
 800321c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003220:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8003224:	e7d5      	b.n	80031d2 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8003226:	2002      	movs	r0, #2
}
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop

0800322c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800322c:	060b      	lsls	r3, r1, #24
{
 800322e:	b510      	push	{r4, lr}
 8003230:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003232:	d41b      	bmi.n	800326c <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	f001 0307 	and.w	r3, r1, #7
 8003238:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800323c:	00d2      	lsls	r2, r2, #3
 800323e:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8003242:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003244:	4402      	add	r2, r0
 8003246:	2000      	movs	r0, #0
 8003248:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800324c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800324e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003252:	2b01      	cmp	r3, #1
 8003254:	d019      	beq.n	800328a <HAL_PCD_EP_Close+0x5e>
 8003256:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003258:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800325a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800325e:	f001 fe7f 	bl	8004f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003262:	2300      	movs	r3, #0
 8003264:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003268:	4618      	mov	r0, r3
}
 800326a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800326c:	2001      	movs	r0, #1
 800326e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003272:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8003274:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003278:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327c:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800327e:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003280:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003286:	2b01      	cmp	r3, #1
 8003288:	d1e5      	bne.n	8003256 <HAL_PCD_EP_Close+0x2a>
 800328a:	2002      	movs	r0, #2
}
 800328c:	bd10      	pop	{r4, pc}
 800328e:	bf00      	nop

08003290 <HAL_PCD_EP_Receive>:
{
 8003290:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8003292:	2400      	movs	r4, #0
 8003294:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8003298:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800329c:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 80032a0:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032a4:	6800      	ldr	r0, [r0, #0]
 80032a6:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 80032aa:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80032ae:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b6:	f001 ff33 	bl	8005120 <USB_EPStartXfer>
}
 80032ba:	4620      	mov	r0, r4
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop

080032c0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032c0:	f001 0107 	and.w	r1, r1, #7
 80032c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032c8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80032cc:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <HAL_PCD_EP_Transmit>:
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 80032d6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 80032d8:	2500      	movs	r5, #0
{
 80032da:	4604      	mov	r4, r0
 80032dc:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 80032e0:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e4:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 80032e8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 80032f0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f4:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 80032f8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80032fc:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8003300:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8003304:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8003308:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800330c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003310:	6800      	ldr	r0, [r0, #0]
 8003312:	f001 ff05 	bl	8005120 <USB_EPStartXfer>
}
 8003316:	4628      	mov	r0, r5
 8003318:	bd70      	pop	{r4, r5, r6, pc}
 800331a:	bf00      	nop

0800331c <HAL_PCD_EP_SetStall>:
{
 800331c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800331e:	6843      	ldr	r3, [r0, #4]
 8003320:	f001 0507 	and.w	r5, r1, #7
 8003324:	429d      	cmp	r5, r3
 8003326:	d82f      	bhi.n	8003388 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8003328:	060b      	lsls	r3, r1, #24
 800332a:	4604      	mov	r4, r0
 800332c:	d41b      	bmi.n	8003366 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->OUT_ep[ep_addr];
 800332e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003332:	00c9      	lsls	r1, r1, #3
 8003334:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 8003338:	1843      	adds	r3, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800333a:	1881      	adds	r1, r0, r2
    ep->is_in = 0U;
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003342:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003346:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003348:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800334c:	429a      	cmp	r2, r3
 800334e:	d019      	beq.n	8003384 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003350:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003352:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003356:	f002 f9e9 	bl	800572c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800335a:	b1bd      	cbz	r5, 800338c <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800335c:	2300      	movs	r3, #0
 800335e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003362:	4618      	mov	r0, r3
}
 8003364:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003366:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003368:	18ab      	adds	r3, r5, r2
    ep->is_in = 1U;
 800336a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800336e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003372:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003374:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 8003376:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800337a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800337c:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8003380:	429a      	cmp	r2, r3
 8003382:	d1e5      	bne.n	8003350 <HAL_PCD_EP_SetStall+0x34>
 8003384:	2002      	movs	r0, #2
}
 8003386:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003388:	2001      	movs	r0, #1
}
 800338a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8003392:	f002 fa51 	bl	8005838 <USB_EP0_OutStart>
 8003396:	e7e1      	b.n	800335c <HAL_PCD_EP_SetStall+0x40>

08003398 <HAL_PCD_EP_ClrStall>:
{
 8003398:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800339a:	6843      	ldr	r3, [r0, #4]
 800339c:	f001 020f 	and.w	r2, r1, #15
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d832      	bhi.n	800340a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80033a4:	060b      	lsls	r3, r1, #24
 80033a6:	4604      	mov	r4, r0
 80033a8:	d41c      	bmi.n	80033e4 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033aa:	f001 0307 	and.w	r3, r1, #7
 80033ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80033b2:	00d2      	lsls	r2, r2, #3
 80033b4:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80033b8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80033ba:	4402      	add	r2, r0
  ep->is_stall = 0U;
 80033bc:	2500      	movs	r5, #0
    ep->is_in = 0U;
 80033be:	2000      	movs	r0, #0
 80033c0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80033c6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80033c8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d01a      	beq.n	8003406 <HAL_PCD_EP_ClrStall+0x6e>
 80033d0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033d2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033d4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033d8:	f002 f9d0 	bl	800577c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033dc:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80033e0:	4628      	mov	r0, r5
}
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80033e4:	2001      	movs	r0, #1
 80033e6:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ea:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 80033ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033f0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 80033f6:	2500      	movs	r5, #0
    ep->is_in = 1U;
 80033f8:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fa:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80033fc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80033fe:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003402:	2b01      	cmp	r3, #1
 8003404:	d1e4      	bne.n	80033d0 <HAL_PCD_EP_ClrStall+0x38>
 8003406:	2002      	movs	r0, #2
}
 8003408:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
}
 800340c:	bd38      	pop	{r3, r4, r5, pc}
 800340e:	bf00      	nop

08003410 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003410:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003414:	d00b      	beq.n	800342e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003416:	f001 0107 	and.w	r1, r1, #7
 800341a:	3101      	adds	r1, #1
 800341c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003420:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003424:	b95a      	cbnz	r2, 800343e <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003426:	2000      	movs	r0, #0
    ep->doublebuffer = 0U;
 8003428:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800342a:	80cb      	strh	r3, [r1, #6]
}
 800342c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800342e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003432:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003436:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800343a:	2a00      	cmp	r2, #0
 800343c:	d0f3      	beq.n	8003426 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800343e:	2201      	movs	r2, #1
}
 8003440:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003442:	608b      	str	r3, [r1, #8]
    ep->doublebuffer = 1U;
 8003444:	730a      	strb	r2, [r1, #12]
}
 8003446:	4770      	bx	lr

08003448 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003448:	2201      	movs	r2, #1
 800344a:	4b01      	ldr	r3, [pc, #4]	; (8003450 <HAL_PWR_EnableBkUpAccess+0x8>)
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	4770      	bx	lr
 8003450:	420e0000 	.word	0x420e0000

08003454 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003454:	2800      	cmp	r0, #0
 8003456:	f000 81b6 	beq.w	80037c6 <HAL_RCC_OscConfig+0x372>
{
 800345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	6803      	ldr	r3, [r0, #0]
 8003460:	4604      	mov	r4, r0
 8003462:	07dd      	lsls	r5, r3, #31
{
 8003464:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003466:	d535      	bpl.n	80034d4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003468:	499a      	ldr	r1, [pc, #616]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800346a:	684a      	ldr	r2, [r1, #4]
 800346c:	f002 020c 	and.w	r2, r2, #12
 8003470:	2a04      	cmp	r2, #4
 8003472:	f000 80ef 	beq.w	8003654 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003476:	684a      	ldr	r2, [r1, #4]
 8003478:	f002 020c 	and.w	r2, r2, #12
 800347c:	2a08      	cmp	r2, #8
 800347e:	f000 80e5 	beq.w	800364c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d010      	beq.n	80034ac <HAL_RCC_OscConfig+0x58>
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 810c 	beq.w	80036a8 <HAL_RCC_OscConfig+0x254>
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003494:	f000 8182 	beq.w	800379c <HAL_RCC_OscConfig+0x348>
 8003498:	4b8e      	ldr	r3, [pc, #568]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_OscConfig+0x62>
 80034ac:	4a89      	ldr	r2, [pc, #548]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fa95 	bl	80019e4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4e86      	ldr	r6, [pc, #536]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80034bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e005      	b.n	80034cc <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe fa90 	bl	80019e4 <HAL_GetTick>
 80034c4:	1b40      	subs	r0, r0, r5
 80034c6:	2864      	cmp	r0, #100	; 0x64
 80034c8:	f200 80ea 	bhi.w	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034cc:	6833      	ldr	r3, [r6, #0]
 80034ce:	039a      	lsls	r2, r3, #14
 80034d0:	d5f6      	bpl.n	80034c0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	079f      	lsls	r7, r3, #30
 80034d6:	d528      	bpl.n	800352a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d8:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034da:	6851      	ldr	r1, [r2, #4]
 80034dc:	f011 0f0c 	tst.w	r1, #12
 80034e0:	f000 808d 	beq.w	80035fe <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e4:	6851      	ldr	r1, [r2, #4]
 80034e6:	f001 010c 	and.w	r1, r1, #12
 80034ea:	2908      	cmp	r1, #8
 80034ec:	f000 8083 	beq.w	80035f6 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8118 	beq.w	8003728 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	2201      	movs	r2, #1
 80034fa:	4b77      	ldr	r3, [pc, #476]	; (80036d8 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4e75      	ldr	r6, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 80034fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003500:	f7fe fa70 	bl	80019e4 <HAL_GetTick>
 8003504:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	e005      	b.n	8003514 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fa6c 	bl	80019e4 <HAL_GetTick>
 800350c:	1b40      	subs	r0, r0, r5
 800350e:	2802      	cmp	r0, #2
 8003510:	f200 80c6 	bhi.w	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	6833      	ldr	r3, [r6, #0]
 8003516:	0798      	lsls	r0, r3, #30
 8003518:	d5f6      	bpl.n	8003508 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	6962      	ldr	r2, [r4, #20]
 800351e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003522:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003526:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	071a      	lsls	r2, r3, #28
 800352c:	d41f      	bmi.n	800356e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	075d      	lsls	r5, r3, #29
 8003530:	d542      	bpl.n	80035b8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003532:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	00d0      	lsls	r0, r2, #3
 8003538:	d57d      	bpl.n	8003636 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4e67      	ldr	r6, [pc, #412]	; (80036dc <HAL_RCC_OscConfig+0x288>)
 800353e:	6833      	ldr	r3, [r6, #0]
 8003540:	05d9      	lsls	r1, r3, #23
 8003542:	f140 809d 	bpl.w	8003680 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	f000 80fe 	beq.w	800374a <HAL_RCC_OscConfig+0x2f6>
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80ca 	beq.w	80036e8 <HAL_RCC_OscConfig+0x294>
 8003554:	2b05      	cmp	r3, #5
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	f000 812c 	beq.w	80037b6 <HAL_RCC_OscConfig+0x362>
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	621a      	str	r2, [r3, #32]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	621a      	str	r2, [r3, #32]
 800356c:	e0f2      	b.n	8003754 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356e:	69a3      	ldr	r3, [r4, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d04f      	beq.n	8003614 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003574:	2201      	movs	r2, #1
 8003576:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003578:	4e56      	ldr	r6, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800357a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800357e:	f7fe fa31 	bl	80019e4 <HAL_GetTick>
 8003582:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003584:	e005      	b.n	8003592 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7fe fa2d 	bl	80019e4 <HAL_GetTick>
 800358a:	1b40      	subs	r0, r0, r5
 800358c:	2802      	cmp	r0, #2
 800358e:	f200 8087 	bhi.w	80036a0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003594:	079b      	lsls	r3, r3, #30
 8003596:	d5f6      	bpl.n	8003586 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003598:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_RCC_OscConfig+0x28c>)
 800359a:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_RCC_OscConfig+0x290>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0a5b      	lsrs	r3, r3, #9
 80035a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80035a6:	bf00      	nop
  }
  while (Delay --);
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	9201      	str	r2, [sp, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	075d      	lsls	r5, r3, #29
 80035b6:	d4bc      	bmi.n	8003532 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b8:	69e0      	ldr	r0, [r4, #28]
 80035ba:	b1c0      	cbz	r0, 80035ee <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035bc:	4d45      	ldr	r5, [pc, #276]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035be:	686b      	ldr	r3, [r5, #4]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f000 80d8 	beq.w	800377a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80035ca:	2200      	movs	r2, #0
 80035cc:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ce:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80035d0:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d2:	f000 80fa 	beq.w	80037ca <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80035d6:	f7fe fa05 	bl	80019e4 <HAL_GetTick>
 80035da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	e004      	b.n	80035e8 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe fa01 	bl	80019e4 <HAL_GetTick>
 80035e2:	1b00      	subs	r0, r0, r4
 80035e4:	2802      	cmp	r0, #2
 80035e6:	d85b      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	019b      	lsls	r3, r3, #6
 80035ec:	d4f7      	bmi.n	80035de <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80035ee:	2000      	movs	r0, #0
}
 80035f0:	b002      	add	sp, #8
 80035f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	03d6      	lsls	r6, r2, #15
 80035fa:	f53f af79 	bmi.w	80034f0 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	0795      	lsls	r5, r2, #30
 8003604:	d530      	bpl.n	8003668 <HAL_RCC_OscConfig+0x214>
 8003606:	6922      	ldr	r2, [r4, #16]
 8003608:	2a01      	cmp	r2, #1
 800360a:	d02d      	beq.n	8003668 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
}
 800360e:	b002      	add	sp, #8
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003614:	4a30      	ldr	r2, [pc, #192]	; (80036d8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003616:	4e2f      	ldr	r6, [pc, #188]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003618:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800361c:	f7fe f9e2 	bl	80019e4 <HAL_GetTick>
 8003620:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003622:	e004      	b.n	800362e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe f9de 	bl	80019e4 <HAL_GetTick>
 8003628:	1b40      	subs	r0, r0, r5
 800362a:	2802      	cmp	r0, #2
 800362c:	d838      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003630:	079f      	lsls	r7, r3, #30
 8003632:	d4f7      	bmi.n	8003624 <HAL_RCC_OscConfig+0x1d0>
 8003634:	e7bd      	b.n	80035b2 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003638:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800363e:	61da      	str	r2, [r3, #28]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800364a:	e777      	b.n	800353c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800364c:	684a      	ldr	r2, [r1, #4]
 800364e:	03d0      	lsls	r0, r2, #15
 8003650:	f57f af17 	bpl.w	8003482 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	0391      	lsls	r1, r2, #14
 800365a:	f57f af3b 	bpl.w	80034d4 <HAL_RCC_OscConfig+0x80>
 800365e:	6862      	ldr	r2, [r4, #4]
 8003660:	2a00      	cmp	r2, #0
 8003662:	f47f af37 	bne.w	80034d4 <HAL_RCC_OscConfig+0x80>
 8003666:	e7d1      	b.n	800360c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800366a:	6960      	ldr	r0, [r4, #20]
 800366c:	680a      	ldr	r2, [r1, #0]
 800366e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003672:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003676:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003678:	071a      	lsls	r2, r3, #28
 800367a:	f57f af58 	bpl.w	800352e <HAL_RCC_OscConfig+0xda>
 800367e:	e776      	b.n	800356e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003680:	6833      	ldr	r3, [r6, #0]
 8003682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003686:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003688:	f7fe f9ac 	bl	80019e4 <HAL_GetTick>
 800368c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	6833      	ldr	r3, [r6, #0]
 8003690:	05da      	lsls	r2, r3, #23
 8003692:	f53f af58 	bmi.w	8003546 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe f9a5 	bl	80019e4 <HAL_GetTick>
 800369a:	1bc0      	subs	r0, r0, r7
 800369c:	2864      	cmp	r0, #100	; 0x64
 800369e:	d9f6      	bls.n	800368e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 80036a0:	2003      	movs	r0, #3
}
 80036a2:	b002      	add	sp, #8
 80036a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	4d0a      	ldr	r5, [pc, #40]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036ba:	f7fe f993 	bl	80019e4 <HAL_GetTick>
 80036be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c0:	e004      	b.n	80036cc <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c2:	f7fe f98f 	bl	80019e4 <HAL_GetTick>
 80036c6:	1b80      	subs	r0, r0, r6
 80036c8:	2864      	cmp	r0, #100	; 0x64
 80036ca:	d8e9      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	039b      	lsls	r3, r3, #14
 80036d0:	d4f7      	bmi.n	80036c2 <HAL_RCC_OscConfig+0x26e>
 80036d2:	e6fe      	b.n	80034d2 <HAL_RCC_OscConfig+0x7e>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	42420000 	.word	0x42420000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	20000004 	.word	0x20000004
 80036e4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e8:	4e50      	ldr	r6, [pc, #320]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ee:	6a33      	ldr	r3, [r6, #32]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6233      	str	r3, [r6, #32]
 80036f6:	6a33      	ldr	r3, [r6, #32]
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80036fe:	f7fe f971 	bl	80019e4 <HAL_GetTick>
 8003702:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e004      	b.n	8003710 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe f96d 	bl	80019e4 <HAL_GetTick>
 800370a:	1bc0      	subs	r0, r0, r7
 800370c:	4540      	cmp	r0, r8
 800370e:	d8c7      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	6a33      	ldr	r3, [r6, #32]
 8003712:	0798      	lsls	r0, r3, #30
 8003714:	d4f7      	bmi.n	8003706 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003716:	2d00      	cmp	r5, #0
 8003718:	f43f af4e 	beq.w	80035b8 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4a43      	ldr	r2, [pc, #268]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
 800371e:	69d3      	ldr	r3, [r2, #28]
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	e747      	b.n	80035b8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003728:	4a41      	ldr	r2, [pc, #260]	; (8003830 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	4e40      	ldr	r6, [pc, #256]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800372c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800372e:	f7fe f959 	bl	80019e4 <HAL_GetTick>
 8003732:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003734:	e004      	b.n	8003740 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7fe f955 	bl	80019e4 <HAL_GetTick>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	2802      	cmp	r0, #2
 800373e:	d8af      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	0799      	lsls	r1, r3, #30
 8003744:	d4f7      	bmi.n	8003736 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	e6ef      	b.n	800352a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374a:	4a38      	ldr	r2, [pc, #224]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
 800374c:	6a13      	ldr	r3, [r2, #32]
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003754:	f7fe f946 	bl	80019e4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800375c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	4f33      	ldr	r7, [pc, #204]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
 8003760:	e004      	b.n	800376c <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe f93f 	bl	80019e4 <HAL_GetTick>
 8003766:	1b80      	subs	r0, r0, r6
 8003768:	4540      	cmp	r0, r8
 800376a:	d899      	bhi.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	079b      	lsls	r3, r3, #30
 8003770:	d5f7      	bpl.n	8003762 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8003772:	2d00      	cmp	r5, #0
 8003774:	f43f af20 	beq.w	80035b8 <HAL_RCC_OscConfig+0x164>
 8003778:	e7d0      	b.n	800371c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377a:	2801      	cmp	r0, #1
 800377c:	f43f af38 	beq.w	80035f0 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003780:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	6a22      	ldr	r2, [r4, #32]
 8003784:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003788:	4291      	cmp	r1, r2
 800378a:	f47f af3f 	bne.w	800360c <HAL_RCC_OscConfig+0x1b8>
 800378e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003790:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003794:	1a18      	subs	r0, r3, r0
 8003796:	bf18      	it	ne
 8003798:	2001      	movne	r0, #1
 800379a:	e729      	b.n	80035f0 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037a0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e67f      	b.n	80034b6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b6:	f042 0204 	orr.w	r2, r2, #4
 80037ba:	621a      	str	r2, [r3, #32]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	e7c6      	b.n	8003754 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
}
 80037c8:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80037ca:	f7fe f90b 	bl	80019e4 <HAL_GetTick>
 80037ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d0:	e005      	b.n	80037de <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe f907 	bl	80019e4 <HAL_GetTick>
 80037d6:	1b80      	subs	r0, r0, r6
 80037d8:	2802      	cmp	r0, #2
 80037da:	f63f af61 	bhi.w	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	0199      	lsls	r1, r3, #6
 80037e2:	d4f6      	bmi.n	80037d2 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037e4:	6a23      	ldr	r3, [r4, #32]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ec:	686a      	ldr	r2, [r5, #4]
 80037ee:	68a1      	ldr	r1, [r4, #8]
 80037f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80037f4:	430a      	orrs	r2, r1
 80037f6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80037f8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	4d0c      	ldr	r5, [pc, #48]	; (800382c <HAL_RCC_OscConfig+0x3d8>)
 80037fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037fe:	686a      	ldr	r2, [r5, #4]
 8003800:	430b      	orrs	r3, r1
 8003802:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003806:	490a      	ldr	r1, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003808:	4313      	orrs	r3, r2
 800380a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800380c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800380e:	f7fe f8e9 	bl	80019e4 <HAL_GetTick>
 8003812:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	e005      	b.n	8003822 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe f8e5 	bl	80019e4 <HAL_GetTick>
 800381a:	1b00      	subs	r0, r0, r4
 800381c:	2802      	cmp	r0, #2
 800381e:	f63f af3f 	bhi.w	80036a0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	019a      	lsls	r2, r3, #6
 8003826:	d5f6      	bpl.n	8003816 <HAL_RCC_OscConfig+0x3c2>
 8003828:	e6e1      	b.n	80035ee <HAL_RCC_OscConfig+0x19a>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	42420000 	.word	0x42420000

08003834 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003834:	f240 2c01 	movw	ip, #513	; 0x201
{
 8003838:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_RCC_GetSysClockFreq+0x68>)
{
 800383c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800383e:	f10d 0e18 	add.w	lr, sp, #24
 8003842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003844:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800384a:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 800384e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003850:	f003 010c 	and.w	r1, r3, #12
 8003854:	2908      	cmp	r1, #8
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8003858:	4812      	ldr	r0, [pc, #72]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x70>)
}
 800385a:	b007      	add	sp, #28
 800385c:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003860:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8003864:	3118      	adds	r1, #24
 8003866:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003868:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800386a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800386e:	d50e      	bpl.n	800388e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003870:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003874:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003878:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800387c:	3318      	adds	r3, #24
 800387e:	446b      	add	r3, sp
 8003880:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003884:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003888:	b007      	add	sp, #28
 800388a:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x74>)
 8003890:	fb03 f000 	mul.w	r0, r3, r0
}
 8003894:	b007      	add	sp, #28
 8003896:	f85d fb04 	ldr.w	pc, [sp], #4
 800389a:	bf00      	nop
 800389c:	08009d4c 	.word	0x08009d4c
 80038a0:	40021000 	.word	0x40021000
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	003d0900 	.word	0x003d0900

080038ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80038ac:	2800      	cmp	r0, #0
 80038ae:	f000 808c 	beq.w	80039ca <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b2:	4a49      	ldr	r2, [pc, #292]	; (80039d8 <HAL_RCC_ClockConfig+0x12c>)
{
 80038b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	4604      	mov	r4, r0
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	428b      	cmp	r3, r1
 80038c2:	460d      	mov	r5, r1
 80038c4:	d20c      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	6813      	ldr	r3, [r2, #0]
 80038c8:	f023 0307 	bic.w	r3, r3, #7
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	428b      	cmp	r3, r1
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
}
 80038dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	0798      	lsls	r0, r3, #30
 80038e4:	d514      	bpl.n	8003910 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e6:	0759      	lsls	r1, r3, #29
 80038e8:	d504      	bpl.n	80038f4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ea:	493c      	ldr	r1, [pc, #240]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 80038ec:	684a      	ldr	r2, [r1, #4]
 80038ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80038f2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	071a      	lsls	r2, r3, #28
 80038f6:	d504      	bpl.n	8003902 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f8:	4938      	ldr	r1, [pc, #224]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 80038fa:	684a      	ldr	r2, [r1, #4]
 80038fc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003900:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003902:	4936      	ldr	r1, [pc, #216]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 8003904:	68a0      	ldr	r0, [r4, #8]
 8003906:	684a      	ldr	r2, [r1, #4]
 8003908:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800390c:	4302      	orrs	r2, r0
 800390e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003910:	07df      	lsls	r7, r3, #31
 8003912:	d520      	bpl.n	8003956 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003914:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391c:	d057      	beq.n	80039ce <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	2a02      	cmp	r2, #2
 8003920:	d050      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	0799      	lsls	r1, r3, #30
 8003924:	d5d9      	bpl.n	80038da <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4e2d      	ldr	r6, [pc, #180]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392c:	6873      	ldr	r3, [r6, #4]
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	4313      	orrs	r3, r2
 8003934:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003936:	f7fe f855 	bl	80019e4 <HAL_GetTick>
 800393a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393c:	e004      	b.n	8003948 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393e:	f7fe f851 	bl	80019e4 <HAL_GetTick>
 8003942:	1bc0      	subs	r0, r0, r7
 8003944:	4540      	cmp	r0, r8
 8003946:	d845      	bhi.n	80039d4 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003948:	6873      	ldr	r3, [r6, #4]
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003954:	d1f3      	bne.n	800393e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003956:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <HAL_RCC_ClockConfig+0x12c>)
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	42ab      	cmp	r3, r5
 8003960:	d909      	bls.n	8003976 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	f023 0307 	bic.w	r3, r3, #7
 8003968:	432b      	orrs	r3, r5
 800396a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	42ab      	cmp	r3, r5
 8003974:	d1b1      	bne.n	80038da <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	075a      	lsls	r2, r3, #29
 800397a:	d506      	bpl.n	800398a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4917      	ldr	r1, [pc, #92]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 800397e:	68e0      	ldr	r0, [r4, #12]
 8003980:	684a      	ldr	r2, [r1, #4]
 8003982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003986:	4302      	orrs	r2, r0
 8003988:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	d507      	bpl.n	800399e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 8003990:	6921      	ldr	r1, [r4, #16]
 8003992:	6853      	ldr	r3, [r2, #4]
 8003994:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003998:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800399c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399e:	f7ff ff49 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_RCC_ClockConfig+0x130>)
 80039a6:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCC_ClockConfig+0x134>)
 80039a8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80039aa:	480e      	ldr	r0, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039b0:	5c89      	ldrb	r1, [r1, r2]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_RCC_ClockConfig+0x13c>)
 80039b4:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 80039b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80039ba:	f7fd ffd1 	bl	8001960 <HAL_InitTick>
  return HAL_OK;
 80039be:	2000      	movs	r0, #0
}
 80039c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c4:	0198      	lsls	r0, r3, #6
 80039c6:	d4ae      	bmi.n	8003926 <HAL_RCC_ClockConfig+0x7a>
 80039c8:	e787      	b.n	80038da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80039ca:	2001      	movs	r0, #1
}
 80039cc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	039e      	lsls	r6, r3, #14
 80039d0:	d4a9      	bmi.n	8003926 <HAL_RCC_ClockConfig+0x7a>
 80039d2:	e782      	b.n	80038da <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80039d4:	2003      	movs	r0, #3
 80039d6:	e781      	b.n	80038dc <HAL_RCC_ClockConfig+0x30>
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08009d34 	.word	0x08009d34
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4905      	ldr	r1, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	6810      	ldr	r0, [r2, #0]
}
 80039fc:	40d8      	lsrs	r0, r3
 80039fe:	4770      	bx	lr
 8003a00:	40021000 	.word	0x40021000
 8003a04:	20000004 	.word	0x20000004
 8003a08:	08009d44 	.word	0x08009d44

08003a0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4905      	ldr	r1, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	6810      	ldr	r0, [r2, #0]
}
 8003a1c:	40d8      	lsrs	r0, r3
 8003a1e:	4770      	bx	lr
 8003a20:	40021000 	.word	0x40021000
 8003a24:	20000004 	.word	0x20000004
 8003a28:	08009d44 	.word	0x08009d44

08003a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a30:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a32:	6800      	ldr	r0, [r0, #0]
{
 8003a34:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a36:	07c1      	lsls	r1, r0, #31
 8003a38:	d52c      	bpl.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	00d2      	lsls	r2, r2, #3
 8003a40:	d53f      	bpl.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4d39      	ldr	r5, [pc, #228]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8003a44:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	682b      	ldr	r3, [r5, #0]
 8003a48:	05df      	lsls	r7, r3, #23
 8003a4a:	d548      	bpl.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4c:	4d35      	ldr	r5, [pc, #212]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003a4e:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a50:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003a54:	d011      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a56:	6861      	ldr	r1, [r4, #4]
 8003a58:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d00d      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a60:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6c:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a70:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a74:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a76:	07d9      	lsls	r1, r3, #31
 8003a78:	d444      	bmi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7a:	6861      	ldr	r1, [r4, #4]
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003a7e:	6a13      	ldr	r3, [r2, #32]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a88:	b11e      	cbz	r6, 8003a92 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	69d3      	ldr	r3, [r2, #28]
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	0783      	lsls	r3, r0, #30
 8003a96:	d506      	bpl.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a98:	4922      	ldr	r1, [pc, #136]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	684a      	ldr	r2, [r1, #4]
 8003a9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aa6:	f010 0010 	ands.w	r0, r0, #16
 8003aaa:	d007      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003aac:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003ab0:	68e1      	ldr	r1, [r4, #12]
 8003ab2:	6853      	ldr	r3, [r2, #4]
 8003ab4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6053      	str	r3, [r2, #4]
}
 8003abc:	b002      	add	sp, #8
 8003abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4d18      	ldr	r5, [pc, #96]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aca:	61da      	str	r2, [r3, #28]
 8003acc:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003ace:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	05df      	lsls	r7, r3, #23
 8003adc:	d4b6      	bmi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	682b      	ldr	r3, [r5, #0]
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003ae6:	f7fd ff7d 	bl	80019e4 <HAL_GetTick>
 8003aea:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	05d8      	lsls	r0, r3, #23
 8003af0:	d4ac      	bmi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af2:	f7fd ff77 	bl	80019e4 <HAL_GetTick>
 8003af6:	1bc3      	subs	r3, r0, r7
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d9f7      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003afc:	2003      	movs	r0, #3
}
 8003afe:	b002      	add	sp, #8
 8003b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003b04:	f7fd ff6e 	bl	80019e4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b0c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd ff68 	bl	80019e4 <HAL_GetTick>
 8003b14:	1bc0      	subs	r0, r0, r7
 8003b16:	4540      	cmp	r0, r8
 8003b18:	d8f0      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1a:	6a2b      	ldr	r3, [r5, #32]
 8003b1c:	079a      	lsls	r2, r3, #30
 8003b1e:	d5f7      	bpl.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003b20:	e7ab      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	42420000 	.word	0x42420000

08003b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b30:	4684      	mov	ip, r0
 8003b32:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8003b36:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b38:	f10d 0e18 	add.w	lr, sp, #24
 8003b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b3e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8003b42:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b44:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b48:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003b4e:	d007      	beq.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8003b50:	2810      	cmp	r0, #16
 8003b52:	d02a      	beq.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003b54:	2801      	cmp	r0, #1
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b58:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003b5a:	b007      	add	sp, #28
 8003b5c:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b60:	f7ff ff54 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003b74:	b007      	add	sp, #28
 8003b76:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b7a:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003b80:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b82:	401a      	ands	r2, r3
 8003b84:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003b88:	d033      	beq.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	d031      	beq.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b98:	d1de      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8003b9a:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b9e:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003ba0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003ba4:	bf18      	it	ne
 8003ba6:	4618      	movne	r0, r3
 8003ba8:	e7d7      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003bac:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003bb4:	d0d1      	beq.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bb6:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003bba:	3118      	adds	r1, #24
 8003bbc:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bbe:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc0:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc4:	d520      	bpl.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc6:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bca:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003bce:	3318      	adds	r3, #24
 8003bd0:	446b      	add	r3, sp
 8003bd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	d4b9      	bmi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003be8:	0040      	lsls	r0, r0, #1
 8003bea:	fba3 3000 	umull	r3, r0, r3, r0
 8003bee:	0840      	lsrs	r0, r0, #1
 8003bf0:	e7b3      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8003bf2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003bf6:	e7b0      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8003bf8:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bfc:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003bfe:	f010 0002 	ands.w	r0, r0, #2
 8003c02:	bf18      	it	ne
 8003c04:	4618      	movne	r0, r3
 8003c06:	e7a8      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003c0a:	fb03 f000 	mul.w	r0, r3, r0
 8003c0e:	e7e6      	b.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8003c10:	08009d4c 	.word	0x08009d4c
 8003c14:	40021000 	.word	0x40021000
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	003d0900 	.word	0x003d0900

08003c24 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8003c24:	2902      	cmp	r1, #2
{
 8003c26:	b410      	push	{r4}
  year = 2000U + nYear;
 8003c28:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8003c2c:	d822      	bhi.n	8003c74 <RTC_WeekDayNum+0x50>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003c2e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8003c32:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8003c36:	4c18      	ldr	r4, [pc, #96]	; (8003c98 <RTC_WeekDayNum+0x74>)
 8003c38:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8003c3c:	fba4 4101 	umull	r4, r1, r4, r1
 8003c40:	4c16      	ldr	r4, [pc, #88]	; (8003c9c <RTC_WeekDayNum+0x78>)
 8003c42:	3204      	adds	r2, #4
 8003c44:	fba4 4c00 	umull	r4, ip, r4, r0
 8003c48:	441a      	add	r2, r3
 8003c4a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8003c4e:	eb01 0190 	add.w	r1, r1, r0, lsr #2
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003c52:	4813      	ldr	r0, [pc, #76]	; (8003ca0 <RTC_WeekDayNum+0x7c>)
 8003c54:	eb01 11dc 	add.w	r1, r1, ip, lsr #7
 8003c58:	eba1 115c 	sub.w	r1, r1, ip, lsr #5
 8003c5c:	fba0 3001 	umull	r3, r0, r0, r1
 8003c60:	1a0b      	subs	r3, r1, r0
 8003c62:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c66:	0880      	lsrs	r0, r0, #2
 8003c68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003c6c:	1a08      	subs	r0, r1, r0
  }

  return (uint8_t)weekday;
}
 8003c6e:	b2c0      	uxtb	r0, r0
 8003c70:	bc10      	pop	{r4}
 8003c72:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003c74:	4808      	ldr	r0, [pc, #32]	; (8003c98 <RTC_WeekDayNum+0x74>)
 8003c76:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8003c7a:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8003c7e:	fba0 0101 	umull	r0, r1, r0, r1
 8003c82:	3202      	adds	r2, #2
 8003c84:	4805      	ldr	r0, [pc, #20]	; (8003c9c <RTC_WeekDayNum+0x78>)
 8003c86:	441a      	add	r2, r3
 8003c88:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8003c8c:	fba0 0c03 	umull	r0, ip, r0, r3
 8003c90:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 8003c94:	e7dd      	b.n	8003c52 <RTC_WeekDayNum+0x2e>
 8003c96:	bf00      	nop
 8003c98:	38e38e39 	.word	0x38e38e39
 8003c9c:	51eb851f 	.word	0x51eb851f
 8003ca0:	24924925 	.word	0x24924925

08003ca4 <RTC_WriteAlarmCounter>:
{
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	460e      	mov	r6, r1
  tickstart = HAL_GetTick();
 8003caa:	f7fd fe9b 	bl	80019e4 <HAL_GetTick>
 8003cae:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cb0:	e005      	b.n	8003cbe <RTC_WriteAlarmCounter+0x1a>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003cb2:	f7fd fe97 	bl	80019e4 <HAL_GetTick>
 8003cb6:	1b40      	subs	r0, r0, r5
 8003cb8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cbc:	d81f      	bhi.n	8003cfe <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	0692      	lsls	r2, r2, #26
 8003cc4:	d5f5      	bpl.n	8003cb2 <RTC_WriteAlarmCounter+0xe>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc6:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003cc8:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cca:	f042 0210 	orr.w	r2, r2, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003cce:	b2b6      	uxth	r6, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003cd2:	6219      	str	r1, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003cd4:	625e      	str	r6, [r3, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	f022 0210 	bic.w	r2, r2, #16
 8003cdc:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003cde:	f7fd fe81 	bl	80019e4 <HAL_GetTick>
 8003ce2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ce4:	e005      	b.n	8003cf2 <RTC_WriteAlarmCounter+0x4e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ce6:	f7fd fe7d 	bl	80019e4 <HAL_GetTick>
 8003cea:	1b40      	subs	r0, r0, r5
 8003cec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cf0:	d805      	bhi.n	8003cfe <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	069b      	lsls	r3, r3, #26
 8003cf8:	d5f5      	bpl.n	8003ce6 <RTC_WriteAlarmCounter+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2000      	movs	r0, #0
}
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
}
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	bf00      	nop

08003d04 <HAL_RTC_GetTime.part.0>:
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 8003d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	460d      	mov	r5, r1
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d0a:	6801      	ldr	r1, [r0, #0]
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4616      	mov	r6, r2
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d10:	698a      	ldr	r2, [r1, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003d12:	69c8      	ldr	r0, [r1, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d14:	698b      	ldr	r3, [r1, #24]
  if (high1 != high2)
 8003d16:	fa1f fc82 	uxth.w	ip, r2
 8003d1a:	b29f      	uxth	r7, r3
 8003d1c:	45bc      	cmp	ip, r7
 8003d1e:	f000 810a 	beq.w	8003f36 <HAL_RTC_GetTime.part.0+0x232>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003d22:	69ca      	ldr	r2, [r1, #28]
 8003d24:	fa1f f882 	uxth.w	r8, r2
 8003d28:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003d2c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
  hours = counter_time / 3600U;
 8003d30:	4fa3      	ldr	r7, [pc, #652]	; (8003fc0 <HAL_RTC_GetTime.part.0+0x2bc>)
  if (hours >= 24U)
 8003d32:	48a4      	ldr	r0, [pc, #656]	; (8003fc4 <HAL_RTC_GetTime.part.0+0x2c0>)
  hours = counter_time / 3600U;
 8003d34:	fba7 3708 	umull	r3, r7, r7, r8
 8003d38:	0aff      	lsrs	r7, r7, #11
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003d3a:	fb02 8217 	mls	r2, r2, r7, r8
 8003d3e:	4ba2      	ldr	r3, [pc, #648]	; (8003fc8 <HAL_RTC_GetTime.part.0+0x2c4>)
  if (hours >= 24U)
 8003d40:	4580      	cmp	r8, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003d42:	fba3 c302 	umull	ip, r3, r3, r2
 8003d46:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8003d4a:	706b      	strb	r3, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003d4c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003d50:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8003d54:	70ab      	strb	r3, [r5, #2]
  if (hours >= 24U)
 8003d56:	f240 809a 	bls.w	8003e8e <HAL_RTC_GetTime.part.0+0x18a>
    sTime->Hours = (hours % 24U);
 8003d5a:	4b9c      	ldr	r3, [pc, #624]	; (8003fcc <HAL_RTC_GetTime.part.0+0x2c8>)
 8003d5c:	fba3 2307 	umull	r2, r3, r3, r7
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d66:	eba7 03c3 	sub.w	r3, r7, r3, lsl #3
 8003d6a:	702b      	strb	r3, [r5, #0]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003d6c:	6a0a      	ldr	r2, [r1, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003d6e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8003d70:	fa1f f983 	uxth.w	r9, r3
 8003d74:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003d78:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003d7c:	d005      	beq.n	8003d8a <HAL_RTC_GetTime.part.0+0x86>
 8003d7e:	45c1      	cmp	r9, r8
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003d80:	bf94      	ite	ls
 8003d82:	f04f 39ff 	movls.w	r9, #4294967295
      counter_alarm -= counter_time;
 8003d86:	eba9 0908 	subhi.w	r9, r9, r8
  tickstart = HAL_GetTick();
 8003d8a:	f7fd fe2b 	bl	80019e4 <HAL_GetTick>
 8003d8e:	4682      	mov	sl, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d90:	e007      	b.n	8003da2 <HAL_RTC_GetTime.part.0+0x9e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d92:	f7fd fe27 	bl	80019e4 <HAL_GetTick>
 8003d96:	eba0 000a 	sub.w	r0, r0, sl
 8003d9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d9e:	f200 80c1 	bhi.w	8003f24 <HAL_RTC_GetTime.part.0+0x220>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	0692      	lsls	r2, r2, #26
 8003da8:	d5f3      	bpl.n	8003d92 <HAL_RTC_GetTime.part.0+0x8e>
    days_elapsed = (hours / 24U);
 8003daa:	4a88      	ldr	r2, [pc, #544]	; (8003fcc <HAL_RTC_GetTime.part.0+0x2c8>)
 8003dac:	fba2 2707 	umull	r2, r7, r2, r7
    counter_time -= (days_elapsed * 24U * 3600U);
 8003db0:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <HAL_RTC_GetTime.part.0+0x2cc>)
    days_elapsed = (hours / 24U);
 8003db2:	093f      	lsrs	r7, r7, #4
    counter_time -= (days_elapsed * 24U * 3600U);
 8003db4:	fb02 8817 	mls	r8, r2, r7, r8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	f042 0210 	orr.w	r2, r2, #16
 8003dbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003dc0:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003dc4:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003dc6:	fa1f f288 	uxth.w	r2, r8
 8003dca:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	f022 0210 	bic.w	r2, r2, #16
 8003dd2:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003dd4:	f7fd fe06 	bl	80019e4 <HAL_GetTick>
 8003dd8:	4682      	mov	sl, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003dda:	e007      	b.n	8003dec <HAL_RTC_GetTime.part.0+0xe8>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ddc:	f7fd fe02 	bl	80019e4 <HAL_GetTick>
 8003de0:	eba0 000a 	sub.w	r0, r0, sl
 8003de4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003de8:	f200 809c 	bhi.w	8003f24 <HAL_RTC_GetTime.part.0+0x220>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	069b      	lsls	r3, r3, #26
 8003df2:	d5f3      	bpl.n	8003ddc <HAL_RTC_GetTime.part.0+0xd8>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003df4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003df8:	f000 808d 	beq.w	8003f16 <HAL_RTC_GetTime.part.0+0x212>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	eb08 0109 	add.w	r1, r8, r9
 8003e02:	f7ff ff4f 	bl	8003ca4 <RTC_WriteAlarmCounter>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f040 808c 	bne.w	8003f24 <HAL_RTC_GetTime.part.0+0x220>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003e0c:	2300      	movs	r3, #0
  year = hrtc->DateToUpdate.Year;
 8003e0e:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8003e10:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8003e12:	7ba2      	ldrb	r2, [r4, #14]
  if ((nYear % 100U) != 0U)
 8003e14:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8003fd4 <HAL_RTC_GetTime.part.0+0x2d0>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003e18:	2901      	cmp	r1, #1
 8003e1a:	d06a      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
 8003e1c:	2903      	cmp	r1, #3
 8003e1e:	d068      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
 8003e20:	2905      	cmp	r1, #5
 8003e22:	d066      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
 8003e24:	2907      	cmp	r1, #7
 8003e26:	d064      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
 8003e28:	2908      	cmp	r1, #8
 8003e2a:	d062      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003e2c:	290a      	cmp	r1, #10
 8003e2e:	d060      	beq.n	8003ef2 <HAL_RTC_GetTime.part.0+0x1ee>
 8003e30:	290c      	cmp	r1, #12
 8003e32:	f000 8085 	beq.w	8003f40 <HAL_RTC_GetTime.part.0+0x23c>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003e36:	2904      	cmp	r1, #4
 8003e38:	d077      	beq.n	8003f2a <HAL_RTC_GetTime.part.0+0x226>
 8003e3a:	2906      	cmp	r1, #6
 8003e3c:	d075      	beq.n	8003f2a <HAL_RTC_GetTime.part.0+0x226>
 8003e3e:	2909      	cmp	r1, #9
 8003e40:	d073      	beq.n	8003f2a <HAL_RTC_GetTime.part.0+0x226>
 8003e42:	290b      	cmp	r1, #11
 8003e44:	d071      	beq.n	8003f2a <HAL_RTC_GetTime.part.0+0x226>
 8003e46:	f103 0901 	add.w	r9, r3, #1
        if (RTC_IsLeapYear(year))
 8003e4a:	b283      	uxth	r3, r0
 8003e4c:	469c      	mov	ip, r3
  if ((nYear % 100U) != 0U)
 8003e4e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8003e52:	fbab a803 	umull	sl, r8, fp, r3
 8003e56:	ea4f 1a58 	mov.w	sl, r8, lsr #5
 8003e5a:	fb0e ca1a 	mls	sl, lr, sl, ip
  if ((nYear % 400U) == 0U)
 8003e5e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8003e62:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8003e66:	fb0e c818 	mls	r8, lr, r8, ip
    else if (month == 2U)
 8003e6a:	2902      	cmp	r1, #2
 8003e6c:	464b      	mov	r3, r9
  if ((nYear % 100U) != 0U)
 8003e6e:	fa1f fa8a 	uxth.w	sl, sl
  if ((nYear % 400U) == 0U)
 8003e72:	fa1f f888 	uxth.w	r8, r8
    else if (month == 2U)
 8003e76:	d140      	bne.n	8003efa <HAL_RTC_GetTime.part.0+0x1f6>
  if ((nYear % 4U) != 0U)
 8003e78:	f00c 0303 	and.w	r3, ip, #3
      if (day < 28U)
 8003e7c:	2a1b      	cmp	r2, #27
 8003e7e:	d86e      	bhi.n	8003f5e <HAL_RTC_GetTime.part.0+0x25a>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003e80:	454f      	cmp	r7, r9
        day++;
 8003e82:	f102 0201 	add.w	r2, r2, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8003e86:	d970      	bls.n	8003f6a <HAL_RTC_GetTime.part.0+0x266>
 8003e88:	f109 0901 	add.w	r9, r9, #1
    else if (month == 2U)
 8003e8c:	e7f6      	b.n	8003e7c <HAL_RTC_GetTime.part.0+0x178>
    sTime->Hours = hours;
 8003e8e:	702f      	strb	r7, [r5, #0]
  if (Format != RTC_FORMAT_BIN)
 8003e90:	b366      	cbz	r6, 8003eec <HAL_RTC_GetTime.part.0+0x1e8>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003e92:	782b      	ldrb	r3, [r5, #0]
  while (Value >= 10U)
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d909      	bls.n	8003eac <HAL_RTC_GetTime.part.0+0x1a8>
  uint32_t bcdhigh = 0U;
 8003e98:	2200      	movs	r2, #0
    Value -= 10U;
 8003e9a:	3b0a      	subs	r3, #10
 8003e9c:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 8003e9e:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003ea0:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 8003ea4:	d8f9      	bhi.n	8003e9a <HAL_RTC_GetTime.part.0+0x196>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ea6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003eaa:	b2db      	uxtb	r3, r3
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003eac:	786a      	ldrb	r2, [r5, #1]
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003eae:	702b      	strb	r3, [r5, #0]
  while (Value >= 10U)
 8003eb0:	2a09      	cmp	r2, #9
 8003eb2:	d909      	bls.n	8003ec8 <HAL_RTC_GetTime.part.0+0x1c4>
  uint32_t bcdhigh = 0U;
 8003eb4:	2300      	movs	r3, #0
    Value -= 10U;
 8003eb6:	3a0a      	subs	r2, #10
 8003eb8:	b2d2      	uxtb	r2, r2
  while (Value >= 10U)
 8003eba:	2a09      	cmp	r2, #9
    bcdhigh++;
 8003ebc:	f103 0301 	add.w	r3, r3, #1
  while (Value >= 10U)
 8003ec0:	d8f9      	bhi.n	8003eb6 <HAL_RTC_GetTime.part.0+0x1b2>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ec2:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8003ec6:	b2d2      	uxtb	r2, r2
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ec8:	78ab      	ldrb	r3, [r5, #2]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003eca:	706a      	strb	r2, [r5, #1]
  while (Value >= 10U)
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d909      	bls.n	8003ee4 <HAL_RTC_GetTime.part.0+0x1e0>
  uint32_t bcdhigh = 0U;
 8003ed0:	2200      	movs	r2, #0
    Value -= 10U;
 8003ed2:	3b0a      	subs	r3, #10
 8003ed4:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 8003ed6:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003ed8:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 8003edc:	d8f9      	bhi.n	8003ed2 <HAL_RTC_GetTime.part.0+0x1ce>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ede:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003ee2:	b2db      	uxtb	r3, r3
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ee4:	70ab      	strb	r3, [r5, #2]
  return HAL_OK;
 8003ee6:	2000      	movs	r0, #0
}
 8003ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return HAL_OK;
 8003eec:	4630      	mov	r0, r6
}
 8003eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (day < 31U)
 8003ef2:	2a1e      	cmp	r2, #30
 8003ef4:	d81b      	bhi.n	8003f2e <HAL_RTC_GetTime.part.0+0x22a>
        day++;
 8003ef6:	3201      	adds	r2, #1
 8003ef8:	3301      	adds	r3, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8003efa:	429f      	cmp	r7, r3
 8003efc:	d88c      	bhi.n	8003e18 <HAL_RTC_GetTime.part.0+0x114>
  hrtc->DateToUpdate.Month = month;
 8003efe:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8003f00:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8003f02:	b2c3      	uxtb	r3, r0
 8003f04:	73e3      	strb	r3, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8003f06:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8003f08:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003f0a:	f7ff fe8b 	bl	8003c24 <RTC_WeekDayNum>
 8003f0e:	7320      	strb	r0, [r4, #12]
  if (Format != RTC_FORMAT_BIN)
 8003f10:	2e00      	cmp	r6, #0
 8003f12:	d0eb      	beq.n	8003eec <HAL_RTC_GetTime.part.0+0x1e8>
 8003f14:	e7bd      	b.n	8003e92 <HAL_RTC_GetTime.part.0+0x18e>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f16:	4649      	mov	r1, r9
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7ff fec3 	bl	8003ca4 <RTC_WriteAlarmCounter>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f af74 	beq.w	8003e0c <HAL_RTC_GetTime.part.0+0x108>
      return HAL_ERROR;
 8003f24:	2001      	movs	r0, #1
}
 8003f26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (day < 30U)
 8003f2a:	2a1d      	cmp	r2, #29
 8003f2c:	d9e3      	bls.n	8003ef6 <HAL_RTC_GetTime.part.0+0x1f2>
        day = 1U;
 8003f2e:	2201      	movs	r2, #1
        month++;
 8003f30:	3101      	adds	r1, #1
        day = 1U;
 8003f32:	3301      	adds	r3, #1
 8003f34:	e7e1      	b.n	8003efa <HAL_RTC_GetTime.part.0+0x1f6>
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003f36:	fa1f f880 	uxth.w	r8, r0
 8003f3a:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 8003f3e:	e6f5      	b.n	8003d2c <HAL_RTC_GetTime.part.0+0x28>
      if (day < 31U)
 8003f40:	2a1e      	cmp	r2, #30
 8003f42:	d9d8      	bls.n	8003ef6 <HAL_RTC_GetTime.part.0+0x1f2>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f44:	3301      	adds	r3, #1
 8003f46:	429f      	cmp	r7, r3
          year++;
 8003f48:	f100 0001 	add.w	r0, r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f4c:	d903      	bls.n	8003f56 <HAL_RTC_GetTime.part.0+0x252>
 8003f4e:	2202      	movs	r2, #2
          month = 1U;
 8003f50:	2101      	movs	r1, #1
 8003f52:	3301      	adds	r3, #1
 8003f54:	e7d1      	b.n	8003efa <HAL_RTC_GetTime.part.0+0x1f6>
  hrtc->DateToUpdate.Year = year;
 8003f56:	2201      	movs	r2, #1
 8003f58:	b2c3      	uxtb	r3, r0
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	e7d2      	b.n	8003f04 <HAL_RTC_GetTime.part.0+0x200>
      else if (day == 28U)
 8003f5e:	2a1c      	cmp	r2, #28
 8003f60:	d007      	beq.n	8003f72 <HAL_RTC_GetTime.part.0+0x26e>
      else if (day == 29U)
 8003f62:	2a1d      	cmp	r2, #29
 8003f64:	d010      	beq.n	8003f88 <HAL_RTC_GetTime.part.0+0x284>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f66:	454f      	cmp	r7, r9
 8003f68:	d88e      	bhi.n	8003e88 <HAL_RTC_GetTime.part.0+0x184>
  hrtc->DateToUpdate.Date = day;
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8003f6e:	b2c3      	uxtb	r3, r0
 8003f70:	e7c8      	b.n	8003f04 <HAL_RTC_GetTime.part.0+0x200>
  if ((nYear % 4U) != 0U)
 8003f72:	b9ab      	cbnz	r3, 8003fa0 <HAL_RTC_GetTime.part.0+0x29c>
  if ((nYear % 100U) != 0U)
 8003f74:	f1ba 0f00 	cmp.w	sl, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RTC_GetTime.part.0+0x292>
  if ((nYear % 400U) == 0U)
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_RTC_GetTime.part.0+0x29c>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f80:	454f      	cmp	r7, r9
 8003f82:	d914      	bls.n	8003fae <HAL_RTC_GetTime.part.0+0x2aa>
 8003f84:	f109 0901 	add.w	r9, r9, #1
      if (day < 28U)
 8003f88:	464b      	mov	r3, r9
  for (loop = 0U; loop < DayElapsed; loop++)
 8003f8a:	429f      	cmp	r7, r3
 8003f8c:	d913      	bls.n	8003fb6 <HAL_RTC_GetTime.part.0+0x2b2>
 8003f8e:	2202      	movs	r2, #2
 8003f90:	2103      	movs	r1, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	e7b1      	b.n	8003efa <HAL_RTC_GetTime.part.0+0x1f6>
 8003f96:	454f      	cmp	r7, r9
 8003f98:	d909      	bls.n	8003fae <HAL_RTC_GetTime.part.0+0x2aa>
 8003f9a:	f109 0301 	add.w	r3, r9, #1
      else if (day == 29U)
 8003f9e:	e7f4      	b.n	8003f8a <HAL_RTC_GetTime.part.0+0x286>
  for (loop = 0U; loop < DayElapsed; loop++)
 8003fa0:	454f      	cmp	r7, r9
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RTC_GetTime.part.0+0x2b2>
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	2103      	movs	r1, #3
        day++;
 8003fa8:	f109 0301 	add.w	r3, r9, #1
 8003fac:	e7a5      	b.n	8003efa <HAL_RTC_GetTime.part.0+0x1f6>
  hrtc->DateToUpdate.Year = year;
 8003fae:	221d      	movs	r2, #29
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	b2c3      	uxtb	r3, r0
 8003fb4:	e7a6      	b.n	8003f04 <HAL_RTC_GetTime.part.0+0x200>
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2103      	movs	r1, #3
 8003fba:	b2c3      	uxtb	r3, r0
 8003fbc:	e7a2      	b.n	8003f04 <HAL_RTC_GetTime.part.0+0x200>
 8003fbe:	bf00      	nop
 8003fc0:	91a2b3c5 	.word	0x91a2b3c5
 8003fc4:	0001517f 	.word	0x0001517f
 8003fc8:	88888889 	.word	0x88888889
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	00015180 	.word	0x00015180
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d075      	beq.n	80040c8 <HAL_RTC_Init+0xf0>
{
 8003fdc:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fde:	7c43      	ldrb	r3, [r0, #17]
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d062      	beq.n	80040b0 <HAL_RTC_Init+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fea:	2302      	movs	r3, #2
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003fec:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fee:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003ff0:	6853      	ldr	r3, [r2, #4]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8003ff8:	f7fd fcf4 	bl	80019e4 <HAL_GetTick>
 8003ffc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ffe:	e005      	b.n	800400c <HAL_RTC_Init+0x34>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004000:	f7fd fcf0 	bl	80019e4 <HAL_GetTick>
 8004004:	1b40      	subs	r0, r0, r5
 8004006:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800400a:	d84d      	bhi.n	80040a8 <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0718      	lsls	r0, r3, #28
 8004012:	d5f5      	bpl.n	8004000 <HAL_RTC_Init+0x28>
  tickstart = HAL_GetTick();
 8004014:	f7fd fce6 	bl	80019e4 <HAL_GetTick>
 8004018:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800401a:	e005      	b.n	8004028 <HAL_RTC_Init+0x50>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800401c:	f7fd fce2 	bl	80019e4 <HAL_GetTick>
 8004020:	1b40      	subs	r0, r0, r5
 8004022:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004026:	d83f      	bhi.n	80040a8 <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	0691      	lsls	r1, r2, #26
 800402e:	d5f5      	bpl.n	800401c <HAL_RTC_Init+0x44>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004030:	6859      	ldr	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004032:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004034:	f041 0110 	orr.w	r1, r1, #16
 8004038:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	f021 0107 	bic.w	r1, r1, #7
 8004040:	6059      	str	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004042:	b120      	cbz	r0, 800404e <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004044:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_RTC_Init+0xf4>)
 8004046:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	630a      	str	r2, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800404e:	491f      	ldr	r1, [pc, #124]	; (80040cc <HAL_RTC_Init+0xf4>)
 8004050:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004052:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 8004056:	4302      	orrs	r2, r0
 8004058:	62ca      	str	r2, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800405a:	6861      	ldr	r1, [r4, #4]
 800405c:	1c4a      	adds	r2, r1, #1
 800405e:	d02b      	beq.n	80040b8 <HAL_RTC_Init+0xe0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004060:	6898      	ldr	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004062:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004064:	f020 000f 	bic.w	r0, r0, #15
 8004068:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 800406c:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	0c12      	lsrs	r2, r2, #16
 8004072:	0412      	lsls	r2, r2, #16
 8004074:	432a      	orrs	r2, r5
 8004076:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8004080:	f7fd fcb0 	bl	80019e4 <HAL_GetTick>
 8004084:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004086:	e005      	b.n	8004094 <HAL_RTC_Init+0xbc>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004088:	f7fd fcac 	bl	80019e4 <HAL_GetTick>
 800408c:	1b40      	subs	r0, r0, r5
 800408e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004092:	d809      	bhi.n	80040a8 <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	069b      	lsls	r3, r3, #26
 800409a:	d5f5      	bpl.n	8004088 <HAL_RTC_Init+0xb0>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800409c:	2301      	movs	r3, #1
 800409e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80040a0:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80040a2:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80040a4:	2000      	movs	r0, #0
}
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040a8:	2304      	movs	r3, #4
 80040aa:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
}
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80040b0:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80040b2:	f7fd fb59 	bl	8001768 <HAL_RTC_MspInit>
 80040b6:	e798      	b.n	8003fea <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7ff fd39 	bl	8003b30 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0f2      	beq.n	80040a8 <HAL_RTC_Init+0xd0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80040c2:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 80040c4:	1e41      	subs	r1, r0, #1
 80040c6:	e7cb      	b.n	8004060 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 80040c8:	2001      	movs	r0, #1
}
 80040ca:	4770      	bx	lr
 80040cc:	40006c00 	.word	0x40006c00

080040d0 <HAL_RTC_SetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f000 8085 	beq.w	80041e0 <HAL_RTC_SetTime+0x110>
 80040d6:	2900      	cmp	r1, #0
 80040d8:	f000 8082 	beq.w	80041e0 <HAL_RTC_SetTime+0x110>
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 80040de:	7c03      	ldrb	r3, [r0, #16]
 80040e0:	4604      	mov	r4, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d07e      	beq.n	80041e4 <HAL_RTC_SetTime+0x114>
 80040e6:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040e8:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80040ea:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ec:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d05b      	beq.n	80041aa <HAL_RTC_SetTime+0xda>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80040f2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80040f6:	784a      	ldrb	r2, [r1, #1]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80040f8:	7808      	ldrb	r0, [r1, #0]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80040fa:	0913      	lsrs	r3, r2, #4
 80040fc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004100:	f002 030f 	and.w	r3, r2, #15
 8004104:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004108:	b2db      	uxtb	r3, r3
 800410a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800410e:	009d      	lsls	r5, r3, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004110:	0903      	lsrs	r3, r0, #4
 8004112:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004116:	f000 030f 	and.w	r3, r0, #15
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800411a:	7889      	ldrb	r1, [r1, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 800411c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004120:	b2db      	uxtb	r3, r3
 8004122:	fb06 5503 	mla	r5, r6, r3, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004126:	090b      	lsrs	r3, r1, #4
 8004128:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800412c:	f001 030f 	and.w	r3, r1, #15
 8004130:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004134:	b2db      	uxtb	r3, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004136:	441d      	add	r5, r3
  tickstart = HAL_GetTick();
 8004138:	f7fd fc54 	bl	80019e4 <HAL_GetTick>
 800413c:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800413e:	e005      	b.n	800414c <HAL_RTC_SetTime+0x7c>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004140:	f7fd fc50 	bl	80019e4 <HAL_GetTick>
 8004144:	1b83      	subs	r3, r0, r6
 8004146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414a:	d843      	bhi.n	80041d4 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	0691      	lsls	r1, r2, #26
 8004152:	d5f5      	bpl.n	8004140 <HAL_RTC_SetTime+0x70>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004154:	6859      	ldr	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004156:	0c2a      	lsrs	r2, r5, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004158:	f041 0110 	orr.w	r1, r1, #16
 800415c:	6059      	str	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800415e:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004160:	b2aa      	uxth	r2, r5
 8004162:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	f022 0210 	bic.w	r2, r2, #16
 800416a:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 800416c:	f7fd fc3a 	bl	80019e4 <HAL_GetTick>
 8004170:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004172:	e005      	b.n	8004180 <HAL_RTC_SetTime+0xb0>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004174:	f7fd fc36 	bl	80019e4 <HAL_GetTick>
 8004178:	1b80      	subs	r0, r0, r6
 800417a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800417e:	d829      	bhi.n	80041d4 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	0692      	lsls	r2, r2, #26
 8004186:	d5f5      	bpl.n	8004174 <HAL_RTC_SetTime+0xa4>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	f022 0205 	bic.w	r2, r2, #5
 800418e:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004190:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004192:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8004194:	b289      	uxth	r1, r1
 8004196:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 800419a:	428d      	cmp	r5, r1
 800419c:	d811      	bhi.n	80041c2 <HAL_RTC_SetTime+0xf2>
    __HAL_UNLOCK(hrtc);
 800419e:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 80041a0:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 80041a2:	7423      	strb	r3, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 80041a4:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 80041a6:	4618      	mov	r0, r3
}
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041aa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 80041ae:	784b      	ldrb	r3, [r1, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041b0:	780a      	ldrb	r2, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80041b2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80041b6:	009d      	lsls	r5, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041b8:	fb00 5502 	mla	r5, r0, r2, r5
                              ((uint32_t)sTime->Seconds));
 80041bc:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041be:	441d      	add	r5, r3
 80041c0:	e7ba      	b.n	8004138 <HAL_RTC_SetTime+0x68>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80041c2:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 80041c6:	4620      	mov	r0, r4
 80041c8:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80041cc:	f7ff fd6a 	bl	8003ca4 <RTC_WriteAlarmCounter>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0e4      	beq.n	800419e <HAL_RTC_SetTime+0xce>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80041d4:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 80041d6:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 80041d8:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80041da:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
}
 80041de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
}
 80041e2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80041e4:	2002      	movs	r0, #2
}
 80041e6:	bd70      	pop	{r4, r5, r6, pc}

080041e8 <HAL_RTC_GetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 80041e8:	b158      	cbz	r0, 8004202 <HAL_RTC_GetTime+0x1a>
{
 80041ea:	b410      	push	{r4}
  if ((hrtc == NULL) || (sTime == NULL))
 80041ec:	b119      	cbz	r1, 80041f6 <HAL_RTC_GetTime+0xe>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80041ee:	6803      	ldr	r3, [r0, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	075b      	lsls	r3, r3, #29
 80041f4:	d502      	bpl.n	80041fc <HAL_RTC_GetTime+0x14>
}
 80041f6:	2001      	movs	r0, #1
 80041f8:	bc10      	pop	{r4}
 80041fa:	4770      	bx	lr
 80041fc:	bc10      	pop	{r4}
 80041fe:	f7ff bd81 	b.w	8003d04 <HAL_RTC_GetTime.part.0>
 8004202:	2001      	movs	r0, #1
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop

08004208 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8004208:	2800      	cmp	r0, #0
 800420a:	f000 8099 	beq.w	8004340 <HAL_RTC_SetDate+0x138>
{
 800420e:	b570      	push	{r4, r5, r6, lr}
 8004210:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8004212:	2900      	cmp	r1, #0
 8004214:	f000 8096 	beq.w	8004344 <HAL_RTC_SetDate+0x13c>
  __HAL_LOCK(hrtc);
 8004218:	7c03      	ldrb	r3, [r0, #16]
 800421a:	4604      	mov	r4, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	f000 8093 	beq.w	8004348 <HAL_RTC_SetDate+0x140>
 8004222:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004224:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8004226:	7401      	strb	r1, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004228:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800422a:	2a00      	cmp	r2, #0
 800422c:	d036      	beq.n	800429c <HAL_RTC_SetDate+0x94>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800422e:	78eb      	ldrb	r3, [r5, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004230:	0918      	lsrs	r0, r3, #4
 8004232:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800423e:	b2c0      	uxtb	r0, r0
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004240:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004242:	786b      	ldrb	r3, [r5, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004244:	0919      	lsrs	r1, r3, #4
 8004246:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800424a:	f003 010f 	and.w	r1, r3, #15
 800424e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8004252:	b2c9      	uxtb	r1, r1
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004254:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004256:	78ab      	ldrb	r3, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004258:	091a      	lsrs	r2, r3, #4
 800425a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8004266:	b2d2      	uxtb	r2, r2
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004268:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800426a:	f7ff fcdb 	bl	8003c24 <RTC_WeekDayNum>
 800426e:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004270:	7028      	strb	r0, [r5, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6999      	ldr	r1, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004276:	69dd      	ldr	r5, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004278:	699a      	ldr	r2, [r3, #24]
  if (high1 != high2)
 800427a:	b28e      	uxth	r6, r1
 800427c:	b290      	uxth	r0, r2
 800427e:	4286      	cmp	r6, r0
 8004280:	d013      	beq.n	80042aa <HAL_RTC_SetDate+0xa2>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004282:	69dd      	ldr	r5, [r3, #28]
  if (hours > 24U)
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004286:	b2ad      	uxth	r5, r5
 8004288:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  if (hours > 24U)
 800428c:	429d      	cmp	r5, r3
 800428e:	d812      	bhi.n	80042b6 <HAL_RTC_SetDate+0xae>
  __HAL_UNLOCK(hrtc);
 8004290:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8004292:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8004294:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_READY ;
 8004296:	7462      	strb	r2, [r4, #17]
  return HAL_OK;
 8004298:	4618      	mov	r0, r3
}
 800429a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = sDate->Year;
 800429c:	78e8      	ldrb	r0, [r5, #3]
 800429e:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80042a0:	7869      	ldrb	r1, [r5, #1]
 80042a2:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80042a4:	78aa      	ldrb	r2, [r5, #2]
 80042a6:	73a2      	strb	r2, [r4, #14]
 80042a8:	e7df      	b.n	800426a <HAL_RTC_SetDate+0x62>
  if (hours > 24U)
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 80042ac:	b2ad      	uxth	r5, r5
 80042ae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  if (hours > 24U)
 80042b2:	429d      	cmp	r5, r3
 80042b4:	d9ec      	bls.n	8004290 <HAL_RTC_SetDate+0x88>
  tickstart = HAL_GetTick();
 80042b6:	f7fd fb95 	bl	80019e4 <HAL_GetTick>
 80042ba:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042bc:	e005      	b.n	80042ca <HAL_RTC_SetDate+0xc2>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042be:	f7fd fb91 	bl	80019e4 <HAL_GetTick>
 80042c2:	1b80      	subs	r0, r0, r6
 80042c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042c8:	d834      	bhi.n	8004334 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	0691      	lsls	r1, r2, #26
 80042d0:	d5f5      	bpl.n	80042be <HAL_RTC_SetDate+0xb6>
 80042d2:	4e1f      	ldr	r6, [pc, #124]	; (8004350 <HAL_RTC_SetDate+0x148>)
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <HAL_RTC_SetDate+0x14c>)
 80042d6:	fba6 1605 	umull	r1, r6, r6, r5
 80042da:	0c36      	lsrs	r6, r6, #16
 80042dc:	fb02 5616 	mls	r6, r2, r6, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e0:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80042e2:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e4:	f042 0210 	orr.w	r2, r2, #16
 80042e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80042ea:	b2b2      	uxth	r2, r6
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80042ec:	6199      	str	r1, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80042ee:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	f022 0210 	bic.w	r2, r2, #16
 80042f6:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 80042f8:	f7fd fb74 	bl	80019e4 <HAL_GetTick>
 80042fc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042fe:	e005      	b.n	800430c <HAL_RTC_SetDate+0x104>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004300:	f7fd fb70 	bl	80019e4 <HAL_GetTick>
 8004304:	1b40      	subs	r0, r0, r5
 8004306:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800430a:	d813      	bhi.n	8004334 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	0692      	lsls	r2, r2, #26
 8004312:	d5f5      	bpl.n	8004300 <HAL_RTC_SetDate+0xf8>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004314:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004316:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8004318:	b289      	uxth	r1, r1
 800431a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 800431e:	428e      	cmp	r6, r1
 8004320:	d9b6      	bls.n	8004290 <HAL_RTC_SetDate+0x88>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004322:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8004326:	4620      	mov	r0, r4
 8004328:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800432c:	f7ff fcba 	bl	8003ca4 <RTC_WriteAlarmCounter>
 8004330:	2800      	cmp	r0, #0
 8004332:	d0ad      	beq.n	8004290 <HAL_RTC_SetDate+0x88>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004334:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8004336:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004338:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800433a:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 800433c:	2001      	movs	r0, #1
}
 800433e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004340:	2001      	movs	r0, #1
}
 8004342:	4770      	bx	lr
    return HAL_ERROR;
 8004344:	2001      	movs	r0, #1
}
 8004346:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8004348:	2002      	movs	r0, #2
}
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	00015f8f 	.word	0x00015f8f
 8004350:	c22e4507 	.word	0xc22e4507
 8004354:	00015180 	.word	0x00015180

08004358 <HAL_RTC_GetDate>:
  RTC_TimeTypeDef stime = {0U};
 8004358:	2300      	movs	r3, #0
{
 800435a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435c:	b083      	sub	sp, #12
  RTC_TimeTypeDef stime = {0U};
 800435e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004362:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 8004366:	b138      	cbz	r0, 8004378 <HAL_RTC_GetDate+0x20>
 8004368:	460c      	mov	r4, r1
 800436a:	b129      	cbz	r1, 8004378 <HAL_RTC_GetDate+0x20>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800436c:	6803      	ldr	r3, [r0, #0]
 800436e:	4606      	mov	r6, r0
 8004370:	685d      	ldr	r5, [r3, #4]
 8004372:	f015 0504 	ands.w	r5, r5, #4
 8004376:	d002      	beq.n	800437e <HAL_RTC_GetDate+0x26>
    return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
}
 800437a:	b003      	add	sp, #12
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437e:	4617      	mov	r7, r2
 8004380:	a901      	add	r1, sp, #4
 8004382:	462a      	mov	r2, r5
 8004384:	f7ff fcbe 	bl	8003d04 <HAL_RTC_GetTime.part.0>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004388:	2800      	cmp	r0, #0
 800438a:	d1f5      	bne.n	8004378 <HAL_RTC_GetDate+0x20>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800438c:	7b33      	ldrb	r3, [r6, #12]
 800438e:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004390:	f896 e00f 	ldrb.w	lr, [r6, #15]
 8004394:	f884 e003 	strb.w	lr, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004398:	f896 c00d 	ldrb.w	ip, [r6, #13]
 800439c:	f884 c001 	strb.w	ip, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80043a0:	7bb3      	ldrb	r3, [r6, #14]
 80043a2:	70a3      	strb	r3, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 80043a4:	2f00      	cmp	r7, #0
 80043a6:	d0e8      	beq.n	800437a <HAL_RTC_GetDate+0x22>
  while (Value >= 10U)
 80043a8:	f1be 0f09 	cmp.w	lr, #9
 80043ac:	d90d      	bls.n	80043ca <HAL_RTC_GetDate+0x72>
  uint32_t bcdhigh = 0U;
 80043ae:	4602      	mov	r2, r0
    Value -= 10U;
 80043b0:	f1ae 0e0a 	sub.w	lr, lr, #10
 80043b4:	fa5f fe8e 	uxtb.w	lr, lr
  while (Value >= 10U)
 80043b8:	f1be 0f09 	cmp.w	lr, #9
    bcdhigh++;
 80043bc:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 80043c0:	d8f6      	bhi.n	80043b0 <HAL_RTC_GetDate+0x58>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 80043c2:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 80043c6:	fa5f fe8e 	uxtb.w	lr, lr
  while (Value >= 10U)
 80043ca:	f1bc 0f09 	cmp.w	ip, #9
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80043ce:	f884 e003 	strb.w	lr, [r4, #3]
  while (Value >= 10U)
 80043d2:	d90d      	bls.n	80043f0 <HAL_RTC_GetDate+0x98>
  uint32_t bcdhigh = 0U;
 80043d4:	2200      	movs	r2, #0
    Value -= 10U;
 80043d6:	f1ac 0c0a 	sub.w	ip, ip, #10
 80043da:	fa5f fc8c 	uxtb.w	ip, ip
  while (Value >= 10U)
 80043de:	f1bc 0f09 	cmp.w	ip, #9
    bcdhigh++;
 80043e2:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 80043e6:	d8f6      	bhi.n	80043d6 <HAL_RTC_GetDate+0x7e>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 80043e8:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 80043ec:	fa5f fc8c 	uxtb.w	ip, ip
  while (Value >= 10U)
 80043f0:	2b09      	cmp	r3, #9
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80043f2:	f884 c001 	strb.w	ip, [r4, #1]
  while (Value >= 10U)
 80043f6:	d908      	bls.n	800440a <HAL_RTC_GetDate+0xb2>
    Value -= 10U;
 80043f8:	3b0a      	subs	r3, #10
 80043fa:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 80043fc:	2b09      	cmp	r3, #9
    bcdhigh++;
 80043fe:	f105 0501 	add.w	r5, r5, #1
  while (Value >= 10U)
 8004402:	d8f9      	bhi.n	80043f8 <HAL_RTC_GetDate+0xa0>
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004404:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004408:	b2db      	uxtb	r3, r3
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800440a:	70a3      	strb	r3, [r4, #2]
}
 800440c:	b003      	add	sp, #12
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004410 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004414:	461e      	mov	r6, r3
 8004416:	4614      	mov	r4, r2
 8004418:	b082      	sub	sp, #8
 800441a:	460d      	mov	r5, r1
 800441c:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800441e:	f7fd fae1 	bl	80019e4 <HAL_GetTick>
 8004422:	4426      	add	r6, r4
 8004424:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8004426:	f7fd fadd 	bl	80019e4 <HAL_GetTick>
 800442a:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004434:	fb06 f303 	mul.w	r3, r6, r3
 8004438:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	e001      	b.n	8004442 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800443e:	1c63      	adds	r3, r4, #1
 8004440:	d107      	bne.n	8004452 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	6893      	ldr	r3, [r2, #8]
 8004444:	ea35 0303 	bics.w	r3, r5, r3
 8004448:	d0f9      	beq.n	800443e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 800444a:	2000      	movs	r0, #0
}
 800444c:	b002      	add	sp, #8
 800444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004452:	f7fd fac7 	bl	80019e4 <HAL_GetTick>
 8004456:	eba0 0308 	sub.w	r3, r0, r8
 800445a:	42b3      	cmp	r3, r6
 800445c:	d207      	bcs.n	800446e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
      if(count == 0U)
 800445e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004460:	2b00      	cmp	r3, #0
      count--;
 8004462:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004464:	bf08      	it	eq
 8004466:	2600      	moveq	r6, #0
      count--;
 8004468:	3b01      	subs	r3, #1
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	e7e5      	b.n	800443a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004472:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800447c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447e:	d014      	beq.n	80044aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004486:	d007      	beq.n	8004498 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 8004488:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800448a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800448c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800448e:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004492:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8004496:	e7d9      	b.n	800444c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e7ee      	b.n	8004488 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80044b0:	d002      	beq.n	80044b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80044b6:	d1e3      	bne.n	8004480 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e7de      	b.n	8004480 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80044c2:	bf00      	nop
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d058      	beq.n	800457e <HAL_SPI_Init+0xb6>
{
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044d0:	4604      	mov	r4, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d044      	beq.n	8004560 <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80044de:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	d03f      	beq.n	800456c <HAL_SPI_Init+0xa4>
 80044ec:	469c      	mov	ip, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ee:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80044f2:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 80044f4:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044f8:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fa:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80044fe:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004502:	4313      	orrs	r3, r2
 8004504:	68e2      	ldr	r2, [r4, #12]
 8004506:	69a0      	ldr	r0, [r4, #24]
 8004508:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800450c:	4313      	orrs	r3, r2
 800450e:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004510:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004514:	4032      	ands	r2, r6
 8004516:	4313      	orrs	r3, r2
 8004518:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 800451a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451c:	ea02 020e 	and.w	r2, r2, lr
 8004520:	431a      	orrs	r2, r3
 8004522:	69e3      	ldr	r3, [r4, #28]
 8004524:	6a26      	ldr	r6, [r4, #32]
 8004526:	f003 0738 	and.w	r7, r3, #56	; 0x38
 800452a:	f400 7300 	and.w	r3, r0, #512	; 0x200
 800452e:	4313      	orrs	r3, r2
 8004530:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8004534:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004536:	433b      	orrs	r3, r7
 8004538:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800453a:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800453c:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004540:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800454c:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800454e:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8004550:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004556:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004558:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800455a:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 800455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004560:	6842      	ldr	r2, [r0, #4]
 8004562:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004566:	d0b9      	beq.n	80044dc <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004568:	61c3      	str	r3, [r0, #28]
 800456a:	e7b7      	b.n	80044dc <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 800456c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800456e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004572:	f7fd f919 	bl	80017a8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004578:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 800457c:	e7b7      	b.n	80044ee <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <HAL_SPI_Transmit>:
{
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800458a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800458e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004590:	2b01      	cmp	r3, #1
 8004592:	d05e      	beq.n	8004652 <HAL_SPI_Transmit+0xce>
 8004594:	2301      	movs	r3, #1
 8004596:	4604      	mov	r4, r0
 8004598:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800459c:	4688      	mov	r8, r1
 800459e:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 80045a0:	f7fd fa20 	bl	80019e4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80045a4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80045a8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	b2d8      	uxtb	r0, r3
 80045ae:	d009      	beq.n	80045c4 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80045b0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80045b2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80045b4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80045b6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80045be:	b002      	add	sp, #8
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80045c4:	f1b8 0f00 	cmp.w	r8, #0
 80045c8:	d0f3      	beq.n	80045b2 <HAL_SPI_Transmit+0x2e>
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d0f1      	beq.n	80045b2 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ce:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045d0:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045d4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 80045d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045da:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80045dc:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 80045de:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045e0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 80045e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045e6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80045ee:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80045f0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	d059      	beq.n	80046a8 <HAL_SPI_Transmit+0x124>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	0652      	lsls	r2, r2, #25
 80045f8:	d403      	bmi.n	8004602 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004600:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004602:	68e2      	ldr	r2, [r4, #12]
 8004604:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004608:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800460a:	d026      	beq.n	800465a <HAL_SPI_Transmit+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460c:	2a00      	cmp	r2, #0
 800460e:	d054      	beq.n	80046ba <HAL_SPI_Transmit+0x136>
 8004610:	2f01      	cmp	r7, #1
 8004612:	d052      	beq.n	80046ba <HAL_SPI_Transmit+0x136>
    while (hspi->TxXferCount > 0U)
 8004614:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004616:	b29b      	uxth	r3, r3
 8004618:	b973      	cbnz	r3, 8004638 <HAL_SPI_Transmit+0xb4>
 800461a:	e05c      	b.n	80046d6 <HAL_SPI_Transmit+0x152>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800461c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004622:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004624:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004626:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004628:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 800462a:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800462c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800462e:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004630:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004632:	b289      	uxth	r1, r1
 8004634:	2900      	cmp	r1, #0
 8004636:	d04e      	beq.n	80046d6 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	0792      	lsls	r2, r2, #30
 800463e:	d4ed      	bmi.n	800461c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004640:	f7fd f9d0 	bl	80019e4 <HAL_GetTick>
 8004644:	1b80      	subs	r0, r0, r6
 8004646:	42a8      	cmp	r0, r5
 8004648:	d342      	bcc.n	80046d0 <HAL_SPI_Transmit+0x14c>
 800464a:	1c6b      	adds	r3, r5, #1
 800464c:	d0f0      	beq.n	8004630 <HAL_SPI_Transmit+0xac>
          errorcode = HAL_TIMEOUT;
 800464e:	2003      	movs	r0, #3
 8004650:	e7af      	b.n	80045b2 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8004652:	2002      	movs	r0, #2
}
 8004654:	b002      	add	sp, #8
 8004656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465a:	2a00      	cmp	r2, #0
 800465c:	d155      	bne.n	800470a <HAL_SPI_Transmit+0x186>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465e:	4641      	mov	r1, r8
 8004660:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004664:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004666:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800466a:	3a01      	subs	r2, #1
 800466c:	b292      	uxth	r2, r2
 800466e:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004670:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004672:	b292      	uxth	r2, r2
 8004674:	b96a      	cbnz	r2, 8004692 <HAL_SPI_Transmit+0x10e>
 8004676:	e02e      	b.n	80046d6 <HAL_SPI_Transmit+0x152>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004678:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800467a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800467e:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8004680:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004682:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004684:	3b01      	subs	r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800468a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	b313      	cbz	r3, 80046d6 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	0790      	lsls	r0, r2, #30
 8004696:	d4ef      	bmi.n	8004678 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004698:	f7fd f9a4 	bl	80019e4 <HAL_GetTick>
 800469c:	1b80      	subs	r0, r0, r6
 800469e:	42a8      	cmp	r0, r5
 80046a0:	d336      	bcc.n	8004710 <HAL_SPI_Transmit+0x18c>
 80046a2:	1c69      	adds	r1, r5, #1
 80046a4:	d0f1      	beq.n	800468a <HAL_SPI_Transmit+0x106>
 80046a6:	e7d2      	b.n	800464e <HAL_SPI_Transmit+0xca>
    __HAL_SPI_DISABLE(hspi);
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e79c      	b.n	80045f4 <HAL_SPI_Transmit+0x70>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ba:	f898 2000 	ldrb.w	r2, [r8]
 80046be:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80046c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80046c4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80046c8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ca:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80046cc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80046ce:	e7a1      	b.n	8004614 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d1ad      	bne.n	8004630 <HAL_SPI_Transmit+0xac>
 80046d4:	e7bb      	b.n	800464e <HAL_SPI_Transmit+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d6:	4633      	mov	r3, r6
 80046d8:	462a      	mov	r2, r5
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	4620      	mov	r0, r4
 80046de:	f7ff fe97 	bl	8004410 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80046e2:	b120      	cbz	r0, 80046ee <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e4:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046e8:	4313      	orrs	r3, r2
 80046ea:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ec:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ee:	68a3      	ldr	r3, [r4, #8]
 80046f0:	b933      	cbnz	r3, 8004700 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	68d3      	ldr	r3, [r2, #12]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	6893      	ldr	r3, [r2, #8]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004700:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004702:	3800      	subs	r0, #0
 8004704:	bf18      	it	ne
 8004706:	2001      	movne	r0, #1
error:
 8004708:	e753      	b.n	80045b2 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470a:	2f01      	cmp	r7, #1
 800470c:	d1b0      	bne.n	8004670 <HAL_SPI_Transmit+0xec>
 800470e:	e7a6      	b.n	800465e <HAL_SPI_Transmit+0xda>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004710:	2d00      	cmp	r5, #0
 8004712:	d1ba      	bne.n	800468a <HAL_SPI_Transmit+0x106>
 8004714:	e79b      	b.n	800464e <HAL_SPI_Transmit+0xca>
 8004716:	bf00      	nop

08004718 <HAL_SPI_TransmitReceive>:
{
 8004718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800471e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8004722:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004724:	2801      	cmp	r0, #1
{
 8004726:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004728:	f000 8089 	beq.w	800483e <HAL_SPI_TransmitReceive+0x126>
 800472c:	4698      	mov	r8, r3
 800472e:	2301      	movs	r3, #1
 8004730:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004734:	468a      	mov	sl, r1
 8004736:	4691      	mov	r9, r2
 8004738:	f7fd f954 	bl	80019e4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800473c:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004740:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004742:	2f01      	cmp	r7, #1
  tmp_mode            = hspi->Init.Mode;
 8004744:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 8004746:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004748:	d011      	beq.n	800476e <HAL_SPI_TransmitReceive+0x56>
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d009      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004750:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004752:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004754:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004756:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800475a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800475e:	b002      	add	sp, #8
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004764:	68a2      	ldr	r2, [r4, #8]
 8004766:	2a00      	cmp	r2, #0
 8004768:	d1f2      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x38>
 800476a:	2904      	cmp	r1, #4
 800476c:	d1f0      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800476e:	f1ba 0f00 	cmp.w	sl, #0
 8004772:	d068      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x12e>
 8004774:	f1b9 0f00 	cmp.w	r9, #0
 8004778:	d065      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x12e>
 800477a:	f1b8 0f00 	cmp.w	r8, #0
 800477e:	d062      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x12e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004780:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004784:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004786:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004788:	bf1c      	itt	ne
 800478a:	2205      	movne	r2, #5
 800478c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004790:	2200      	movs	r2, #0
 8004792:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8004794:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004798:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 800479c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a0:	6802      	ldr	r2, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047a2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a6:	0657      	lsls	r7, r2, #25
  hspi->RxXferSize  = Size;
 80047a8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047ac:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047b0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b4:	d403      	bmi.n	80047be <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 80047b6:	6802      	ldr	r2, [r0, #0]
 80047b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047bc:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047be:	68e2      	ldr	r2, [r4, #12]
 80047c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80047c4:	d063      	beq.n	800488e <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03f      	beq.n	800484a <HAL_SPI_TransmitReceive+0x132>
 80047ca:	f1b8 0f01 	cmp.w	r8, #1
 80047ce:	d03c      	beq.n	800484a <HAL_SPI_TransmitReceive+0x132>
        txallowed = 1U;
 80047d0:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80047d4:	b292      	uxth	r2, r2
 80047d6:	b91a      	cbnz	r2, 80047e0 <HAL_SPI_TransmitReceive+0xc8>
 80047d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d042      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	0792      	lsls	r2, r2, #30
 80047e6:	d50f      	bpl.n	8004808 <HAL_SPI_TransmitReceive+0xf0>
 80047e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80047ea:	b292      	uxth	r2, r2
 80047ec:	b162      	cbz	r2, 8004808 <HAL_SPI_TransmitReceive+0xf0>
 80047ee:	b15f      	cbz	r7, 8004808 <HAL_SPI_TransmitReceive+0xf0>
        txallowed = 0U;
 80047f0:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80047f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80047fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004800:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004802:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004804:	6823      	ldr	r3, [r4, #0]
        hspi->pTxBuffPtr++;
 8004806:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	f012 0201 	ands.w	r2, r2, #1
 800480e:	d00d      	beq.n	800482c <HAL_SPI_TransmitReceive+0x114>
 8004810:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004812:	b289      	uxth	r1, r1
 8004814:	b151      	cbz	r1, 800482c <HAL_SPI_TransmitReceive+0x114>
        txallowed = 1U;
 8004816:	4617      	mov	r7, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800481c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800481e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004820:	3301      	adds	r3, #1
 8004822:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004824:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004826:	3b01      	subs	r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800482c:	f7fd f8da 	bl	80019e4 <HAL_GetTick>
 8004830:	1b80      	subs	r0, r0, r6
 8004832:	42a8      	cmp	r0, r5
 8004834:	d314      	bcc.n	8004860 <HAL_SPI_TransmitReceive+0x148>
 8004836:	1c6b      	adds	r3, r5, #1
 8004838:	d0cb      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0xba>
        errorcode = HAL_TIMEOUT;
 800483a:	2003      	movs	r0, #3
 800483c:	e789      	b.n	8004752 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800483e:	2002      	movs	r0, #2
}
 8004840:	b002      	add	sp, #8
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8004846:	2001      	movs	r0, #1
 8004848:	e783      	b.n	8004752 <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484a:	f89a 3000 	ldrb.w	r3, [sl]
 800484e:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004850:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004852:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004854:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004856:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004858:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800485a:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800485c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800485e:	e7b7      	b.n	80047d0 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004860:	2d00      	cmp	r5, #0
 8004862:	d1b6      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0xba>
 8004864:	e7e9      	b.n	800483a <HAL_SPI_TransmitReceive+0x122>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004866:	4633      	mov	r3, r6
 8004868:	462a      	mov	r2, r5
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff fdcf 	bl	8004410 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004872:	2800      	cmp	r0, #0
 8004874:	d14d      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x1fa>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004876:	68a3      	ldr	r3, [r4, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f af6a 	bne.w	8004752 <HAL_SPI_TransmitReceive+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	9001      	str	r0, [sp, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	e761      	b.n	8004752 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488e:	2b00      	cmp	r3, #0
 8004890:	d13b      	bne.n	800490a <HAL_SPI_TransmitReceive+0x1f2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004892:	4651      	mov	r1, sl
 8004894:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004898:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800489a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80048a4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	b91b      	cbnz	r3, 80048b4 <HAL_SPI_TransmitReceive+0x19c>
 80048ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0d8      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	6893      	ldr	r3, [r2, #8]
 80048b8:	0798      	lsls	r0, r3, #30
 80048ba:	d50d      	bpl.n	80048d8 <HAL_SPI_TransmitReceive+0x1c0>
 80048bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048be:	b29b      	uxth	r3, r3
 80048c0:	b153      	cbz	r3, 80048d8 <HAL_SPI_TransmitReceive+0x1c0>
 80048c2:	b14f      	cbz	r7, 80048d8 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 0U;
 80048c4:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048c8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80048cc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ce:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80048d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048d8:	6893      	ldr	r3, [r2, #8]
 80048da:	f013 0301 	ands.w	r3, r3, #1
 80048de:	d00c      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x1e2>
 80048e0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80048e2:	b289      	uxth	r1, r1
 80048e4:	b149      	cbz	r1, 80048fa <HAL_SPI_TransmitReceive+0x1e2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048e6:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80048e8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ec:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048fa:	f7fd f873 	bl	80019e4 <HAL_GetTick>
 80048fe:	1b80      	subs	r0, r0, r6
 8004900:	42a8      	cmp	r0, r5
 8004902:	d3d0      	bcc.n	80048a6 <HAL_SPI_TransmitReceive+0x18e>
 8004904:	1c69      	adds	r1, r5, #1
 8004906:	d0ce      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x18e>
 8004908:	e797      	b.n	800483a <HAL_SPI_TransmitReceive+0x122>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490a:	f1b8 0f01 	cmp.w	r8, #1
 800490e:	d1c9      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x18c>
 8004910:	e7bf      	b.n	8004892 <HAL_SPI_TransmitReceive+0x17a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004912:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004914:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004916:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004918:	4313      	orrs	r3, r2
 800491a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800491c:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 800491e:	e718      	b.n	8004752 <HAL_SPI_TransmitReceive+0x3a>

08004920 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004924:	2b01      	cmp	r3, #1
 8004926:	d11c      	bne.n	8004962 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	6803      	ldr	r3, [r0, #0]
 800492c:	4a0f      	ldr	r2, [pc, #60]	; (800496c <HAL_TIM_Base_Start+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004932:	4293      	cmp	r3, r2
 8004934:	d00a      	beq.n	800494c <HAL_TIM_Base_Start+0x2c>
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d007      	beq.n	800494c <HAL_TIM_Base_Start+0x2c>
 800493c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <HAL_TIM_Base_Start+0x2c>
 8004944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004948:	4293      	cmp	r3, r2
 800494a:	d104      	bne.n	8004956 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	2a06      	cmp	r2, #6
 8004954:	d007      	beq.n	8004966 <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004956:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004958:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	4770      	bx	lr
    return HAL_ERROR;
 8004962:	2001      	movs	r0, #1
 8004964:	4770      	bx	lr
  return HAL_OK;
 8004966:	2000      	movs	r0, #0
}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00

08004970 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004970:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004974:	2a01      	cmp	r2, #1
 8004976:	d075      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0xf4>
{
 8004978:	b430      	push	{r4, r5}
 800497a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800497c:	2401      	movs	r4, #1

  htim->State = HAL_TIM_STATE_BUSY;
 800497e:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004980:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8004982:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800498a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800498c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004992:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004996:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004998:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800499a:	d065      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xf8>
 800499c:	d831      	bhi.n	8004a02 <HAL_TIM_ConfigClockSource+0x92>
 800499e:	2a40      	cmp	r2, #64	; 0x40
 80049a0:	d048      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0xc4>
 80049a2:	d921      	bls.n	80049e8 <HAL_TIM_ConfigClockSource+0x78>
 80049a4:	2a50      	cmp	r2, #80	; 0x50
 80049a6:	d116      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a8:	684c      	ldr	r4, [r1, #4]
 80049aa:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ac:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80049b2:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b4:	6a04      	ldr	r4, [r0, #32]
 80049b6:	f024 0401 	bic.w	r4, r4, #1
 80049ba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049bc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80049c8:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ca:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 80049d6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80049de:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 80049e2:	4610      	mov	r0, r2
}
 80049e4:	bc30      	pop	{r4, r5}
 80049e6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80049e8:	2a20      	cmp	r2, #32
 80049ea:	d002      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x82>
 80049ec:	d91e      	bls.n	8004a2c <HAL_TIM_ConfigClockSource+0xbc>
 80049ee:	2a30      	cmp	r2, #48	; 0x30
 80049f0:	d1f1      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 80049f2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f8:	430a      	orrs	r2, r1
 80049fa:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80049fe:	6082      	str	r2, [r0, #8]
}
 8004a00:	e7e9      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004a02:	2a70      	cmp	r2, #112	; 0x70
 8004a04:	d049      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x12a>
 8004a06:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004a0a:	d1e4      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004a10:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a12:	432a      	orrs	r2, r5
 8004a14:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a16:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004a1e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a20:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a22:	6882      	ldr	r2, [r0, #8]
 8004a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a28:	6082      	str	r2, [r0, #8]
      break;
 8004a2a:	e7d4      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004a2c:	f032 0110 	bics.w	r1, r2, #16
 8004a30:	d1d1      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
 8004a32:	e7de      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a34:	684c      	ldr	r4, [r1, #4]
 8004a36:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a38:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004a3e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a40:	6a04      	ldr	r4, [r0, #32]
 8004a42:	f024 0401 	bic.w	r4, r4, #1
 8004a46:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a48:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a4e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004a52:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a54:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004a56:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004a60:	6082      	str	r2, [r0, #8]
}
 8004a62:	e7b8      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8004a64:	2002      	movs	r0, #2
}
 8004a66:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a70:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a72:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a74:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a76:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8004a7e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004a80:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a86:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004a8a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004a8c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a92:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004a96:	6082      	str	r2, [r0, #8]
}
 8004a98:	e79d      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a9a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004a9e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa0:	432a      	orrs	r2, r5
 8004aa2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004aac:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004aae:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004ab0:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004ab6:	6082      	str	r2, [r0, #8]
      break;
 8004ab8:	e78d      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x66>
 8004aba:	bf00      	nop

08004abc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <TIM_Base_SetConfig+0x94>)
{
 8004abe:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8004ac2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac4:	d02c      	beq.n	8004b20 <TIM_Base_SetConfig+0x64>
 8004ac6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004aca:	d014      	beq.n	8004af6 <TIM_Base_SetConfig+0x3a>
 8004acc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d010      	beq.n	8004af6 <TIM_Base_SetConfig+0x3a>
 8004ad4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad8:	4290      	cmp	r0, r2
 8004ada:	d00c      	beq.n	8004af6 <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	694d      	ldr	r5, [r1, #20]
 8004ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae2:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004ae6:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004ae8:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004aea:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aec:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004aee:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004af0:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004af2:	6143      	str	r3, [r0, #20]
}
 8004af4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004af6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afc:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004afe:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b06:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0c:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004b10:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004b12:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b16:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b18:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004b1a:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004b1c:	6143      	str	r3, [r0, #20]
}
 8004b1e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004b20:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	694a      	ldr	r2, [r1, #20]
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b38:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b3a:	688b      	ldr	r3, [r1, #8]
}
 8004b3c:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004b44:	690b      	ldr	r3, [r1, #16]
 8004b46:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6143      	str	r3, [r0, #20]
}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40012c00 	.word	0x40012c00

08004b54 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004b54:	b350      	cbz	r0, 8004bac <HAL_TIM_Base_Init+0x58>
{
 8004b56:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b62:	b1f3      	cbz	r3, 8004ba2 <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b66:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b70:	f7ff ffa4 	bl	8004abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b9e:	2000      	movs	r0, #0
}
 8004ba0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ba6:	f7fc fe41 	bl	800182c <HAL_TIM_Base_MspInit>
 8004baa:	e7db      	b.n	8004b64 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	d027      	beq.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004bb8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bbc:	681a      	ldr	r2, [r3, #0]
{
 8004bbe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004bc4:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc6:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	4d10      	ldr	r5, [pc, #64]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bca:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bce:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004bd2:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004bd4:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	d009      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004bd8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004bdc:	d006      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004bde:	480c      	ldr	r0, [pc, #48]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004be0:	4282      	cmp	r2, r0
 8004be2:	d003      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004be4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004be8:	4282      	cmp	r2, r0
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bec:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf2:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004bf6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004bfe:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c02:	4610      	mov	r0, r2
}
 8004c04:	bc30      	pop	{r4, r5}
 8004c06:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004c08:	2002      	movs	r0, #2
}
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400

08004c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	a801      	add	r0, sp, #4
 8004c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004c1c:	b004      	add	sp, #16
 8004c1e:	2000      	movs	r0, #0
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop

08004c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c24:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c26:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c28:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8004c30:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c32:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8004c36:	4770      	bx	lr

08004c38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c38:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c3a:	f244 02ff 	movw	r2, #16639	; 0x40ff
 8004c3e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004c42:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c44:	400a      	ands	r2, r1
 8004c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr

08004c50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c50:	b084      	sub	sp, #16
 8004c52:	f10d 0c04 	add.w	ip, sp, #4
 8004c56:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8004c5a:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c5c:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c5e:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8004c60:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c62:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8004c66:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8004c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 8004c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c7a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004c7c:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c80:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 8004c84:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c86:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 8004c8a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004c8e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004c92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 8004c96:	f1be 0f03 	cmp.w	lr, #3
 8004c9a:	f200 815a 	bhi.w	8004f52 <USB_ActivateEndpoint+0x2da>
 8004c9e:	e8df f00e 	tbb	[pc, lr]
 8004ca2:	4e52      	.short	0x4e52
 8004ca4:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ca6:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004caa:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004cac:	f248 0580 	movw	r5, #32896	; 0x8080
 8004cb0:	ea4c 0c05 	orr.w	ip, ip, r5
 8004cb4:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004cb8:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8004cbc:	4ca6      	ldr	r4, [pc, #664]	; (8004f58 <USB_ActivateEndpoint+0x2e0>)
 8004cbe:	fa1f fc8c 	uxth.w	ip, ip
 8004cc2:	ea0c 0c04 	and.w	ip, ip, r4
 8004cc6:	ea4c 0c02 	orr.w	ip, ip, r2
 8004cca:	ea45 050c 	orr.w	r5, r5, ip
 8004cce:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004cd2:	7b0d      	ldrb	r5, [r1, #12]
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	d17e      	bne.n	8004dd6 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 8004cd8:	784d      	ldrb	r5, [r1, #1]
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	f000 80dd 	beq.w	8004e9a <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ce0:	88c9      	ldrh	r1, [r1, #6]
 8004ce2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8004ce6:	0849      	lsrs	r1, r1, #1
 8004ce8:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 8004cec:	0049      	lsls	r1, r1, #1
 8004cee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cf2:	b2ad      	uxth	r5, r5
 8004cf4:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004cfa:	064e      	lsls	r6, r1, #25
 8004cfc:	d509      	bpl.n	8004d12 <USB_ActivateEndpoint+0x9a>
 8004cfe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d02:	b289      	uxth	r1, r1
 8004d04:	400c      	ands	r4, r1
 8004d06:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004d0a:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8004d0e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d12:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004d16:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d1a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004d1e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004d22:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004d26:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8004d2a:	d04d      	beq.n	8004dc8 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d2c:	f081 0120 	eor.w	r1, r1, #32
 8004d30:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004d34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004d38:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3e:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d40:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 8004d44:	e7b2      	b.n	8004cac <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 8004d46:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 8004d48:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8004d4c:	e7ae      	b.n	8004cac <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d52:	044d      	lsls	r5, r1, #17
 8004d54:	d509      	bpl.n	8004d6a <USB_ActivateEndpoint+0xf2>
 8004d56:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d5a:	b289      	uxth	r1, r1
 8004d5c:	400c      	ands	r4, r1
 8004d5e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8004d62:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004d66:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d6e:	0649      	lsls	r1, r1, #25
 8004d70:	d50d      	bpl.n	8004d8e <USB_ActivateEndpoint+0x116>
 8004d72:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d76:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004d7a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d7e:	0409      	lsls	r1, r1, #16
 8004d80:	0c09      	lsrs	r1, r1, #16
 8004d82:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004d86:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004d8a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d8e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004d92:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d96:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004d9a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004d9e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004da2:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8004da6:	bf18      	it	ne
 8004da8:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004db0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004db4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004db8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004dbc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004dc0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004dc4:	0409      	lsls	r1, r1, #16
 8004dc6:	0c09      	lsrs	r1, r1, #16
 8004dc8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004dcc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004dd0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004dd6:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8004dda:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8004dde:	fa1f fc8c 	uxth.w	ip, ip
 8004de2:	ea0c 0c04 	and.w	ip, ip, r4
 8004de6:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8004dea:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004dee:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004df2:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8004df6:	890e      	ldrh	r6, [r1, #8]
 8004df8:	fa1f fc8c 	uxth.w	ip, ip
 8004dfc:	0876      	lsrs	r6, r6, #1
 8004dfe:	44bc      	add	ip, r7
 8004e00:	0076      	lsls	r6, r6, #1
 8004e02:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 8004e06:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004e0a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8004e0e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004e12:	b2ad      	uxth	r5, r5
 8004e14:	443d      	add	r5, r7
 8004e16:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004e1a:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004e1e:	7849      	ldrb	r1, [r1, #1]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d194      	bne.n	8004d4e <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e24:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e28:	044f      	lsls	r7, r1, #17
 8004e2a:	d509      	bpl.n	8004e40 <USB_ActivateEndpoint+0x1c8>
 8004e2c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e30:	b289      	uxth	r1, r1
 8004e32:	400c      	ands	r4, r1
 8004e34:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8004e38:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004e3c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e40:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e44:	064e      	lsls	r6, r1, #25
 8004e46:	d50d      	bpl.n	8004e64 <USB_ActivateEndpoint+0x1ec>
 8004e48:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e4c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004e50:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e54:	0409      	lsls	r1, r1, #16
 8004e56:	0c09      	lsrs	r1, r1, #16
 8004e58:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004e5c:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004e60:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e64:	f248 0480 	movw	r4, #32896	; 0x8080
 8004e68:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e6c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004e70:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e74:	0409      	lsls	r1, r1, #16
 8004e76:	0c09      	lsrs	r1, r1, #16
 8004e78:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004e7c:	4321      	orrs	r1, r4
 8004e7e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e82:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e86:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004e8a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004e8e:	0409      	lsls	r1, r1, #16
 8004e90:	0c09      	lsrs	r1, r1, #16
 8004e92:	4321      	orrs	r1, r4
 8004e94:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e9a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004e9e:	88cd      	ldrh	r5, [r1, #6]
 8004ea0:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8004ea4:	b2a4      	uxth	r4, r4
 8004ea6:	086d      	lsrs	r5, r5, #1
 8004ea8:	006d      	lsls	r5, r5, #1
 8004eaa:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eac:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eae:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eb2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004eb6:	b289      	uxth	r1, r1
 8004eb8:	4439      	add	r1, r7
 8004eba:	b366      	cbz	r6, 8004f16 <USB_ActivateEndpoint+0x29e>
 8004ebc:	2e3e      	cmp	r6, #62	; 0x3e
 8004ebe:	d83c      	bhi.n	8004f3a <USB_ActivateEndpoint+0x2c2>
 8004ec0:	0874      	lsrs	r4, r6, #1
 8004ec2:	07f5      	lsls	r5, r6, #31
 8004ec4:	bf48      	it	mi
 8004ec6:	3401      	addmi	r4, #1
 8004ec8:	02a4      	lsls	r4, r4, #10
 8004eca:	b2a4      	uxth	r4, r4
 8004ecc:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ed4:	0449      	lsls	r1, r1, #17
 8004ed6:	d50d      	bpl.n	8004ef4 <USB_ActivateEndpoint+0x27c>
 8004ed8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004edc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004ee0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004ee4:	0409      	lsls	r1, r1, #16
 8004ee6:	0c09      	lsrs	r1, r1, #16
 8004ee8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004eec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004ef0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ef4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ef8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004efc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004f00:	0409      	lsls	r1, r1, #16
 8004f02:	0c09      	lsrs	r1, r1, #16
 8004f04:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004f08:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004f0c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004f10:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f16:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8004f1a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8004f1e:	0424      	lsls	r4, r4, #16
 8004f20:	0c24      	lsrs	r4, r4, #16
 8004f22:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8004f26:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8004f2a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004f2e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004f32:	b2a4      	uxth	r4, r4
 8004f34:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8004f38:	e7ca      	b.n	8004ed0 <USB_ActivateEndpoint+0x258>
 8004f3a:	0975      	lsrs	r5, r6, #5
 8004f3c:	06f4      	lsls	r4, r6, #27
 8004f3e:	4c07      	ldr	r4, [pc, #28]	; (8004f5c <USB_ActivateEndpoint+0x2e4>)
 8004f40:	bf08      	it	eq
 8004f42:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004f46:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004f4a:	b2a4      	uxth	r4, r4
 8004f4c:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8004f50:	e7be      	b.n	8004ed0 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 8004f52:	2001      	movs	r0, #1
 8004f54:	e6aa      	b.n	8004cac <USB_ActivateEndpoint+0x34>
 8004f56:	bf00      	nop
 8004f58:	ffff8f8f 	.word	0xffff8f8f
 8004f5c:	ffff8000 	.word	0xffff8000

08004f60 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004f60:	7b0b      	ldrb	r3, [r1, #12]
 8004f62:	b9cb      	cbnz	r3, 8004f98 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8004f64:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f66:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80b1 	beq.w	80050d0 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f72:	0659      	lsls	r1, r3, #25
 8004f74:	f100 80c5 	bmi.w	8005102 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004f94:	2000      	movs	r0, #0
 8004f96:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004f98:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d14b      	bne.n	8005038 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fa4:	0459      	lsls	r1, r3, #17
 8004fa6:	d50d      	bpl.n	8004fc4 <USB_DeactivateEndpoint+0x64>
 8004fa8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fc8:	065b      	lsls	r3, r3, #25
 8004fca:	d50d      	bpl.n	8004fe8 <USB_DeactivateEndpoint+0x88>
 8004fcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fe4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fe8:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004fec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	041b      	lsls	r3, r3, #16
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005004:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005008:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800500c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	430b      	orrs	r3, r1
 800501a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800501e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	430b      	orrs	r3, r1
 8005030:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005034:	2000      	movs	r0, #0
 8005036:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005038:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800503c:	0459      	lsls	r1, r3, #17
 800503e:	d50d      	bpl.n	800505c <USB_DeactivateEndpoint+0xfc>
 8005040:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800505c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005060:	065b      	lsls	r3, r3, #25
 8005062:	d50d      	bpl.n	8005080 <USB_DeactivateEndpoint+0x120>
 8005064:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800507c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005080:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005084:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	430b      	orrs	r3, r1
 80050b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	430b      	orrs	r3, r1
 80050c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80050cc:	2000      	movs	r0, #0
 80050ce:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050d4:	045b      	lsls	r3, r3, #17
 80050d6:	d50d      	bpl.n	80050f4 <USB_DeactivateEndpoint+0x194>
 80050d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	e740      	b.n	8004f84 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005102:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800511e:	e72b      	b.n	8004f78 <USB_DeactivateEndpoint+0x18>

08005120 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005124:	784b      	ldrb	r3, [r1, #1]
{
 8005126:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8005128:	2b01      	cmp	r3, #1
 800512a:	d06b      	beq.n	8005204 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800512c:	7b08      	ldrb	r0, [r1, #12]
 800512e:	2800      	cmp	r0, #0
 8005130:	d037      	beq.n	80051a2 <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005132:	78c8      	ldrb	r0, [r1, #3]
 8005134:	2802      	cmp	r0, #2
 8005136:	f000 8186 	beq.w	8005446 <USB_EPStartXfer+0x326>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800513a:	2801      	cmp	r0, #1
 800513c:	f040 80d8 	bne.w	80052f0 <USB_EPStartXfer+0x1d0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005140:	6988      	ldr	r0, [r1, #24]
 8005142:	690c      	ldr	r4, [r1, #16]
 8005144:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8005146:	bf94      	ite	ls
 8005148:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800514a:	1b05      	subhi	r5, r0, r4
 800514c:	618d      	str	r5, [r1, #24]
 800514e:	bf88      	it	hi
 8005150:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 8143 	bne.w	80053de <USB_EPStartXfer+0x2be>
 8005158:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800515c:	780b      	ldrb	r3, [r1, #0]
 800515e:	b2a4      	uxth	r4, r4
 8005160:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	442c      	add	r4, r5
 8005168:	2800      	cmp	r0, #0
 800516a:	f000 8222 	beq.w	80055b2 <USB_EPStartXfer+0x492>
 800516e:	283e      	cmp	r0, #62	; 0x3e
 8005170:	f200 811b 	bhi.w	80053aa <USB_EPStartXfer+0x28a>
 8005174:	0845      	lsrs	r5, r0, #1
 8005176:	462e      	mov	r6, r5
 8005178:	f010 0001 	ands.w	r0, r0, #1
 800517c:	bf18      	it	ne
 800517e:	1c6e      	addne	r6, r5, #1
 8005180:	02b6      	lsls	r6, r6, #10
 8005182:	b2b6      	uxth	r6, r6
 8005184:	52e6      	strh	r6, [r4, r3]
 8005186:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800518a:	b2a6      	uxth	r6, r4
 800518c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8005190:	4434      	add	r4, r6
 8005192:	b100      	cbz	r0, 8005196 <USB_EPStartXfer+0x76>
 8005194:	3501      	adds	r5, #1
 8005196:	02ad      	lsls	r5, r5, #10
 8005198:	b2a8      	uxth	r0, r5
 800519a:	52e0      	strh	r0, [r4, r3]
 800519c:	f891 c000 	ldrb.w	ip, [r1]
 80051a0:	e01d      	b.n	80051de <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 80051a2:	698c      	ldr	r4, [r1, #24]
 80051a4:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051a6:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 80051a8:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 80051aa:	bf84      	itt	hi
 80051ac:	1ae0      	subhi	r0, r4, r3
 80051ae:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051b0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80051b4:	6188      	str	r0, [r1, #24]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80051bc:	012d      	lsls	r5, r5, #4
 80051be:	4403      	add	r3, r0
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	f000 8085 	beq.w	80052d0 <USB_EPStartXfer+0x1b0>
 80051c6:	2c3e      	cmp	r4, #62	; 0x3e
 80051c8:	f200 8182 	bhi.w	80054d0 <USB_EPStartXfer+0x3b0>
 80051cc:	0860      	lsrs	r0, r4, #1
 80051ce:	07e4      	lsls	r4, r4, #31
 80051d0:	bf48      	it	mi
 80051d2:	3001      	addmi	r0, #1
 80051d4:	0280      	lsls	r0, r0, #10
 80051d6:	b280      	uxth	r0, r0
 80051d8:	52e8      	strh	r0, [r5, r3]
 80051da:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051de:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 80051e2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80051f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005204:	690d      	ldr	r5, [r1, #16]
 8005206:	698b      	ldr	r3, [r1, #24]
    if (ep->doublebuffer == 0U)
 8005208:	7b08      	ldrb	r0, [r1, #12]
 800520a:	42ab      	cmp	r3, r5
 800520c:	bf28      	it	cs
 800520e:	462b      	movcs	r3, r5
 8005210:	2800      	cmp	r0, #0
 8005212:	f000 80e7 	beq.w	80053e4 <USB_EPStartXfer+0x2c4>
      if (ep->type == EP_TYPE_BULK)
 8005216:	78c8      	ldrb	r0, [r1, #3]
 8005218:	2802      	cmp	r0, #2
 800521a:	d06c      	beq.n	80052f6 <USB_EPStartXfer+0x1d6>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800521c:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 800521e:	6a08      	ldr	r0, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005220:	f832 c024 	ldrh.w	ip, [r2, r4, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005224:	0127      	lsls	r7, r4, #4
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005226:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800522a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800522e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005232:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005236:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800523a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800523e:	f822 c024 	strh.w	ip, [r2, r4, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005242:	f832 6024 	ldrh.w	r6, [r2, r4, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005246:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
        ep->xfer_len_db -= len;
 800524a:	1ac0      	subs	r0, r0, r3
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800524c:	f016 0f40 	tst.w	r6, #64	; 0x40
        ep->xfer_len_db -= len;
 8005250:	6208      	str	r0, [r1, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005252:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005254:	f000 8149 	beq.w	80054ea <USB_EPStartXfer+0x3ca>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005258:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800525c:	4434      	add	r4, r6
 800525e:	b29e      	uxth	r6, r3
 8005260:	53e6      	strh	r6, [r4, r7]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005262:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005264:	3601      	adds	r6, #1
 8005266:	f502 6880 	add.w	r8, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800526a:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800526c:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005270:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  for (i = n; i != 0U; i--)
 8005274:	d008      	beq.n	8005288 <USB_EPStartXfer+0x168>
  uint8_t *pBuf = pbUsrBuf;
 8005276:	46cc      	mov	ip, r9
 8005278:	eb09 0646 	add.w	r6, r9, r6, lsl #1
  {
    temp1 = *pBuf;
 800527c:	f83c eb02 	ldrh.w	lr, [ip], #2
  for (i = n; i != 0U; i--)
 8005280:	4566      	cmp	r6, ip
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8005282:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 8005286:	d1f9      	bne.n	800527c <USB_EPStartXfer+0x15c>
          ep->xfer_buff += len;
 8005288:	eb09 0403 	add.w	r4, r9, r3
          if (ep->xfer_len_db > ep->maxpacket)
 800528c:	4285      	cmp	r5, r0
          ep->xfer_buff += len;
 800528e:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005290:	f0c0 816a 	bcc.w	8005568 <USB_EPStartXfer+0x448>
            ep->xfer_len_db = 0U;
 8005294:	2500      	movs	r5, #0
 8005296:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8005298:	2800      	cmp	r0, #0
 800529a:	f000 80c0 	beq.w	800541e <USB_EPStartXfer+0x2fe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800529e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80052a2:	b29d      	uxth	r5, r3
 80052a4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80052a8:	442b      	add	r3, r5
 80052aa:	b285      	uxth	r5, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80052ac:	4628      	mov	r0, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ae:	53dd      	strh	r5, [r3, r7]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052b0:	890b      	ldrh	r3, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80052b2:	3001      	adds	r0, #1
  for (i = n; i != 0U; i--)
 80052b4:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  for (i = n; i != 0U; i--)
 80052ba:	f000 80b0 	beq.w	800541e <USB_EPStartXfer+0x2fe>
 80052be:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 80052c2:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 80052c6:	42ac      	cmp	r4, r5
    *pdwVal = (uint16_t)temp2;
 80052c8:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80052cc:	d1f9      	bne.n	80052c2 <USB_EPStartXfer+0x1a2>
 80052ce:	e0a6      	b.n	800541e <USB_EPStartXfer+0x2fe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80052d0:	5ae8      	ldrh	r0, [r5, r3]
 80052d2:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80052d6:	0400      	lsls	r0, r0, #16
 80052d8:	0c00      	lsrs	r0, r0, #16
 80052da:	52e8      	strh	r0, [r5, r3]
 80052dc:	5ae8      	ldrh	r0, [r5, r3]
 80052de:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80052e2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80052e6:	b280      	uxth	r0, r0
 80052e8:	52e8      	strh	r0, [r5, r3]
 80052ea:	f891 c000 	ldrb.w	ip, [r1]
 80052ee:	e776      	b.n	80051de <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 80052f0:	2001      	movs	r0, #1
}
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep->xfer_len_db > ep->maxpacket)
 80052f6:	6a0e      	ldr	r6, [r1, #32]
 80052f8:	42b5      	cmp	r5, r6
 80052fa:	f080 81b9 	bcs.w	8005670 <USB_EPStartXfer+0x550>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052fe:	f891 8000 	ldrb.w	r8, [r1]
          ep->xfer_len_db -= len;
 8005302:	1af6      	subs	r6, r6, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005304:	f832 0028 	ldrh.w	r0, [r2, r8, lsl #2]
 8005308:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 800530c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8005310:	0400      	lsls	r0, r0, #16
 8005312:	0c00      	lsrs	r0, r0, #16
 8005314:	f440 4001 	orr.w	r0, r0, #33024	; 0x8100
 8005318:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800531c:	f822 0028 	strh.w	r0, [r2, r8, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005320:	f832 0028 	ldrh.w	r0, [r2, r8, lsl #2]
          ep->xfer_len_db -= len;
 8005324:	620e      	str	r6, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005326:	f010 0f40 	tst.w	r0, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800532a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800532e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005332:	b284      	uxth	r4, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005334:	f000 8160 	beq.w	80055f8 <USB_EPStartXfer+0x4d8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005338:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800533c:	4420      	add	r0, r4
 800533e:	fa1f f983 	uxth.w	r9, r3
 8005342:	f820 9008 	strh.w	r9, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005346:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005348:	f109 0c01 	add.w	ip, r9, #1
 800534c:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005350:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005354:	6948      	ldr	r0, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005356:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800535a:	d008      	beq.n	800536e <USB_EPStartXfer+0x24e>
  uint8_t *pBuf = pbUsrBuf;
 800535c:	4686      	mov	lr, r0
 800535e:	eb04 0b8c 	add.w	fp, r4, ip, lsl #2
    temp1 = *pBuf;
 8005362:	f83e ab02 	ldrh.w	sl, [lr], #2
    *pdwVal = (uint16_t)temp2;
 8005366:	f824 ab04 	strh.w	sl, [r4], #4
  for (i = n; i != 0U; i--)
 800536a:	45a3      	cmp	fp, r4
 800536c:	d1f9      	bne.n	8005362 <USB_EPStartXfer+0x242>
            ep->xfer_buff += len;
 800536e:	4418      	add	r0, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8005370:	42b5      	cmp	r5, r6
            ep->xfer_buff += len;
 8005372:	6148      	str	r0, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005374:	f080 81c3 	bcs.w	80056fe <USB_EPStartXfer+0x5de>
              ep->xfer_len_db -= len;
 8005378:	1af3      	subs	r3, r6, r3
 800537a:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800537c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005380:	b29c      	uxth	r4, r3
 8005382:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8005386:	4423      	add	r3, r4
 8005388:	f823 9008 	strh.w	r9, [r3, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800538c:	890b      	ldrh	r3, [r1, #8]
 800538e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  for (i = n; i != 0U; i--)
 8005392:	f1bc 0f00 	cmp.w	ip, #0
 8005396:	d042      	beq.n	800541e <USB_EPStartXfer+0x2fe>
 8005398:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    temp1 = *pBuf;
 800539c:	f830 4b02 	ldrh.w	r4, [r0], #2
  for (i = n; i != 0U; i--)
 80053a0:	4584      	cmp	ip, r0
    *pdwVal = (uint16_t)temp2;
 80053a2:	f823 4b04 	strh.w	r4, [r3], #4
  for (i = n; i != 0U; i--)
 80053a6:	d1f9      	bne.n	800539c <USB_EPStartXfer+0x27c>
 80053a8:	e039      	b.n	800541e <USB_EPStartXfer+0x2fe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053aa:	0945      	lsrs	r5, r0, #5
 80053ac:	462f      	mov	r7, r5
 80053ae:	f010 001f 	ands.w	r0, r0, #31
 80053b2:	bf08      	it	eq
 80053b4:	f105 37ff 	addeq.w	r7, r5, #4294967295
 80053b8:	462e      	mov	r6, r5
 80053ba:	4dac      	ldr	r5, [pc, #688]	; (800566c <USB_EPStartXfer+0x54c>)
 80053bc:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80053c0:	b2ad      	uxth	r5, r5
 80053c2:	52e5      	strh	r5, [r4, r3]
 80053c4:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 80053c8:	b2a5      	uxth	r5, r4
 80053ca:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 80053ce:	442c      	add	r4, r5
 80053d0:	b900      	cbnz	r0, 80053d4 <USB_EPStartXfer+0x2b4>
 80053d2:	3e01      	subs	r6, #1
 80053d4:	48a5      	ldr	r0, [pc, #660]	; (800566c <USB_EPStartXfer+0x54c>)
 80053d6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80053da:	b280      	uxth	r0, r0
 80053dc:	52e0      	strh	r0, [r4, r3]
 80053de:	f891 c000 	ldrb.w	ip, [r1]
 80053e2:	e6fc      	b.n	80051de <USB_EPStartXfer+0xbe>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053e4:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053e6:	462b      	mov	r3, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053e8:	88cc      	ldrh	r4, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053ea:	6948      	ldr	r0, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053ec:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053ee:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80053f2:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053f4:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
  for (i = n; i != 0U; i--)
 80053f8:	bf18      	it	ne
 80053fa:	eb00 0443 	addne.w	r4, r0, r3, lsl #1
 80053fe:	d005      	beq.n	800540c <USB_EPStartXfer+0x2ec>
    temp1 = *pBuf;
 8005400:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0U; i--)
 8005404:	42a0      	cmp	r0, r4
    *pdwVal = (uint16_t)temp2;
 8005406:	f82c 3b04 	strh.w	r3, [ip], #4
  for (i = n; i != 0U; i--)
 800540a:	d1f9      	bne.n	8005400 <USB_EPStartXfer+0x2e0>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800540c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005410:	7808      	ldrb	r0, [r1, #0]
 8005412:	b29c      	uxth	r4, r3
 8005414:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8005418:	0100      	lsls	r0, r0, #4
 800541a:	4423      	add	r3, r4
 800541c:	52c5      	strh	r5, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800541e:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8005420:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005422:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005446:	bb13      	cbnz	r3, 800548e <USB_EPStartXfer+0x36e>
 8005448:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800544c:	780b      	ldrb	r3, [r1, #0]
 800544e:	b284      	uxth	r4, r0
 8005450:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8005454:	4420      	add	r0, r4
 8005456:	690c      	ldr	r4, [r1, #16]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	2c00      	cmp	r4, #0
 800545c:	f000 8087 	beq.w	800556e <USB_EPStartXfer+0x44e>
 8005460:	2c3e      	cmp	r4, #62	; 0x3e
 8005462:	f200 8131 	bhi.w	80056c8 <USB_EPStartXfer+0x5a8>
 8005466:	0865      	lsrs	r5, r4, #1
 8005468:	462e      	mov	r6, r5
 800546a:	f014 0401 	ands.w	r4, r4, #1
 800546e:	bf18      	it	ne
 8005470:	1c6e      	addne	r6, r5, #1
 8005472:	02b6      	lsls	r6, r6, #10
 8005474:	b2b6      	uxth	r6, r6
 8005476:	52c6      	strh	r6, [r0, r3]
 8005478:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800547c:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 8005480:	b280      	uxth	r0, r0
 8005482:	4406      	add	r6, r0
 8005484:	b104      	cbz	r4, 8005488 <USB_EPStartXfer+0x368>
 8005486:	3501      	adds	r5, #1
 8005488:	02ad      	lsls	r5, r5, #10
 800548a:	b2a8      	uxth	r0, r5
 800548c:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800548e:	69cb      	ldr	r3, [r1, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0a4      	beq.n	80053de <USB_EPStartXfer+0x2be>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005494:	f244 0340 	movw	r3, #16448	; 0x4040
 8005498:	f891 c000 	ldrb.w	ip, [r1]
 800549c:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054a0:	ea03 0400 	and.w	r4, r3, r0
 80054a4:	4383      	bics	r3, r0
 80054a6:	d002      	beq.n	80054ae <USB_EPStartXfer+0x38e>
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	f47f ae98 	bne.w	80051de <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80054ae:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c6:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 80054ca:	f891 c000 	ldrb.w	ip, [r1]
 80054ce:	e686      	b.n	80051de <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054d0:	0966      	lsrs	r6, r4, #5
 80054d2:	06e0      	lsls	r0, r4, #27
 80054d4:	4865      	ldr	r0, [pc, #404]	; (800566c <USB_EPStartXfer+0x54c>)
 80054d6:	bf08      	it	eq
 80054d8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80054dc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80054e0:	b280      	uxth	r0, r0
 80054e2:	52e8      	strh	r0, [r5, r3]
 80054e4:	f891 c000 	ldrb.w	ip, [r1]
 80054e8:	e679      	b.n	80051de <USB_EPStartXfer+0xbe>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054ea:	f202 4404 	addw	r4, r2, #1028	; 0x404
 80054ee:	4434      	add	r4, r6
 80054f0:	b29e      	uxth	r6, r3
 80054f2:	53e6      	strh	r6, [r4, r7]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054f4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054f8:	3601      	adds	r6, #1
 80054fa:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80054fe:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005500:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005504:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
  for (i = n; i != 0U; i--)
 8005508:	d008      	beq.n	800551c <USB_EPStartXfer+0x3fc>
  uint8_t *pBuf = pbUsrBuf;
 800550a:	464c      	mov	r4, r9
 800550c:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    temp1 = *pBuf;
 8005510:	f834 eb02 	ldrh.w	lr, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8005514:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8005518:	4566      	cmp	r6, ip
 800551a:	d1f9      	bne.n	8005510 <USB_EPStartXfer+0x3f0>
          ep->xfer_buff += len;
 800551c:	eb09 0403 	add.w	r4, r9, r3
          if (ep->xfer_len_db > ep->maxpacket)
 8005520:	4285      	cmp	r5, r0
          ep->xfer_buff += len;
 8005522:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8005524:	d31d      	bcc.n	8005562 <USB_EPStartXfer+0x442>
            ep->xfer_len_db = 0U;
 8005526:	2500      	movs	r5, #0
 8005528:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800552a:	2800      	cmp	r0, #0
 800552c:	f43f af77 	beq.w	800541e <USB_EPStartXfer+0x2fe>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005530:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005534:	b29d      	uxth	r5, r3
 8005536:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800553a:	442b      	add	r3, r5
 800553c:	b285      	uxth	r5, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800553e:	4628      	mov	r0, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005540:	53dd      	strh	r5, [r3, r7]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005542:	894b      	ldrh	r3, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005544:	3001      	adds	r0, #1
  for (i = n; i != 0U; i--)
 8005546:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005548:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  for (i = n; i != 0U; i--)
 800554c:	f43f af67 	beq.w	800541e <USB_EPStartXfer+0x2fe>
 8005550:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 8005554:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8005558:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 800555a:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800555e:	d1f9      	bne.n	8005554 <USB_EPStartXfer+0x434>
 8005560:	e75d      	b.n	800541e <USB_EPStartXfer+0x2fe>
            ep->xfer_len_db -= len;
 8005562:	1ac5      	subs	r5, r0, r3
 8005564:	4618      	mov	r0, r3
 8005566:	e7df      	b.n	8005528 <USB_EPStartXfer+0x408>
            ep->xfer_len_db -= len;
 8005568:	1ac5      	subs	r5, r0, r3
 800556a:	4618      	mov	r0, r3
 800556c:	e693      	b.n	8005296 <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800556e:	5ac4      	ldrh	r4, [r0, r3]
 8005570:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8005574:	0424      	lsls	r4, r4, #16
 8005576:	0c24      	lsrs	r4, r4, #16
 8005578:	52c4      	strh	r4, [r0, r3]
 800557a:	5ac5      	ldrh	r5, [r0, r3]
 800557c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8005580:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8005584:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8005588:	b2ad      	uxth	r5, r5
 800558a:	52c5      	strh	r5, [r0, r3]
 800558c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005590:	b285      	uxth	r5, r0
 8005592:	4620      	mov	r0, r4
 8005594:	4428      	add	r0, r5
 8005596:	5ac4      	ldrh	r4, [r0, r3]
 8005598:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800559c:	0424      	lsls	r4, r4, #16
 800559e:	0c24      	lsrs	r4, r4, #16
 80055a0:	52c4      	strh	r4, [r0, r3]
 80055a2:	5ac4      	ldrh	r4, [r0, r3]
 80055a4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80055a8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80055ac:	b2a4      	uxth	r4, r4
 80055ae:	52c4      	strh	r4, [r0, r3]
 80055b0:	e76d      	b.n	800548e <USB_EPStartXfer+0x36e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80055b2:	5ae0      	ldrh	r0, [r4, r3]
 80055b4:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80055b8:	0400      	lsls	r0, r0, #16
 80055ba:	0c00      	lsrs	r0, r0, #16
 80055bc:	52e0      	strh	r0, [r4, r3]
 80055be:	5ae5      	ldrh	r5, [r4, r3]
 80055c0:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80055c4:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80055c8:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80055cc:	b2ad      	uxth	r5, r5
 80055ce:	52e5      	strh	r5, [r4, r3]
 80055d0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 80055d4:	b2a4      	uxth	r4, r4
 80055d6:	4420      	add	r0, r4
 80055d8:	5ac4      	ldrh	r4, [r0, r3]
 80055da:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80055de:	0424      	lsls	r4, r4, #16
 80055e0:	0c24      	lsrs	r4, r4, #16
 80055e2:	52c4      	strh	r4, [r0, r3]
 80055e4:	5ac4      	ldrh	r4, [r0, r3]
 80055e6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80055ea:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80055ee:	b2a4      	uxth	r4, r4
 80055f0:	52c4      	strh	r4, [r0, r3]
 80055f2:	f891 c000 	ldrb.w	ip, [r1]
 80055f6:	e5f2      	b.n	80051de <USB_EPStartXfer+0xbe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055f8:	f202 4004 	addw	r0, r2, #1028	; 0x404
 80055fc:	4420      	add	r0, r4
 80055fe:	fa1f f983 	uxth.w	r9, r3
 8005602:	f820 9008 	strh.w	r9, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005606:	f8b1 e008 	ldrh.w	lr, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800560a:	f109 0c01 	add.w	ip, r9, #1
 800560e:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005612:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005616:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005618:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
  for (i = n; i != 0U; i--)
 800561c:	d008      	beq.n	8005630 <USB_EPStartXfer+0x510>
  uint8_t *pBuf = pbUsrBuf;
 800561e:	463c      	mov	r4, r7
 8005620:	eb07 0b4c 	add.w	fp, r7, ip, lsl #1
    temp1 = *pBuf;
 8005624:	f834 ab02 	ldrh.w	sl, [r4], #2
  for (i = n; i != 0U; i--)
 8005628:	455c      	cmp	r4, fp
    *pdwVal = (uint16_t)temp2;
 800562a:	f82e ab04 	strh.w	sl, [lr], #4
  for (i = n; i != 0U; i--)
 800562e:	d1f9      	bne.n	8005624 <USB_EPStartXfer+0x504>
            ep->xfer_buff += len;
 8005630:	441f      	add	r7, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8005632:	42b5      	cmp	r5, r6
            ep->xfer_buff += len;
 8005634:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005636:	d26c      	bcs.n	8005712 <USB_EPStartXfer+0x5f2>
              ep->xfer_len_db -= len;
 8005638:	1af3      	subs	r3, r6, r3
 800563a:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800563c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005640:	b29d      	uxth	r5, r3
 8005642:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8005646:	442b      	add	r3, r5
 8005648:	f823 9008 	strh.w	r9, [r3, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800564c:	894b      	ldrh	r3, [r1, #10]
 800564e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  for (i = n; i != 0U; i--)
 8005652:	f1bc 0f00 	cmp.w	ip, #0
 8005656:	f43f aee2 	beq.w	800541e <USB_EPStartXfer+0x2fe>
 800565a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    temp1 = *pBuf;
 800565e:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 8005662:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 8005666:	459c      	cmp	ip, r3
 8005668:	d1f9      	bne.n	800565e <USB_EPStartXfer+0x53e>
 800566a:	e6d8      	b.n	800541e <USB_EPStartXfer+0x2fe>
 800566c:	ffff8000 	.word	0xffff8000
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005670:	780c      	ldrb	r4, [r1, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005672:	b2b0      	uxth	r0, r6
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005674:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005678:	3001      	adds	r0, #1
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800567a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005692:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005696:	0124      	lsls	r4, r4, #4
 8005698:	b29d      	uxth	r5, r3
 800569a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800569e:	442b      	add	r3, r5
 80056a0:	b2b5      	uxth	r5, r6
 80056a2:	531d      	strh	r5, [r3, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056a4:	890d      	ldrh	r5, [r1, #8]
 80056a6:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80056aa:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ac:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056ae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 80056b2:	f43f aeb4 	beq.w	800541e <USB_EPStartXfer+0x2fe>
 80056b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    temp1 = *pBuf;
 80056ba:	f833 5b02 	ldrh.w	r5, [r3], #2
  for (i = n; i != 0U; i--)
 80056be:	4283      	cmp	r3, r0
    *pdwVal = (uint16_t)temp2;
 80056c0:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 80056c4:	d1f9      	bne.n	80056ba <USB_EPStartXfer+0x59a>
 80056c6:	e6aa      	b.n	800541e <USB_EPStartXfer+0x2fe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056c8:	0965      	lsrs	r5, r4, #5
 80056ca:	462f      	mov	r7, r5
 80056cc:	f014 041f 	ands.w	r4, r4, #31
 80056d0:	bf08      	it	eq
 80056d2:	f105 37ff 	addeq.w	r7, r5, #4294967295
 80056d6:	462e      	mov	r6, r5
 80056d8:	4d13      	ldr	r5, [pc, #76]	; (8005728 <USB_EPStartXfer+0x608>)
 80056da:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80056de:	b2ad      	uxth	r5, r5
 80056e0:	52c5      	strh	r5, [r0, r3]
 80056e2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80056e6:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 80056ea:	b280      	uxth	r0, r0
 80056ec:	4405      	add	r5, r0
 80056ee:	b904      	cbnz	r4, 80056f2 <USB_EPStartXfer+0x5d2>
 80056f0:	3e01      	subs	r6, #1
 80056f2:	480d      	ldr	r0, [pc, #52]	; (8005728 <USB_EPStartXfer+0x608>)
 80056f4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80056f8:	b280      	uxth	r0, r0
 80056fa:	52e8      	strh	r0, [r5, r3]
 80056fc:	e6c7      	b.n	800548e <USB_EPStartXfer+0x36e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056fe:	fa1f fc86 	uxth.w	ip, r6
 8005702:	f10c 0c01 	add.w	ip, ip, #1
              ep->xfer_len_db = 0U;
 8005706:	2300      	movs	r3, #0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005708:	fa1f f986 	uxth.w	r9, r6
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800570c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005710:	e633      	b.n	800537a <USB_EPStartXfer+0x25a>
 8005712:	fa1f fc86 	uxth.w	ip, r6
 8005716:	f10c 0c01 	add.w	ip, ip, #1
              ep->xfer_len_db = 0U;
 800571a:	2300      	movs	r3, #0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800571c:	fa1f f986 	uxth.w	r9, r6
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005720:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005724:	e789      	b.n	800563a <USB_EPStartXfer+0x51a>
 8005726:	bf00      	nop
 8005728:	ffff8000 	.word	0xffff8000

0800572c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800572c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800572e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005730:	b18b      	cbz	r3, 8005756 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005732:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	f083 0310 	eor.w	r3, r3, #16
 8005746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005752:	2000      	movs	r0, #0
 8005754:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005756:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800575a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005776:	2000      	movs	r0, #0
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800577c:	7b0b      	ldrb	r3, [r1, #12]
 800577e:	bb3b      	cbnz	r3, 80057d0 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8005780:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005782:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005784:	b333      	cbz	r3, 80057d4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005786:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	d50d      	bpl.n	80057aa <USB_EPClearStall+0x2e>
 800578e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80057aa:	78cb      	ldrb	r3, [r1, #3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d00f      	beq.n	80057d0 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	f083 0320 	eor.w	r3, r3, #32
 80057c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80057d8:	045b      	lsls	r3, r3, #17
 80057da:	d50d      	bpl.n	80057f8 <USB_EPClearStall+0x7c>
 80057dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80057e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80057fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	0c1b      	lsrs	r3, r3, #16
 8005808:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005818:	2000      	movs	r0, #0
 800581a:	4770      	bx	lr

0800581c <USB_SetDevAddress>:
  if (address == 0U)
 800581c:	b911      	cbnz	r1, 8005824 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005824:	2000      	movs	r0, #0
 8005826:	4770      	bx	lr

08005828 <USB_DevConnect>:
 8005828:	2000      	movs	r0, #0
 800582a:	4770      	bx	lr

0800582c <USB_DevDisconnect>:
 800582c:	2000      	movs	r0, #0
 800582e:	4770      	bx	lr

08005830 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8005830:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8005834:	b280      	uxth	r0, r0
 8005836:	4770      	bx	lr

08005838 <USB_EP0_OutStart>:
}
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr

0800583c <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800583c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800583e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 8005842:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005848:	d007      	beq.n	800585a <USB_WritePMA+0x1e>
 800584a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800584e:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8005852:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8005856:	4282      	cmp	r2, r0
 8005858:	d1f9      	bne.n	800584e <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800585a:	4770      	bx	lr

0800585c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800585c:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800585e:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8005862:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005864:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005868:	d012      	beq.n	8005890 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800586a:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800586c:	46b4      	mov	ip, r6
 800586e:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005870:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 8005874:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 8005876:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005878:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800587a:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800587e:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005882:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 8005886:	d1f3      	bne.n	8005870 <USB_ReadPMA+0x14>
    pBuf++;
 8005888:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800588c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005890:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8005892:	bf44      	itt	mi
 8005894:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005896:	700b      	strbmi	r3, [r1, #0]
  }
}
 8005898:	bd70      	pop	{r4, r5, r6, pc}
 800589a:	bf00      	nop

0800589c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800589c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800589e:	4903      	ldr	r1, [pc, #12]	; (80058ac <MX_FATFS_Init+0x10>)
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <MX_FATFS_Init+0x14>)
 80058a2:	f002 fdb5 	bl	8008410 <FATFS_LinkDriver>
 80058a6:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <MX_FATFS_Init+0x18>)
 80058a8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058aa:	bd08      	pop	{r3, pc}
 80058ac:	20002878 	.word	0x20002878
 80058b0:	20000010 	.word	0x20000010
 80058b4:	2000287c 	.word	0x2000287c

080058b8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80058b8:	2000      	movs	r0, #0
 80058ba:	4770      	bx	lr

080058bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80058bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 80058be:	f7fa fe87 	bl	80005d0 <SD_disk_initialize>

  /* USER CODE END INIT */
}
 80058c2:	b2c0      	uxtb	r0, r0
 80058c4:	bd08      	pop	{r3, pc}
 80058c6:	bf00      	nop

080058c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80058c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */

	//Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 80058ca:	f7fa ff8b 	bl	80007e4 <SD_disk_status>



  /* USER CODE END STATUS */
}
 80058ce:	b2c0      	uxtb	r0, r0
 80058d0:	bd08      	pop	{r3, pc}
 80058d2:	bf00      	nop

080058d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80058d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
  // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80058d6:	f7fa ff8f 	bl	80007f8 <SD_disk_read>


  /* USER CODE END READ */
}
 80058da:	b2c0      	uxtb	r0, r0
 80058dc:	bd08      	pop	{r3, pc}
 80058de:	bf00      	nop

080058e0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80058e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;

	return SD_disk_write(pdrv, buff, sector, count);
 80058e2:	f7fa fffb 	bl	80008dc <SD_disk_write>


  /* USER CODE END WRITE */
}
 80058e6:	b2c0      	uxtb	r0, r0
 80058e8:	bd08      	pop	{r3, pc}
 80058ea:	bf00      	nop

080058ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80058ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;

    return SD_disk_ioctl(pdrv, cmd, buff);
 80058ee:	f7fb f90f 	bl	8000b10 <SD_disk_ioctl>


  /* USER CODE END IOCTL */
}
 80058f2:	b2c0      	uxtb	r0, r0
 80058f4:	bd08      	pop	{r3, pc}
 80058f6:	bf00      	nop

080058f8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80058fc:	b183      	cbz	r3, 8005920 <USBD_CDC_EP0_RxReady+0x28>
{
 80058fe:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005900:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005904:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005908:	28ff      	cmp	r0, #255	; 0xff
 800590a:	d007      	beq.n	800591c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	4621      	mov	r1, r4
 8005910:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005914:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005916:	23ff      	movs	r3, #255	; 0xff
 8005918:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800591c:	2000      	movs	r0, #0
 800591e:	bd10      	pop	{r4, pc}
 8005920:	2000      	movs	r0, #0
 8005922:	4770      	bx	lr

08005924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005924:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005926:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800592a:	801a      	strh	r2, [r3, #0]
}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000005c 	.word	0x2000005c

08005934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005934:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005936:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800593a:	801a      	strh	r2, [r3, #0]
}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	200000a0 	.word	0x200000a0

08005944 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005944:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005946:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005948:	4801      	ldr	r0, [pc, #4]	; (8005950 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800594a:	801a      	strh	r2, [r3, #0]
}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200000f0 	.word	0x200000f0

08005954 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005954:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005956:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800595a:	801a      	strh	r2, [r3, #0]
}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	200000e4 	.word	0x200000e4

08005964 <USBD_CDC_DataOut>:
{
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005968:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800596c:	f002 ffea 	bl	8008944 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005970:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005974:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005978:	b14b      	cbz	r3, 800598e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800597a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800597e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005988:	4798      	blx	r3
    return USBD_OK;
 800598a:	2000      	movs	r0, #0
}
 800598c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800598e:	2002      	movs	r0, #2
}
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop

08005994 <USBD_CDC_DataIn>:
{
 8005994:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005996:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800599a:	b1ed      	cbz	r5, 80059d8 <USBD_CDC_DataIn+0x44>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800599c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80059a0:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80059a4:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80059a8:	b14a      	cbz	r2, 80059be <USBD_CDC_DataIn+0x2a>
 80059aa:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80059ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80059b2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80059b4:	fbb2 f3f4 	udiv	r3, r2, r4
 80059b8:	fb04 2413 	mls	r4, r4, r3, r2
 80059bc:	b124      	cbz	r4, 80059c8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 80059be:	2300      	movs	r3, #0
    return USBD_OK;
 80059c0:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 80059c2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059c8:	4623      	mov	r3, r4
 80059ca:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 80059cc:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059d0:	f002 ff9c 	bl	800890c <USBD_LL_Transmit>
    return USBD_OK;
 80059d4:	4620      	mov	r0, r4
}
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80059d8:	2002      	movs	r0, #2
}
 80059da:	bd38      	pop	{r3, r4, r5, pc}

080059dc <USBD_CDC_Setup>:
{
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 80059e0:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e2:	780b      	ldrb	r3, [r1, #0]
{
 80059e4:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e6:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 80059ea:	460c      	mov	r4, r1
 80059ec:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059ee:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80059f2:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 80059f6:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059fa:	d013      	beq.n	8005a24 <USBD_CDC_Setup+0x48>
 80059fc:	2e20      	cmp	r6, #32
 80059fe:	d117      	bne.n	8005a30 <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8005a00:	88ce      	ldrh	r6, [r1, #6]
 8005a02:	b1f6      	cbz	r6, 8005a42 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	d53f      	bpl.n	8005a88 <USBD_CDC_Setup+0xac>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a08:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4641      	mov	r1, r8
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	7860      	ldrb	r0, [r4, #1]
 8005a14:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a16:	4641      	mov	r1, r8
 8005a18:	4628      	mov	r0, r5
 8005a1a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 8005a1c:	463e      	mov	r6, r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a1e:	f000 fceb 	bl	80063f8 <USBD_CtlSendData>
 8005a22:	e00a      	b.n	8005a3a <USBD_CDC_Setup+0x5e>
      switch (req->bRequest)
 8005a24:	784b      	ldrb	r3, [r1, #1]
 8005a26:	2b0a      	cmp	r3, #10
 8005a28:	d01f      	beq.n	8005a6a <USBD_CDC_Setup+0x8e>
 8005a2a:	2b0b      	cmp	r3, #11
 8005a2c:	d027      	beq.n	8005a7e <USBD_CDC_Setup+0xa2>
 8005a2e:	b193      	cbz	r3, 8005a56 <USBD_CDC_Setup+0x7a>
          USBD_CtlError(pdev, req);
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 fcaa 	bl	800638c <USBD_CtlError>
          ret = USBD_FAIL;
 8005a38:	2602      	movs	r6, #2
}
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b002      	add	sp, #8
 8005a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a42:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005a46:	4632      	mov	r2, r6
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	7848      	ldrb	r0, [r1, #1]
 8005a4c:	4798      	blx	r3
}
 8005a4e:	4630      	mov	r0, r6
 8005a50:	b002      	add	sp, #8
 8005a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d1e8      	bne.n	8005a30 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f10d 0106 	add.w	r1, sp, #6
 8005a64:	f000 fcc8 	bl	80063f8 <USBD_CtlSendData>
 8005a68:	e7e7      	b.n	8005a3a <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d1de      	bne.n	8005a30 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a72:	2201      	movs	r2, #1
 8005a74:	f10d 0105 	add.w	r1, sp, #5
 8005a78:	f000 fcbe 	bl	80063f8 <USBD_CtlSendData>
 8005a7c:	e7dd      	b.n	8005a3a <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d0d9      	beq.n	8005a3a <USBD_CDC_Setup+0x5e>
 8005a86:	e7d3      	b.n	8005a30 <USBD_CDC_Setup+0x54>
          hcdc->CmdOpCode = req->bRequest;
 8005a88:	784b      	ldrb	r3, [r1, #1]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a8a:	4632      	mov	r2, r6
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a8c:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a90:	4641      	mov	r1, r8
          hcdc->CmdOpCode = req->bRequest;
 8005a92:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a96:	f000 fcc7 	bl	8006428 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005a9a:	463e      	mov	r6, r7
 8005a9c:	e7cd      	b.n	8005a3a <USBD_CDC_Setup+0x5e>
 8005a9e:	bf00      	nop

08005aa0 <USBD_CDC_DeInit>:
{
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005aa4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005aa6:	2181      	movs	r1, #129	; 0x81
 8005aa8:	f002 fee4 	bl	8008874 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aac:	2101      	movs	r1, #1
 8005aae:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ab0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ab2:	f002 fedf 	bl	8008874 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ab6:	2182      	movs	r1, #130	; 0x82
 8005ab8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aba:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005abe:	f002 fed9 	bl	8008874 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005ac2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ac6:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005ac8:	b14b      	cbz	r3, 8005ade <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aca:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ad2:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005ad6:	f002 ff3d 	bl	8008954 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ada:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005ade:	2000      	movs	r0, #0
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop

08005ae4 <USBD_CDC_Init>:
{
 8005ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae8:	7c03      	ldrb	r3, [r0, #16]
{
 8005aea:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aec:	bbbb      	cbnz	r3, 8005b5e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af2:	2202      	movs	r2, #2
 8005af4:	2181      	movs	r1, #129	; 0x81
 8005af6:	f002 fead 	bl	8008854 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005afa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005afc:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b00:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b02:	4629      	mov	r1, r5
 8005b04:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b06:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f002 fea3 	bl	8008854 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b0e:	2308      	movs	r3, #8
 8005b10:	2203      	movs	r2, #3
 8005b12:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b14:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f002 fe9b 	bl	8008854 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b1e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b22:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b24:	f002 ff12 	bl	800894c <USBD_static_malloc>
 8005b28:	4605      	mov	r5, r0
 8005b2a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005b2e:	b348      	cbz	r0, 8005b84 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 8005b30:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b34:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005b3c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005b40:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b44:	7c26      	ldrb	r6, [r4, #16]
 8005b46:	b196      	cbz	r6, 8005b6e <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 8005b48:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b4a:	2340      	movs	r3, #64	; 0x40
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005b54:	f002 fee8 	bl	8008928 <USBD_LL_PrepareReceive>
}
 8005b58:	4630      	mov	r0, r6
 8005b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b5e:	2340      	movs	r3, #64	; 0x40
 8005b60:	2202      	movs	r2, #2
 8005b62:	2181      	movs	r1, #129	; 0x81
 8005b64:	f002 fe76 	bl	8008854 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b68:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b6a:	2340      	movs	r3, #64	; 0x40
 8005b6c:	e7c8      	b.n	8005b00 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b72:	4639      	mov	r1, r7
 8005b74:	4620      	mov	r0, r4
 8005b76:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005b7a:	f002 fed5 	bl	8008928 <USBD_LL_PrepareReceive>
}
 8005b7e:	4630      	mov	r0, r6
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8005b84:	463e      	mov	r6, r7
}
 8005b86:	4630      	mov	r0, r6
 8005b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b8c:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005b8e:	b119      	cbz	r1, 8005b98 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData = fops;
    ret = USBD_OK;
 8005b90:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8005b92:	f8c3 12bc 	str.w	r1, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005b96:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005b98:	2002      	movs	r0, #2
  }

  return ret;
}
 8005b9a:	4770      	bx	lr

08005b9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005b9c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005ba2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005ba4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ba8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop

08005bb0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005bb0:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8

  return USBD_OK;
}
 8005bb6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005bb8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bc2:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8005bc6:	b195      	cbz	r5, 8005bee <USBD_CDC_TransmitPacket+0x2e>
  {
    if (hcdc->TxState == 0U)
 8005bc8:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8005bcc:	b10c      	cbz	r4, 8005bd2 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005bce:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 8005bd2:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bd4:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005bd8:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
      hcdc->TxState = 1U;
 8005bdc:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005be0:	2181      	movs	r1, #129	; 0x81
 8005be2:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005be4:	6306      	str	r6, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005be6:	f002 fe91 	bl	800890c <USBD_LL_Transmit>
      return USBD_OK;
 8005bea:	4620      	mov	r0, r4
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8005bee:	2002      	movs	r0, #2
}
 8005bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf2:	bf00      	nop

08005bf4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bf4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005bf8:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005bfa:	b19a      	cbz	r2, 8005c24 <USBD_CDC_ReceivePacket+0x30>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bfc:	7c04      	ldrb	r4, [r0, #16]
 8005bfe:	b144      	cbz	r4, 8005c12 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c00:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8005c02:	2340      	movs	r3, #64	; 0x40
 8005c04:	2101      	movs	r1, #1
 8005c06:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005c0a:	f002 fe8d 	bl	8008928 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005c0e:	4620      	mov	r0, r4
 8005c10:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c16:	2101      	movs	r1, #1
 8005c18:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005c1c:	f002 fe84 	bl	8008928 <USBD_LL_PrepareReceive>
}
 8005c20:	4620      	mov	r0, r4
 8005c22:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005c24:	2402      	movs	r4, #2
}
 8005c26:	4620      	mov	r0, r4
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop

08005c2c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c2c:	b188      	cbz	r0, 8005c52 <USBD_Init+0x26>
{
 8005c2e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c34:	b113      	cbz	r3, 8005c3c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c3c:	b109      	cbz	r1, 8005c42 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005c3e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c42:	2301      	movs	r3, #1
  pdev->id = id;
 8005c44:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c46:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c4a:	f002 fdb1 	bl	80087b0 <USBD_LL_Init>

  return USBD_OK;
 8005c4e:	2000      	movs	r0, #0
}
 8005c50:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005c52:	2002      	movs	r0, #2
}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c58:	4603      	mov	r3, r0
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005c5a:	b119      	cbz	r1, 8005c64 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 8005c5c:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8005c5e:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005c62:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c64:	2002      	movs	r0, #2
  }

  return status;
}
 8005c66:	4770      	bx	lr

08005c68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c68:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c6a:	f002 fde5 	bl	8008838 <USBD_LL_Start>

  return USBD_OK;
}
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd08      	pop	{r3, pc}
 8005c72:	bf00      	nop

08005c74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c74:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005c76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c7a:	b11b      	cbz	r3, 8005c84 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4798      	blx	r3
 8005c80:	b900      	cbnz	r0, 8005c84 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005c82:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c84:	2002      	movs	r0, #2
}
 8005c86:	bd08      	pop	{r3, pc}

08005c88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c88:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005c8a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4798      	blx	r3

  return USBD_OK;
}
 8005c92:	2000      	movs	r0, #0
 8005c94:	bd08      	pop	{r3, pc}
 8005c96:	bf00      	nop

08005c98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c9c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fb5f 	bl	8006364 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ca6:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8005ca8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae

  switch (pdev->request.bmRequest & 0x1FU)
 8005cac:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8005cb0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8005cb4:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8005cb8:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8005cba:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005cbe:	d009      	beq.n	8005cd4 <USBD_LL_SetupStage+0x3c>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d013      	beq.n	8005cec <USBD_LL_SetupStage+0x54>
 8005cc4:	b163      	cbz	r3, 8005ce0 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005ccc:	f002 fde0 	bl	8008890 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fa74 	bl	80061c4 <USBD_StdItfReq>
}
 8005cdc:	2000      	movs	r0, #0
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 f8fa 	bl	8005edc <USBD_StdDevReq>
}
 8005ce8:	2000      	movs	r0, #0
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8005cec:	4629      	mov	r1, r5
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fa9c 	bl	800622c <USBD_StdEPReq>
}
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}

08005cf8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cfc:	b969      	cbnz	r1, 8005d1a <USBD_LL_DataOutStage+0x22>
 8005cfe:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d00:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005d04:	2a03      	cmp	r2, #3
 8005d06:	d015      	beq.n	8005d34 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005d08:	2a05      	cmp	r2, #5
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	d10e      	bne.n	8005d2c <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d0e:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005d12:	f002 fdbd 	bl	8008890 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005d16:	4620      	mov	r0, r4
}
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	b133      	cbz	r3, 8005d30 <USBD_LL_DataOutStage+0x38>
 8005d22:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005d26:	2a03      	cmp	r2, #3
 8005d28:	d102      	bne.n	8005d30 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8005d2a:	4798      	blx	r3
  return USBD_OK;
 8005d2c:	2000      	movs	r0, #0
}
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005d30:	2002      	movs	r0, #2
}
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005d34:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8005d38:	4291      	cmp	r1, r2
 8005d3a:	d90c      	bls.n	8005d56 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 8005d3c:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 8005d3e:	428a      	cmp	r2, r1
 8005d40:	bf88      	it	hi
 8005d42:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 8005d44:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005d48:	bf98      	it	ls
 8005d4a:	b292      	uxthls	r2, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f000 fb79 	bl	8006444 <USBD_CtlContinueRx>
  return USBD_OK;
 8005d52:	2000      	movs	r0, #0
}
 8005d54:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	b11b      	cbz	r3, 8005d66 <USBD_LL_DataOutStage+0x6e>
 8005d5e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005d62:	2a03      	cmp	r2, #3
 8005d64:	d004      	beq.n	8005d70 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fb76 	bl	8006458 <USBD_CtlSendStatus>
  return USBD_OK;
 8005d6c:	2000      	movs	r0, #0
}
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8005d70:	4798      	blx	r3
 8005d72:	e7f8      	b.n	8005d66 <USBD_LL_DataOutStage+0x6e>

08005d74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d78:	b961      	cbnz	r1, 8005d94 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d7a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d015      	beq.n	8005dae <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d82:	f033 0304 	bics.w	r3, r3, #4
 8005d86:	d02e      	beq.n	8005de6 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d88:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d031      	beq.n	8005df4 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005d90:	2000      	movs	r0, #0
}
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	b133      	cbz	r3, 8005daa <USBD_LL_DataInStage+0x36>
 8005d9c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005da0:	2a03      	cmp	r2, #3
 8005da2:	d102      	bne.n	8005daa <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 8005da4:	4798      	blx	r3
  return USBD_OK;
 8005da6:	2000      	movs	r0, #0
}
 8005da8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8005daa:	2002      	movs	r0, #2
}
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8005dae:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8005db2:	429e      	cmp	r6, r3
 8005db4:	d833      	bhi.n	8005e1e <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005db6:	69c2      	ldr	r2, [r0, #28]
 8005db8:	fbb2 f5f3 	udiv	r5, r2, r3
 8005dbc:	fb03 2515 	mls	r5, r3, r5, r2
 8005dc0:	b9ed      	cbnz	r5, 8005dfe <USBD_LL_DataInStage+0x8a>
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d81b      	bhi.n	8005dfe <USBD_LL_DataInStage+0x8a>
            (pep->total_length >= pep->maxpacket) &&
 8005dc6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d217      	bcs.n	8005dfe <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dce:	462a      	mov	r2, r5
 8005dd0:	f000 fb20 	bl	8006414 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8005ddc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005de0:	f002 fda2 	bl	8008928 <USBD_LL_PrepareReceive>
 8005de4:	e7d0      	b.n	8005d88 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	f002 fd52 	bl	8008890 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8005dec:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d1cd      	bne.n	8005d90 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005dfa:	4618      	mov	r0, r3
}
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dfe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	b11b      	cbz	r3, 8005e0e <USBD_LL_DataInStage+0x9a>
 8005e06:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005e0a:	2a03      	cmp	r2, #3
 8005e0c:	d015      	beq.n	8005e3a <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	4620      	mov	r0, r4
 8005e12:	f002 fd3d 	bl	8008890 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 fb2a 	bl	8006470 <USBD_CtlReceiveStatus>
 8005e1c:	e7b4      	b.n	8005d88 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005e1e:	460d      	mov	r5, r1
 8005e20:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005e22:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8005e24:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f000 faf4 	bl	8006414 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4629      	mov	r1, r5
 8005e32:	4620      	mov	r0, r4
 8005e34:	f002 fd78 	bl	8008928 <USBD_LL_PrepareReceive>
 8005e38:	e7a6      	b.n	8005d88 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4798      	blx	r3
 8005e3e:	e7e6      	b.n	8005e0e <USBD_LL_DataInStage+0x9a>

08005e40 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e42:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e44:	2640      	movs	r6, #64	; 0x40
{
 8005e46:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e48:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4633      	mov	r3, r6
 8005e4e:	f002 fd01 	bl	8008854 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e52:	4633      	mov	r3, r6
 8005e54:	2180      	movs	r1, #128	; 0x80
 8005e56:	2200      	movs	r2, #0
 8005e58:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e5a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e5e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e62:	f002 fcf7 	bl	8008854 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e66:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005e68:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e6c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e6e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e70:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e74:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e78:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e7a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8005e7e:	b123      	cbz	r3, 8005e8a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e80:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005e84:	4620      	mov	r0, r4
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
 8005e8e:	bf00      	nop

08005e90 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e90:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8005e92:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8005e94:	7419      	strb	r1, [r3, #16]
}
 8005e96:	4770      	bx	lr

08005e98 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e98:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e9a:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8005e9c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
}
 8005ea0:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ea2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state =  pdev->dev_state;
 8005ea6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8005eaa:	4770      	bx	lr

08005eac <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005eac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005eb0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005eb2:	bf04      	itt	eq
 8005eb4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005eb8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4770      	bx	lr

08005ec0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005ec4:	2a03      	cmp	r2, #3
 8005ec6:	d001      	beq.n	8005ecc <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4770      	bx	lr
{
 8005ecc:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8005ece:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	b103      	cbz	r3, 8005ed8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005ed6:	4798      	blx	r3
}
 8005ed8:	2000      	movs	r0, #0
 8005eda:	bd08      	pop	{r3, pc}

08005edc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005edc:	b530      	push	{r4, r5, lr}
 8005ede:	780b      	ldrb	r3, [r1, #0]
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee6:	2b20      	cmp	r3, #32
{
 8005ee8:	4604      	mov	r4, r0
 8005eea:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eec:	d00d      	beq.n	8005f0a <USBD_StdDevReq+0x2e>
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d00b      	beq.n	8005f0a <USBD_StdDevReq+0x2e>
 8005ef2:	b19b      	cbz	r3, 8005f1c <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f002 fcca 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005efc:	2100      	movs	r1, #0
 8005efe:	4620      	mov	r0, r4
 8005f00:	f002 fcc6 	bl	8008890 <USBD_LL_StallEP>
}
 8005f04:	2000      	movs	r0, #0
 8005f06:	b003      	add	sp, #12
 8005f08:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005f0a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	4620      	mov	r0, r4
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4798      	blx	r3
}
 8005f16:	2000      	movs	r0, #0
 8005f18:	b003      	add	sp, #12
 8005f1a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005f1c:	784b      	ldrb	r3, [r1, #1]
 8005f1e:	2b09      	cmp	r3, #9
 8005f20:	d8e8      	bhi.n	8005ef4 <USBD_StdDevReq+0x18>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <USBD_StdDevReq+0x4c>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f83 	.word	0x08005f83
 8005f2c:	08005faf 	.word	0x08005faf
 8005f30:	08005ef5 	.word	0x08005ef5
 8005f34:	08005fcd 	.word	0x08005fcd
 8005f38:	08005ef5 	.word	0x08005ef5
 8005f3c:	08005fd5 	.word	0x08005fd5
 8005f40:	0800600d 	.word	0x0800600d
 8005f44:	08005ef5 	.word	0x08005ef5
 8005f48:	08006041 	.word	0x08006041
 8005f4c:	08005f51 	.word	0x08005f51
  cfgidx = (uint8_t)(req->wValue);
 8005f50:	7889      	ldrb	r1, [r1, #2]
 8005f52:	4d9b      	ldr	r5, [pc, #620]	; (80061c0 <USBD_StdDevReq+0x2e4>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f54:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005f56:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f58:	d8cc      	bhi.n	8005ef4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005f5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	f000 810c 	beq.w	800617c <USBD_StdDevReq+0x2a0>
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	f000 80fa 	beq.w	800615e <USBD_StdDevReq+0x282>
  USBD_LL_StallEP(pdev, 0x80U);
 8005f6a:	2180      	movs	r1, #128	; 0x80
 8005f6c:	f002 fc90 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f70:	2100      	movs	r1, #0
 8005f72:	4620      	mov	r0, r4
 8005f74:	f002 fc8c 	bl	8008890 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	7829      	ldrb	r1, [r5, #0]
 8005f7c:	f7ff fe84 	bl	8005c88 <USBD_ClrClassConfig>
        break;
 8005f80:	e7c0      	b.n	8005f04 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005f82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f86:	3b01      	subs	r3, #1
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d8b3      	bhi.n	8005ef4 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8005f8c:	88cb      	ldrh	r3, [r1, #6]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d1b0      	bne.n	8005ef4 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f92:	2201      	movs	r2, #1
      if (pdev->dev_remote_wakeup)
 8005f94:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f98:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8005f9a:	b10b      	cbz	r3, 8005fa0 <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f104 010c 	add.w	r1, r4, #12
 8005fa8:	f000 fa26 	bl	80063f8 <USBD_CtlSendData>
      break;
 8005fac:	e7aa      	b.n	8005f04 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005fae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d89d      	bhi.n	8005ef4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fb8:	884b      	ldrh	r3, [r1, #2]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d1a2      	bne.n	8005f04 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8005fbe:	2300      	movs	r3, #0
        USBD_CtlSendStatus(pdev);
 8005fc0:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 8005fc2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005fc6:	f000 fa47 	bl	8006458 <USBD_CtlSendStatus>
 8005fca:	e79b      	b.n	8005f04 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fcc:	884b      	ldrh	r3, [r1, #2]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d198      	bne.n	8005f04 <USBD_StdDevReq+0x28>
 8005fd2:	e7f5      	b.n	8005fc0 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fd4:	888b      	ldrh	r3, [r1, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d18c      	bne.n	8005ef4 <USBD_StdDevReq+0x18>
 8005fda:	88cb      	ldrh	r3, [r1, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d189      	bne.n	8005ef4 <USBD_StdDevReq+0x18>
 8005fe0:	884d      	ldrh	r5, [r1, #2]
 8005fe2:	2d7f      	cmp	r5, #127	; 0x7f
 8005fe4:	d886      	bhi.n	8005ef4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d082      	beq.n	8005ef4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fee:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005ff0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ff4:	f002 fc7c 	bl	80088f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fa2d 	bl	8006458 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	f000 80d9 	beq.w	80061b6 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006004:	2302      	movs	r3, #2
 8006006:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800600a:	e77b      	b.n	8005f04 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 800600c:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800600e:	886a      	ldrh	r2, [r5, #2]
  uint16_t len = 0U;
 8006010:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8006014:	0a13      	lsrs	r3, r2, #8
 8006016:	3b01      	subs	r3, #1
 8006018:	2b06      	cmp	r3, #6
 800601a:	f63f af6b 	bhi.w	8005ef4 <USBD_StdDevReq+0x18>
 800601e:	a101      	add	r1, pc, #4	; (adr r1, 8006024 <USBD_StdDevReq+0x148>)
 8006020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006024:	080060d3 	.word	0x080060d3
 8006028:	080060bb 	.word	0x080060bb
 800602c:	080060a9 	.word	0x080060a9
 8006030:	08005ef5 	.word	0x08005ef5
 8006034:	08005ef5 	.word	0x08005ef5
 8006038:	08006093 	.word	0x08006093
 800603c:	08006065 	.word	0x08006065
  if (req->wLength != 1U)
 8006040:	88ca      	ldrh	r2, [r1, #6]
 8006042:	2a01      	cmp	r2, #1
 8006044:	f47f af56 	bne.w	8005ef4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006048:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800604c:	2b02      	cmp	r3, #2
 800604e:	d871      	bhi.n	8006134 <USBD_StdDevReq+0x258>
 8006050:	2b00      	cmp	r3, #0
 8006052:	f43f af4f 	beq.w	8005ef4 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8006056:	4601      	mov	r1, r0
 8006058:	2300      	movs	r3, #0
 800605a:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800605e:	f000 f9cb 	bl	80063f8 <USBD_CtlSendData>
        break;
 8006062:	e74f      	b.n	8005f04 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006064:	7c03      	ldrb	r3, [r0, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f af44 	bne.w	8005ef4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800606c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006070:	f10d 0006 	add.w	r0, sp, #6
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006078:	2307      	movs	r3, #7
 800607a:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 800607c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006080:	2a00      	cmp	r2, #0
 8006082:	d067      	beq.n	8006154 <USBD_StdDevReq+0x278>
 8006084:	88eb      	ldrh	r3, [r5, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d15b      	bne.n	8006142 <USBD_StdDevReq+0x266>
          USBD_CtlSendStatus(pdev);
 800608a:	4620      	mov	r0, r4
 800608c:	f000 f9e4 	bl	8006458 <USBD_CtlSendStatus>
 8006090:	e738      	b.n	8005f04 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006092:	7c03      	ldrb	r3, [r0, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f47f af2d 	bne.w	8005ef4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800609a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800609e:	f10d 0006 	add.w	r0, sp, #6
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	4798      	blx	r3
  if (err != 0U)
 80060a6:	e7e9      	b.n	800607c <USBD_StdDevReq+0x1a0>
      switch ((uint8_t)(req->wValue))
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	2a05      	cmp	r2, #5
 80060ac:	f63f af22 	bhi.w	8005ef4 <USBD_StdDevReq+0x18>
 80060b0:	e8df f002 	tbb	[pc, r2]
 80060b4:	282e343a 	.word	0x282e343a
 80060b8:	1722      	.short	0x1722
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ba:	7c03      	ldrb	r3, [r0, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d16a      	bne.n	8006196 <USBD_StdDevReq+0x2ba>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060c4:	f10d 0006 	add.w	r0, sp, #6
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060cc:	2302      	movs	r3, #2
 80060ce:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80060d0:	e7d4      	b.n	800607c <USBD_StdDevReq+0x1a0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060d2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80060d6:	f10d 0106 	add.w	r1, sp, #6
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	7c00      	ldrb	r0, [r0, #16]
 80060de:	4798      	blx	r3
  if (err != 0U)
 80060e0:	e7cc      	b.n	800607c <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060e2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f43f af03 	beq.w	8005ef4 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060ee:	7c20      	ldrb	r0, [r4, #16]
 80060f0:	f10d 0106 	add.w	r1, sp, #6
 80060f4:	4798      	blx	r3
  if (err != 0U)
 80060f6:	e7c1      	b.n	800607c <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f5      	bne.n	80060ee <USBD_StdDevReq+0x212>
 8006102:	e6f7      	b.n	8005ef4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006104:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ef      	bne.n	80060ee <USBD_StdDevReq+0x212>
 800610e:	e6f1      	b.n	8005ef4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006110:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e9      	bne.n	80060ee <USBD_StdDevReq+0x212>
 800611a:	e6eb      	b.n	8005ef4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800611c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e3      	bne.n	80060ee <USBD_StdDevReq+0x212>
 8006126:	e6e5      	b.n	8005ef4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006128:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1dd      	bne.n	80060ee <USBD_StdDevReq+0x212>
 8006132:	e6df      	b.n	8005ef4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006134:	2b03      	cmp	r3, #3
 8006136:	f47f aedd 	bne.w	8005ef4 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800613a:	1d01      	adds	r1, r0, #4
 800613c:	f000 f95c 	bl	80063f8 <USBD_CtlSendData>
        break;
 8006140:	e6e0      	b.n	8005f04 <USBD_StdDevReq+0x28>
      len = MIN(len, req->wLength);
 8006142:	429a      	cmp	r2, r3
 8006144:	bf28      	it	cs
 8006146:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006148:	4601      	mov	r1, r0
 800614a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800614c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006150:	f000 f952 	bl	80063f8 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006154:	88eb      	ldrh	r3, [r5, #6]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f47f aed4 	bne.w	8005f04 <USBD_StdDevReq+0x28>
 800615c:	e795      	b.n	800608a <USBD_StdDevReq+0x1ae>
        if (cfgidx == 0U)
 800615e:	b319      	cbz	r1, 80061a8 <USBD_StdDevReq+0x2cc>
        else if (cfgidx != pdev->dev_config)
 8006160:	6841      	ldr	r1, [r0, #4]
 8006162:	2901      	cmp	r1, #1
 8006164:	d091      	beq.n	800608a <USBD_StdDevReq+0x1ae>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006166:	b2c9      	uxtb	r1, r1
 8006168:	f7ff fd8e 	bl	8005c88 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800616c:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800616e:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8006170:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006172:	f7ff fd7f 	bl	8005c74 <USBD_SetClassConfig>
 8006176:	2802      	cmp	r0, #2
 8006178:	d187      	bne.n	800608a <USBD_StdDevReq+0x1ae>
 800617a:	e6bb      	b.n	8005ef4 <USBD_StdDevReq+0x18>
        if (cfgidx)
 800617c:	2900      	cmp	r1, #0
 800617e:	d084      	beq.n	800608a <USBD_StdDevReq+0x1ae>
          pdev->dev_config = cfgidx;
 8006180:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006182:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8006184:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006186:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800618a:	f7ff fd73 	bl	8005c74 <USBD_SetClassConfig>
 800618e:	2802      	cmp	r0, #2
 8006190:	f47f af7b 	bne.w	800608a <USBD_StdDevReq+0x1ae>
 8006194:	e6ae      	b.n	8005ef4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006196:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800619a:	f10d 0006 	add.w	r0, sp, #6
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061a2:	2302      	movs	r3, #2
 80061a4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80061a6:	e769      	b.n	800607c <USBD_StdDevReq+0x1a0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061a8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80061aa:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ac:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80061b0:	f7ff fd6a 	bl	8005c88 <USBD_ClrClassConfig>
 80061b4:	e769      	b.n	800608a <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80061bc:	e6a2      	b.n	8005f04 <USBD_StdDevReq+0x28>
 80061be:	bf00      	nop
 80061c0:	2000287d 	.word	0x2000287d

080061c4 <USBD_StdItfReq>:
{
 80061c4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c6:	780b      	ldrb	r3, [r1, #0]
{
 80061c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80061ce:	2a40      	cmp	r2, #64	; 0x40
{
 80061d0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d2:	d00a      	beq.n	80061ea <USBD_StdItfReq+0x26>
 80061d4:	065b      	lsls	r3, r3, #25
 80061d6:	d508      	bpl.n	80061ea <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 80061d8:	2180      	movs	r1, #128	; 0x80
 80061da:	f002 fb59 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061de:	2100      	movs	r1, #0
 80061e0:	4620      	mov	r0, r4
 80061e2:	f002 fb55 	bl	8008890 <USBD_LL_StallEP>
}
 80061e6:	2000      	movs	r0, #0
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80061ea:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d811      	bhi.n	8006218 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061f4:	792b      	ldrb	r3, [r5, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d80e      	bhi.n	8006218 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80061fe:	4629      	mov	r1, r5
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4620      	mov	r0, r4
 8006204:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006206:	88eb      	ldrh	r3, [r5, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1ec      	bne.n	80061e6 <USBD_StdItfReq+0x22>
 800620c:	2800      	cmp	r0, #0
 800620e:	d1ea      	bne.n	80061e6 <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8006210:	4620      	mov	r0, r4
 8006212:	f000 f921 	bl	8006458 <USBD_CtlSendStatus>
 8006216:	e7e6      	b.n	80061e6 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8006218:	2180      	movs	r1, #128	; 0x80
 800621a:	4620      	mov	r0, r4
 800621c:	f002 fb38 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006220:	2100      	movs	r1, #0
 8006222:	4620      	mov	r0, r4
 8006224:	f002 fb34 	bl	8008890 <USBD_LL_StallEP>
}
 8006228:	2000      	movs	r0, #0
 800622a:	bd38      	pop	{r3, r4, r5, pc}

0800622c <USBD_StdEPReq>:
{
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	780b      	ldrb	r3, [r1, #0]
 8006230:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006236:	2b20      	cmp	r3, #32
 8006238:	d00c      	beq.n	8006254 <USBD_StdEPReq+0x28>
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d00a      	beq.n	8006254 <USBD_StdEPReq+0x28>
 800623e:	b183      	cbz	r3, 8006262 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	4620      	mov	r0, r4
 8006244:	f002 fb24 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006248:	2100      	movs	r1, #0
 800624a:	4620      	mov	r0, r4
 800624c:	f002 fb20 	bl	8008890 <USBD_LL_StallEP>
}
 8006250:	2000      	movs	r0, #0
 8006252:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8006254:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006258:	4620      	mov	r0, r4
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	4798      	blx	r3
}
 800625e:	2000      	movs	r0, #0
 8006260:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8006262:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006264:	888a      	ldrh	r2, [r1, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	fa5f fc82 	uxtb.w	ip, r2
      switch (req->bRequest)
 800626c:	d03e      	beq.n	80062ec <USBD_StdEPReq+0xc0>
 800626e:	2b03      	cmp	r3, #3
 8006270:	d02a      	beq.n	80062c8 <USBD_StdEPReq+0x9c>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e4      	bne.n	8006240 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8006276:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800627a:	2b02      	cmp	r3, #2
 800627c:	d051      	beq.n	8006322 <USBD_StdEPReq+0xf6>
 800627e:	2b03      	cmp	r3, #3
 8006280:	d1de      	bne.n	8006240 <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006282:	f00c 030f 	and.w	r3, ip, #15
 8006286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800628a:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800628c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006290:	d456      	bmi.n	8006340 <USBD_StdEPReq+0x114>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006292:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0d2      	beq.n	8006240 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800629a:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800629e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80062a2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80062a6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062aa:	b133      	cbz	r3, 80062ba <USBD_StdEPReq+0x8e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80062ac:	4661      	mov	r1, ip
 80062ae:	4620      	mov	r0, r4
 80062b0:	f002 fb0a 	bl	80088c8 <USBD_LL_IsStallEP>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d04f      	beq.n	8006358 <USBD_StdEPReq+0x12c>
                pep->status = 0x0001U;
 80062b8:	2301      	movs	r3, #1
 80062ba:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062bc:	2202      	movs	r2, #2
 80062be:	4629      	mov	r1, r5
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 f899 	bl	80063f8 <USBD_CtlSendData>
              break;
 80062c6:	e7c3      	b.n	8006250 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80062c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d01d      	beq.n	800630c <USBD_StdEPReq+0xe0>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d1b5      	bne.n	8006240 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062d4:	884b      	ldrh	r3, [r1, #2]
 80062d6:	b92b      	cbnz	r3, 80062e4 <USBD_StdEPReq+0xb8>
                if ((ep_addr != 0x00U) &&
 80062d8:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 80062dc:	d002      	beq.n	80062e4 <USBD_StdEPReq+0xb8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062de:	88cb      	ldrh	r3, [r1, #6]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d03b      	beq.n	800635c <USBD_StdEPReq+0x130>
              USBD_CtlSendStatus(pdev);
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 f8b7 	bl	8006458 <USBD_CtlSendStatus>
              break;
 80062ea:	e7b1      	b.n	8006250 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80062ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d00b      	beq.n	800630c <USBD_StdEPReq+0xe0>
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d1a3      	bne.n	8006240 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062f8:	884b      	ldrh	r3, [r1, #2]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1a8      	bne.n	8006250 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 80062fe:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8006302:	d0ef      	beq.n	80062e4 <USBD_StdEPReq+0xb8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006304:	4661      	mov	r1, ip
 8006306:	f002 fad1 	bl	80088ac <USBD_LL_ClearStallEP>
 800630a:	e7eb      	b.n	80062e4 <USBD_StdEPReq+0xb8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8006310:	d096      	beq.n	8006240 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8006312:	4661      	mov	r1, ip
 8006314:	f002 fabc 	bl	8008890 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006318:	2180      	movs	r1, #128	; 0x80
 800631a:	4620      	mov	r0, r4
 800631c:	f002 fab8 	bl	8008890 <USBD_LL_StallEP>
 8006320:	e796      	b.n	8006250 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006322:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8006326:	d18b      	bne.n	8006240 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8006328:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800632a:	0611      	lsls	r1, r2, #24
 800632c:	bf4c      	ite	mi
 800632e:	f100 0114 	addmi.w	r1, r0, #20
 8006332:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006336:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8006338:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800633a:	f000 f85d 	bl	80063f8 <USBD_CtlSendData>
              break;
 800633e:	e787      	b.n	8006250 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f43f af7c 	beq.w	8006240 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006348:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800634c:	1c5d      	adds	r5, r3, #1
 800634e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006352:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006356:	e7a8      	b.n	80062aa <USBD_StdEPReq+0x7e>
                pep->status = 0x0000U;
 8006358:	6028      	str	r0, [r5, #0]
 800635a:	e7af      	b.n	80062bc <USBD_StdEPReq+0x90>
                  USBD_LL_StallEP(pdev, ep_addr);
 800635c:	4661      	mov	r1, ip
 800635e:	f002 fa97 	bl	8008890 <USBD_LL_StallEP>
 8006362:	e7bf      	b.n	80062e4 <USBD_StdEPReq+0xb8>

08006364 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006364:	780b      	ldrb	r3, [r1, #0]
 8006366:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006368:	784b      	ldrb	r3, [r1, #1]
 800636a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800636c:	78ca      	ldrb	r2, [r1, #3]
 800636e:	788b      	ldrb	r3, [r1, #2]
 8006370:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006374:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006376:	794a      	ldrb	r2, [r1, #5]
 8006378:	790b      	ldrb	r3, [r1, #4]
 800637a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800637e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006380:	79ca      	ldrb	r2, [r1, #7]
 8006382:	798b      	ldrb	r3, [r1, #6]
 8006384:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006388:	80c3      	strh	r3, [r0, #6]
}
 800638a:	4770      	bx	lr

0800638c <USBD_CtlError>:
{
 800638c:	b510      	push	{r4, lr}
 800638e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	f002 fa7d 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006396:	4620      	mov	r0, r4
}
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800639c:	2100      	movs	r1, #0
 800639e:	f002 ba77 	b.w	8008890 <USBD_LL_StallEP>
 80063a2:	bf00      	nop

080063a4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80063a4:	b318      	cbz	r0, 80063ee <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80063a6:	7803      	ldrb	r3, [r0, #0]
{
 80063a8:	b430      	push	{r4, r5}
  while (*buf != '\0')
 80063aa:	b30b      	cbz	r3, 80063f0 <USBD_GetString+0x4c>
 80063ac:	4604      	mov	r4, r0
 80063ae:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80063b2:	eb04 030c 	add.w	r3, r4, ip
  while (*buf != '\0')
 80063b6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d1f8      	bne.n	80063b2 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80063c0:	3301      	adds	r3, #1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	b2dc      	uxtb	r4, r3
 80063c6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80063c8:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 80063ca:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80063cc:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80063ce:	7804      	ldrb	r4, [r0, #0]
 80063d0:	b15c      	cbz	r4, 80063ea <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80063d2:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80063d4:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80063dc:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80063de:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 80063e2:	3302      	adds	r3, #2
 80063e4:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	d1f5      	bne.n	80063d6 <USBD_GetString+0x32>
}
 80063ea:	bc30      	pop	{r4, r5}
 80063ec:	4770      	bx	lr
 80063ee:	4770      	bx	lr
  while (*buf != '\0')
 80063f0:	2402      	movs	r4, #2
 80063f2:	4623      	mov	r3, r4
 80063f4:	e7e7      	b.n	80063c6 <USBD_GetString+0x22>
 80063f6:	bf00      	nop

080063f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063fc:	2402      	movs	r4, #2
{
 80063fe:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006400:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006404:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006406:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800640a:	f002 fa7f 	bl	800890c <USBD_LL_Transmit>

  return USBD_OK;
}
 800640e:	2000      	movs	r0, #0
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop

08006414 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006414:	468c      	mov	ip, r1
 8006416:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006418:	2100      	movs	r1, #0
{
 800641a:	4613      	mov	r3, r2
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800641c:	4662      	mov	r2, ip
 800641e:	f002 fa75 	bl	800890c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006422:	2000      	movs	r0, #0
 8006424:	bd08      	pop	{r3, pc}
 8006426:	bf00      	nop

08006428 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006428:	b510      	push	{r4, lr}
 800642a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800642c:	2403      	movs	r4, #3
{
 800642e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006430:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006434:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006436:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800643a:	f002 fa75 	bl	8008928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800643e:	2000      	movs	r0, #0
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop

08006444 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006444:	468c      	mov	ip, r1
 8006446:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006448:	2100      	movs	r1, #0
{
 800644a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800644c:	4662      	mov	r2, ip
 800644e:	f002 fa6b 	bl	8008928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006452:	2000      	movs	r0, #0
 8006454:	bd08      	pop	{r3, pc}
 8006456:	bf00      	nop

08006458 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006458:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800645a:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800645c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800645e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006462:	461a      	mov	r2, r3
 8006464:	4619      	mov	r1, r3
 8006466:	f002 fa51 	bl	800890c <USBD_LL_Transmit>

  return USBD_OK;
}
 800646a:	2000      	movs	r0, #0
 800646c:	bd08      	pop	{r3, pc}
 800646e:	bf00      	nop

08006470 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006470:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006472:	2105      	movs	r1, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006474:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006476:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800647a:	461a      	mov	r2, r3
 800647c:	4619      	mov	r1, r3
 800647e:	f002 fa53 	bl	8008928 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006482:	2000      	movs	r0, #0
 8006484:	bd08      	pop	{r3, pc}
 8006486:	bf00      	nop

08006488 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006488:	4b03      	ldr	r3, [pc, #12]	; (8006498 <disk_status+0x10>)
 800648a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800648e:	6852      	ldr	r2, [r2, #4]
 8006490:	4403      	add	r3, r0
 8006492:	6852      	ldr	r2, [r2, #4]
 8006494:	7a18      	ldrb	r0, [r3, #8]
 8006496:	4710      	bx	r2
 8006498:	20002aa0 	.word	0x20002aa0

0800649c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 800649c:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <disk_initialize+0x24>)
{
 800649e:	4603      	mov	r3, r0
  if(disk.is_initialized[pdrv] == 0)
 80064a0:	5c11      	ldrb	r1, [r2, r0]
 80064a2:	b951      	cbnz	r1, 80064ba <disk_initialize+0x1e>
  { 
    disk.is_initialized[pdrv] = 1;
 80064a4:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064a8:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 80064ac:	6849      	ldr	r1, [r1, #4]
 80064ae:	1810      	adds	r0, r2, r0
    disk.is_initialized[pdrv] = 1;
 80064b0:	f802 c003 	strb.w	ip, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064b4:	7a00      	ldrb	r0, [r0, #8]
 80064b6:	680b      	ldr	r3, [r1, #0]
 80064b8:	4718      	bx	r3
  }
  return stat;
}
 80064ba:	2000      	movs	r0, #0
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20002aa0 	.word	0x20002aa0

080064c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064c4:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064c6:	4c05      	ldr	r4, [pc, #20]	; (80064dc <disk_read+0x18>)
 80064c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80064cc:	686d      	ldr	r5, [r5, #4]
 80064ce:	4404      	add	r4, r0
 80064d0:	68ad      	ldr	r5, [r5, #8]
 80064d2:	7a20      	ldrb	r0, [r4, #8]
 80064d4:	46ac      	mov	ip, r5
  return res;
}
 80064d6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064d8:	4760      	bx	ip
 80064da:	bf00      	nop
 80064dc:	20002aa0 	.word	0x20002aa0

080064e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80064e0:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80064e2:	4c05      	ldr	r4, [pc, #20]	; (80064f8 <disk_write+0x18>)
 80064e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80064e8:	686d      	ldr	r5, [r5, #4]
 80064ea:	4404      	add	r4, r0
 80064ec:	68ed      	ldr	r5, [r5, #12]
 80064ee:	7a20      	ldrb	r0, [r4, #8]
 80064f0:	46ac      	mov	ip, r5
  return res;
}
 80064f2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80064f4:	4760      	bx	ip
 80064f6:	bf00      	nop
 80064f8:	20002aa0 	.word	0x20002aa0

080064fc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <disk_ioctl+0x14>)
 80064fe:	eb03 0c00 	add.w	ip, r3, r0
 8006502:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4718      	bx	r3
 8006510:	20002aa0 	.word	0x20002aa0

08006514 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8006514:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <chk_lock+0xa4>)
{
 8006516:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	b34b      	cbz	r3, 8006570 <chk_lock+0x5c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800651c:	6804      	ldr	r4, [r0, #0]
 800651e:	429c      	cmp	r4, r3
 8006520:	d009      	beq.n	8006536 <chk_lock+0x22>
		if (Files[i].fs) {	/* Existing entry */
 8006522:	68d3      	ldr	r3, [r2, #12]
 8006524:	b34b      	cbz	r3, 800657a <chk_lock+0x66>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006526:	42a3      	cmp	r3, r4
 8006528:	d03f      	beq.n	80065aa <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800652a:	2902      	cmp	r1, #2
 800652c:	bf0c      	ite	eq
 800652e:	2000      	moveq	r0, #0
 8006530:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8006532:	bc30      	pop	{r4, r5}
 8006534:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006536:	6853      	ldr	r3, [r2, #4]
 8006538:	6885      	ldr	r5, [r0, #8]
 800653a:	42ab      	cmp	r3, r5
 800653c:	d020      	beq.n	8006580 <chk_lock+0x6c>
		if (Files[i].fs) {	/* Existing entry */
 800653e:	68d3      	ldr	r3, [r2, #12]
 8006540:	b1db      	cbz	r3, 800657a <chk_lock+0x66>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006542:	429c      	cmp	r4, r3
 8006544:	d1f1      	bne.n	800652a <chk_lock+0x16>
 8006546:	6913      	ldr	r3, [r2, #16]
 8006548:	42ab      	cmp	r3, r5
 800654a:	d1ee      	bne.n	800652a <chk_lock+0x16>
				Files[i].clu == dp->sclust &&
 800654c:	8a94      	ldrh	r4, [r2, #20]
 800654e:	88c3      	ldrh	r3, [r0, #6]
 8006550:	429c      	cmp	r4, r3
 8006552:	d1ea      	bne.n	800652a <chk_lock+0x16>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006554:	2301      	movs	r3, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006556:	b9d9      	cbnz	r1, 8006590 <chk_lock+0x7c>
}
 8006558:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800655a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800655e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006562:	895b      	ldrh	r3, [r3, #10]
 8006564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006568:	bf14      	ite	ne
 800656a:	2000      	movne	r0, #0
 800656c:	2010      	moveq	r0, #16
}
 800656e:	4770      	bx	lr
		if (Files[i].fs) {	/* Existing entry */
 8006570:	68d4      	ldr	r4, [r2, #12]
 8006572:	b1fc      	cbz	r4, 80065b4 <chk_lock+0xa0>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006574:	6805      	ldr	r5, [r0, #0]
 8006576:	42a5      	cmp	r5, r4
 8006578:	d00d      	beq.n	8006596 <chk_lock+0x82>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800657a:	4618      	mov	r0, r3
}
 800657c:	bc30      	pop	{r4, r5}
 800657e:	4770      	bx	lr
				Files[i].clu == dp->sclust &&
 8006580:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8006584:	88c3      	ldrh	r3, [r0, #6]
 8006586:	459c      	cmp	ip, r3
 8006588:	d1d9      	bne.n	800653e <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800658a:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800658c:	2900      	cmp	r1, #0
 800658e:	d0e3      	beq.n	8006558 <chk_lock+0x44>
}
 8006590:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006592:	2010      	movs	r0, #16
}
 8006594:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006596:	6915      	ldr	r5, [r2, #16]
 8006598:	6884      	ldr	r4, [r0, #8]
 800659a:	42a5      	cmp	r5, r4
 800659c:	d1ed      	bne.n	800657a <chk_lock+0x66>
				Files[i].clu == dp->sclust &&
 800659e:	8a94      	ldrh	r4, [r2, #20]
 80065a0:	88c0      	ldrh	r0, [r0, #6]
 80065a2:	4284      	cmp	r4, r0
 80065a4:	d0d6      	beq.n	8006554 <chk_lock+0x40>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065a6:	4618      	mov	r0, r3
 80065a8:	e7e8      	b.n	800657c <chk_lock+0x68>
 80065aa:	6885      	ldr	r5, [r0, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80065ac:	6913      	ldr	r3, [r2, #16]
 80065ae:	42ab      	cmp	r3, r5
 80065b0:	d1bb      	bne.n	800652a <chk_lock+0x16>
 80065b2:	e7cb      	b.n	800654c <chk_lock+0x38>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065b4:	4620      	mov	r0, r4
 80065b6:	e7bc      	b.n	8006532 <chk_lock+0x1e>
 80065b8:	20002884 	.word	0x20002884

080065bc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80065bc:	4b30      	ldr	r3, [pc, #192]	; (8006680 <inc_lock+0xc4>)
{
 80065be:	b530      	push	{r4, r5, lr}
		if (Files[i].fs == dp->fs &&
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	6804      	ldr	r4, [r0, #0]
{
 80065c4:	4684      	mov	ip, r0
		if (Files[i].fs == dp->fs &&
 80065c6:	4294      	cmp	r4, r2
 80065c8:	d021      	beq.n	800660e <inc_lock+0x52>
 80065ca:	68d8      	ldr	r0, [r3, #12]
 80065cc:	42a0      	cmp	r0, r4
 80065ce:	d005      	beq.n	80065dc <inc_lock+0x20>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d034      	beq.n	800663e <inc_lock+0x82>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d050      	beq.n	800667a <inc_lock+0xbe>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065d8:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80065da:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == dp->fs &&
 80065dc:	691d      	ldr	r5, [r3, #16]
 80065de:	f8dc e008 	ldr.w	lr, [ip, #8]
 80065e2:	4575      	cmp	r5, lr
 80065e4:	d1f4      	bne.n	80065d0 <inc_lock+0x14>
			Files[i].clu == dp->sclust &&
 80065e6:	8a9d      	ldrh	r5, [r3, #20]
 80065e8:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80065ec:	4575      	cmp	r5, lr
 80065ee:	d1ef      	bne.n	80065d0 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065f0:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065f2:	b9c1      	cbnz	r1, 8006626 <inc_lock+0x6a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065f4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80065f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80065fc:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
	return i + 1;
 8006600:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006602:	f10c 0c01 	add.w	ip, ip, #1
 8006606:	0051      	lsls	r1, r2, #1
 8006608:	fa1f fc8c 	uxth.w	ip, ip
 800660c:	e02f      	b.n	800666e <inc_lock+0xb2>
		if (Files[i].fs == dp->fs &&
 800660e:	6880      	ldr	r0, [r0, #8]
 8006610:	685d      	ldr	r5, [r3, #4]
 8006612:	4285      	cmp	r5, r0
 8006614:	d1d9      	bne.n	80065ca <inc_lock+0xe>
			Files[i].clu == dp->sclust &&
 8006616:	f8bc 5006 	ldrh.w	r5, [ip, #6]
 800661a:	8918      	ldrh	r0, [r3, #8]
 800661c:	4285      	cmp	r5, r0
 800661e:	d1d4      	bne.n	80065ca <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006620:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006622:	2900      	cmp	r1, #0
 8006624:	d0e6      	beq.n	80065f4 <inc_lock+0x38>
 8006626:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800662a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800662e:	8948      	ldrh	r0, [r1, #10]
 8006630:	0051      	lsls	r1, r2, #1
 8006632:	2800      	cmp	r0, #0
 8006634:	d1d0      	bne.n	80065d8 <inc_lock+0x1c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006636:	f44f 7c80 	mov.w	ip, #256	; 0x100
	return i + 1;
 800663a:	1c50      	adds	r0, r2, #1
 800663c:	e017      	b.n	800666e <inc_lock+0xb2>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800663e:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006640:	2900      	cmp	r1, #0
		Files[i].fs = dp->fs;
 8006642:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006646:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
		Files[i].clu = dp->sclust;
 800664a:	f8dc 4008 	ldr.w	r4, [ip, #8]
		Files[i].fs = dp->fs;
 800664e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
		Files[i].ctr = 0;
 8006652:	f04f 0e00 	mov.w	lr, #0
		Files[i].clu = dp->sclust;
 8006656:	604c      	str	r4, [r1, #4]
		Files[i].idx = dp->index;
 8006658:	f8bc 4006 	ldrh.w	r4, [ip, #6]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800665c:	bf14      	ite	ne
 800665e:	f44f 7c80 	movne.w	ip, #256	; 0x100
 8006662:	f04f 0c01 	moveq.w	ip, #1
		Files[i].ctr = 0;
 8006666:	f8a1 e00a 	strh.w	lr, [r1, #10]
		Files[i].idx = dp->index;
 800666a:	810c      	strh	r4, [r1, #8]
		Files[i].fs = dp->fs;
 800666c:	0051      	lsls	r1, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800666e:	440a      	add	r2, r1
 8006670:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006674:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8006678:	bd30      	pop	{r4, r5, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800667a:	2002      	movs	r0, #2
 800667c:	2201      	movs	r2, #1
 800667e:	e7df      	b.n	8006640 <inc_lock+0x84>
 8006680:	20002884 	.word	0x20002884

08006684 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006684:	6801      	ldr	r1, [r0, #0]
{
 8006686:	4684      	mov	ip, r0
	if (*path) {	/* If the pointer is not a null */
 8006688:	b171      	cbz	r1, 80066a8 <get_ldnumber+0x24>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800668a:	7808      	ldrb	r0, [r1, #0]
 800668c:	281f      	cmp	r0, #31
 800668e:	d90e      	bls.n	80066ae <get_ldnumber+0x2a>
 8006690:	460a      	mov	r2, r1
 8006692:	4603      	mov	r3, r0
 8006694:	e003      	b.n	800669e <get_ldnumber+0x1a>
 8006696:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800669a:	2b1f      	cmp	r3, #31
 800669c:	d907      	bls.n	80066ae <get_ldnumber+0x2a>
 800669e:	2b3a      	cmp	r3, #58	; 0x3a
 80066a0:	d1f9      	bne.n	8006696 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80066a2:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066a4:	428a      	cmp	r2, r1
 80066a6:	d004      	beq.n	80066b2 <get_ldnumber+0x2e>
	int vol = -1;
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80066ac:	4770      	bx	lr
		vol = 0;		/* Drive 0 */
 80066ae:	2000      	movs	r0, #0
 80066b0:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066b2:	2830      	cmp	r0, #48	; 0x30
 80066b4:	d1f8      	bne.n	80066a8 <get_ldnumber+0x24>
					*path = ++tt;
 80066b6:	3201      	adds	r2, #1
 80066b8:	2000      	movs	r0, #0
 80066ba:	f8cc 2000 	str.w	r2, [ip]
 80066be:	4770      	bx	lr

080066c0 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80066c0:	b1a0      	cbz	r0, 80066ec <validate+0x2c>
{
 80066c2:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	b13b      	cbz	r3, 80066d8 <validate+0x18>
 80066c8:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80066cc:	b122      	cbz	r2, 80066d8 <validate+0x18>
 80066ce:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 80066d2:	8882      	ldrh	r2, [r0, #4]
 80066d4:	4291      	cmp	r1, r2
 80066d6:	d001      	beq.n	80066dc <validate+0x1c>
		return FR_INVALID_OBJECT;
 80066d8:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80066da:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80066dc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80066e0:	f7ff fed2 	bl	8006488 <disk_status>
 80066e4:	f010 0001 	ands.w	r0, r0, #1
 80066e8:	d1f6      	bne.n	80066d8 <validate+0x18>
}
 80066ea:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 80066ec:	2009      	movs	r0, #9
}
 80066ee:	4770      	bx	lr

080066f0 <sync_window.part.0>:
FRESULT sync_window (
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 80066f2:	f8d0 542c 	ldr.w	r5, [r0, #1068]	; 0x42c
FRESULT sync_window (
 80066f6:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80066f8:	4601      	mov	r1, r0
 80066fa:	2301      	movs	r3, #1
 80066fc:	462a      	mov	r2, r5
 80066fe:	f890 0401 	ldrb.w	r0, [r0, #1025]	; 0x401
 8006702:	f7ff feed 	bl	80064e0 <disk_write>
 8006706:	b9e8      	cbnz	r0, 8006744 <sync_window.part.0+0x54>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006708:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
 800670c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 8006710:	1aaa      	subs	r2, r5, r2
 8006712:	429a      	cmp	r2, r3
 8006714:	4607      	mov	r7, r0
			fs->wflag = 0;
 8006716:	f884 0404 	strb.w	r0, [r4, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800671a:	d211      	bcs.n	8006740 <sync_window.part.0+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800671c:	f894 6403 	ldrb.w	r6, [r4, #1027]	; 0x403
 8006720:	2e01      	cmp	r6, #1
 8006722:	d802      	bhi.n	800672a <sync_window.part.0+0x3a>
 8006724:	e00c      	b.n	8006740 <sync_window.part.0+0x50>
					wsect += fs->fsize;
 8006726:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800672a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800672c:	462a      	mov	r2, r5
 800672e:	2301      	movs	r3, #1
 8006730:	4621      	mov	r1, r4
 8006732:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006736:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006738:	f7ff fed2 	bl	80064e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800673c:	2e01      	cmp	r6, #1
 800673e:	d1f2      	bne.n	8006726 <sync_window.part.0+0x36>
}
 8006740:	4638      	mov	r0, r7
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 8006744:	2701      	movs	r7, #1
}
 8006746:	4638      	mov	r0, r7
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674a:	bf00      	nop

0800674c <sync_fs>:
{
 800674c:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800674e:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
{
 8006752:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006754:	b96b      	cbnz	r3, 8006772 <sync_fs+0x26>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006756:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 800675a:	2b03      	cmp	r3, #3
 800675c:	d011      	beq.n	8006782 <sync_fs+0x36>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800675e:	2200      	movs	r2, #0
 8006760:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006764:	4611      	mov	r1, r2
 8006766:	f7ff fec9 	bl	80064fc <disk_ioctl>
			res = FR_DISK_ERR;
 800676a:	3800      	subs	r0, #0
 800676c:	bf18      	it	ne
 800676e:	2001      	movne	r0, #1
}
 8006770:	bd10      	pop	{r4, pc}
 8006772:	f7ff ffbd 	bl	80066f0 <sync_window.part.0>
	if (res == FR_OK) {
 8006776:	2800      	cmp	r0, #0
 8006778:	d1fa      	bne.n	8006770 <sync_fs+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800677a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 800677e:	2b03      	cmp	r3, #3
 8006780:	d1ed      	bne.n	800675e <sync_fs+0x12>
 8006782:	f894 3405 	ldrb.w	r3, [r4, #1029]	; 0x405
 8006786:	2b01      	cmp	r3, #1
 8006788:	d1e9      	bne.n	800675e <sync_fs+0x12>
			mem_set(fs->win.d8, 0, SS(fs));
 800678a:	f8b4 240a 	ldrh.w	r2, [r4, #1034]	; 0x40a
	while (cnt--)
 800678e:	b11a      	cbz	r2, 8006798 <sync_fs+0x4c>
		*d++ = (BYTE)val;
 8006790:	2100      	movs	r1, #0
 8006792:	4620      	mov	r0, r4
 8006794:	f002 f90c 	bl	80089b0 <memset>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006798:	f64a 2155 	movw	r1, #43605	; 0xaa55
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800679c:	4810      	ldr	r0, [pc, #64]	; (80067e0 <sync_fs+0x94>)
			fs->winsect = fs->volbase + 1;
 800679e:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80067a2:	6020      	str	r0, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80067a4:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80067a8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80067ac:	f8d4 c410 	ldr.w	ip, [r4, #1040]	; 0x410
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80067b0:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 80067b4:	3020      	adds	r0, #32
			fs->winsect = fs->volbase + 1;
 80067b6:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80067b8:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80067bc:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80067c0:	f8a4 11fe 	strh.w	r1, [r4, #510]	; 0x1fe
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80067c4:	2301      	movs	r3, #1
 80067c6:	4621      	mov	r1, r4
 80067c8:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80067cc:	f8c4 c1e8 	str.w	ip, [r4, #488]	; 0x1e8
			fs->winsect = fs->volbase + 1;
 80067d0:	f8c4 242c 	str.w	r2, [r4, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80067d4:	f7ff fe84 	bl	80064e0 <disk_write>
			fs->fsi_flag = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	f884 3405 	strb.w	r3, [r4, #1029]	; 0x405
 80067de:	e7be      	b.n	800675e <sync_fs+0x12>
 80067e0:	41615252 	.word	0x41615252

080067e4 <f_sync.part.0>:

/*-----------------------------------------------------------------------*/
/* Synchronize the File                                                  */
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
 80067e4:	b538      	push	{r3, r4, r5, lr}
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
 80067e6:	6a04      	ldr	r4, [r0, #32]
FRESULT f_sync (
 80067e8:	4605      	mov	r5, r0
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80067ea:	7ae3      	ldrb	r3, [r4, #11]
 80067ec:	f043 0320 	orr.w	r3, r3, #32
 80067f0:	72e3      	strb	r3, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80067f2:	68c3      	ldr	r3, [r0, #12]
 80067f4:	7723      	strb	r3, [r4, #28]
 80067f6:	8983      	ldrh	r3, [r0, #12]
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	7763      	strb	r3, [r4, #29]
 80067fc:	89c3      	ldrh	r3, [r0, #14]
 80067fe:	77a3      	strb	r3, [r4, #30]
 8006800:	7bc3      	ldrb	r3, [r0, #15]
 8006802:	77e3      	strb	r3, [r4, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006804:	6903      	ldr	r3, [r0, #16]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006806:	0c1a      	lsrs	r2, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006808:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800680c:	76a3      	strb	r3, [r4, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800680e:	0a13      	lsrs	r3, r2, #8
 8006810:	7522      	strb	r2, [r4, #20]
 8006812:	7563      	strb	r3, [r4, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006814:	76e1      	strb	r1, [r4, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8006816:	f7ff f84f 	bl	80058b8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
				ST_WORD(dir + DIR_LstAccDate, 0);
 800681a:	2300      	movs	r3, #0
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
 800681c:	2201      	movs	r2, #1
				ST_WORD(dir + DIR_LstAccDate, 0);
 800681e:	74a3      	strb	r3, [r4, #18]
 8006820:	74e3      	strb	r3, [r4, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006822:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006826:	75a0      	strb	r0, [r4, #22]
 8006828:	75e3      	strb	r3, [r4, #23]
 800682a:	0c03      	lsrs	r3, r0, #16
 800682c:	0e00      	lsrs	r0, r0, #24
 800682e:	7623      	strb	r3, [r4, #24]
 8006830:	7660      	strb	r0, [r4, #25]
				fp->flag &= ~FA__WRITTEN;
 8006832:	79ab      	ldrb	r3, [r5, #6]
				fp->fs->wflag = 1;
 8006834:	6828      	ldr	r0, [r5, #0]
				fp->flag &= ~FA__WRITTEN;
 8006836:	f023 0320 	bic.w	r3, r3, #32
 800683a:	71ab      	strb	r3, [r5, #6]
				fp->fs->wflag = 1;
 800683c:	f880 2404 	strb.w	r2, [r0, #1028]	; 0x404
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8006840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				res = sync_fs(fp->fs);
 8006844:	f7ff bf82 	b.w	800674c <sync_fs>

08006848 <check_fs>:
{
 8006848:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800684a:	f04f 36ff 	mov.w	r6, #4294967295
 800684e:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006850:	42b1      	cmp	r1, r6
{
 8006852:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006854:	f880 3404 	strb.w	r3, [r0, #1028]	; 0x404
 8006858:	f8c0 642c 	str.w	r6, [r0, #1068]	; 0x42c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800685c:	d00e      	beq.n	800687c <check_fs+0x34>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800685e:	460d      	mov	r5, r1
 8006860:	460a      	mov	r2, r1
 8006862:	2301      	movs	r3, #1
 8006864:	4601      	mov	r1, r0
 8006866:	f890 0401 	ldrb.w	r0, [r0, #1025]	; 0x401
 800686a:	f7ff fe2b 	bl	80064c4 <disk_read>
 800686e:	b118      	cbz	r0, 8006878 <check_fs+0x30>
		return 3;
 8006870:	2003      	movs	r0, #3
			fs->winsect = sector;
 8006872:	f8c4 642c 	str.w	r6, [r4, #1068]	; 0x42c
}
 8006876:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8006878:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800687c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006880:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	; 0x1fe
 8006884:	429a      	cmp	r2, r3
 8006886:	d10e      	bne.n	80068a6 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006888:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 800688c:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <check_fs+0x68>)
 800688e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <check_fs+0x62>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006896:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 800689a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800689e:	1a80      	subs	r0, r0, r2
 80068a0:	bf18      	it	ne
 80068a2:	2001      	movne	r0, #1
}
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
		return 2;
 80068a6:	2002      	movs	r0, #2
}
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 80068aa:	2000      	movs	r0, #0
}
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	bf00      	nop
 80068b0:	00544146 	.word	0x00544146

080068b4 <find_volume>:
{
 80068b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80068b8:	2300      	movs	r3, #0
{
 80068ba:	4606      	mov	r6, r0
 80068bc:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 80068be:	4608      	mov	r0, r1
	*rfs = 0;
 80068c0:	6033      	str	r3, [r6, #0]
{
 80068c2:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 80068c4:	f7ff fede 	bl	8006684 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80068c8:	1e04      	subs	r4, r0, #0
 80068ca:	f2c0 80f6 	blt.w	8006aba <find_volume+0x206>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80068ce:	4bc3      	ldr	r3, [pc, #780]	; (8006bdc <find_volume+0x328>)
 80068d0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	f000 80f5 	beq.w	8006ac4 <find_volume+0x210>
	*rfs = fs;							/* Return pointer to the file system object */
 80068da:	6035      	str	r5, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068dc:	f895 3400 	ldrb.w	r3, [r5, #1024]	; 0x400
 80068e0:	b18b      	cbz	r3, 8006906 <find_volume+0x52>
		stat = disk_status(fs->drv);
 80068e2:	f895 0401 	ldrb.w	r0, [r5, #1025]	; 0x401
 80068e6:	f7ff fdcf 	bl	8006488 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068ea:	07c1      	lsls	r1, r0, #31
 80068ec:	d40b      	bmi.n	8006906 <find_volume+0x52>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	f000 80ea 	beq.w	8006ac8 <find_volume+0x214>
 80068f4:	f010 0404 	ands.w	r4, r0, #4
 80068f8:	f000 80d6 	beq.w	8006aa8 <find_volume+0x1f4>
				return FR_WRITE_PROTECTED;
 80068fc:	240a      	movs	r4, #10
}
 80068fe:	4620      	mov	r0, r4
 8006900:	b005      	add	sp, #20
 8006902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006906:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006908:	b2e0      	uxtb	r0, r4
 800690a:	f885 0401 	strb.w	r0, [r5, #1025]	; 0x401
	fs->fs_type = 0;					/* Clear the file system object */
 800690e:	f885 3400 	strb.w	r3, [r5, #1024]	; 0x400
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006912:	f7ff fdc3 	bl	800649c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006916:	07c2      	lsls	r2, r0, #31
 8006918:	f100 80ca 	bmi.w	8006ab0 <find_volume+0x1fc>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800691c:	b10f      	cbz	r7, 8006922 <find_volume+0x6e>
 800691e:	0743      	lsls	r3, r0, #29
 8006920:	d4ec      	bmi.n	80068fc <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006922:	2102      	movs	r1, #2
 8006924:	f895 0401 	ldrb.w	r0, [r5, #1025]	; 0x401
 8006928:	f205 420a 	addw	r2, r5, #1034	; 0x40a
 800692c:	f7ff fde6 	bl	80064fc <disk_ioctl>
 8006930:	4604      	mov	r4, r0
 8006932:	2800      	cmp	r0, #0
 8006934:	f040 80b7 	bne.w	8006aa6 <find_volume+0x1f2>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006938:	f8b5 340a 	ldrh.w	r3, [r5, #1034]	; 0x40a
 800693c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8006940:	b29b      	uxth	r3, r3
 8006942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006946:	f200 80ae 	bhi.w	8006aa6 <find_volume+0x1f2>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800694a:	4601      	mov	r1, r0
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff ff7b 	bl	8006848 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006952:	2801      	cmp	r0, #1
 8006954:	f000 808f 	beq.w	8006a76 <find_volume+0x1c2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006958:	2803      	cmp	r0, #3
 800695a:	f000 80a4 	beq.w	8006aa6 <find_volume+0x1f2>
	bsect = 0;
 800695e:	4627      	mov	r7, r4
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006960:	2800      	cmp	r0, #0
 8006962:	f040 80b3 	bne.w	8006acc <find_volume+0x218>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006966:	f8b5 140a 	ldrh.w	r1, [r5, #1034]	; 0x40a
 800696a:	f8b5 300b 	ldrh.w	r3, [r5, #11]
 800696e:	428b      	cmp	r3, r1
 8006970:	f040 80ac 	bne.w	8006acc <find_volume+0x218>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006974:	8aeb      	ldrh	r3, [r5, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006976:	b903      	cbnz	r3, 800697a <find_volume+0xc6>
 8006978:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800697a:	7c2a      	ldrb	r2, [r5, #16]
	fs->fsize = fasize;
 800697c:	f8c5 3418 	str.w	r3, [r5, #1048]	; 0x418
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006980:	1e50      	subs	r0, r2, #1
 8006982:	2801      	cmp	r0, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006984:	f885 2403 	strb.w	r2, [r5, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006988:	f200 80a0 	bhi.w	8006acc <find_volume+0x218>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800698c:	7b68      	ldrb	r0, [r5, #13]
 800698e:	f885 0402 	strb.w	r0, [r5, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006992:	2800      	cmp	r0, #0
 8006994:	f000 809a 	beq.w	8006acc <find_volume+0x218>
 8006998:	1e46      	subs	r6, r0, #1
 800699a:	4206      	tst	r6, r0
 800699c:	f040 8096 	bne.w	8006acc <find_volume+0x218>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80069a0:	f8b5 e011 	ldrh.w	lr, [r5, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80069a4:	094e      	lsrs	r6, r1, #5
 80069a6:	fbbe fcf6 	udiv	ip, lr, r6
 80069aa:	fb06 e61c 	mls	r6, r6, ip, lr
 80069ae:	b2b6      	uxth	r6, r6
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80069b0:	f8a5 e408 	strh.w	lr, [r5, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80069b4:	2e00      	cmp	r6, #0
 80069b6:	f040 8089 	bne.w	8006acc <find_volume+0x218>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80069ba:	f8b5 8013 	ldrh.w	r8, [r5, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80069be:	f1b8 0f00 	cmp.w	r8, #0
 80069c2:	d101      	bne.n	80069c8 <find_volume+0x114>
 80069c4:	f8d5 8020 	ldr.w	r8, [r5, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80069c8:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	d07c      	beq.n	8006acc <find_volume+0x218>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80069d2:	fb03 f202 	mul.w	r2, r3, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80069d6:	eb0c 0609 	add.w	r6, ip, r9
 80069da:	4416      	add	r6, r2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069dc:	45b0      	cmp	r8, r6
 80069de:	d375      	bcc.n	8006acc <find_volume+0x218>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80069e0:	eba8 0806 	sub.w	r8, r8, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80069e4:	4580      	cmp	r8, r0
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80069e6:	fbb8 fcf0 	udiv	ip, r8, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80069ea:	d36f      	bcc.n	8006acc <find_volume+0x218>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80069ec:	f640 70f5 	movw	r0, #4085	; 0xff5
 80069f0:	4584      	cmp	ip, r0
 80069f2:	d974      	bls.n	8006ade <find_volume+0x22a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80069f4:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80069f8:	4584      	cmp	ip, r0
 80069fa:	f240 80d9 	bls.w	8006bb0 <find_volume+0x2fc>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80069fe:	f10c 0202 	add.w	r2, ip, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006a02:	eb09 0007 	add.w	r0, r9, r7
	fs->database = bsect + sysect;						/* Data start sector */
 8006a06:	443e      	add	r6, r7
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006a08:	f8c5 0420 	str.w	r0, [r5, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8006a0c:	f8c5 6428 	str.w	r6, [r5, #1064]	; 0x428
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006a10:	f8c5 2414 	str.w	r2, [r5, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8006a14:	f8c5 741c 	str.w	r7, [r5, #1052]	; 0x41c
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006a18:	f1be 0f00 	cmp.w	lr, #0
 8006a1c:	d156      	bne.n	8006acc <find_volume+0x218>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006a1e:	1e48      	subs	r0, r1, #1
 8006a20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006a24:	fbb2 f1f1 	udiv	r1, r2, r1
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006a28:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006a2a:	428b      	cmp	r3, r1
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006a2c:	f8c5 2424 	str.w	r2, [r5, #1060]	; 0x424
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006a30:	d34c      	bcc.n	8006acc <find_volume+0x218>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8006a36:	2180      	movs	r1, #128	; 0x80
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006a38:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006a3a:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006a3e:	2a01      	cmp	r2, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006a40:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
	fs->fsi_flag = 0x80;
 8006a44:	f885 1405 	strb.w	r1, [r5, #1029]	; 0x405
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006a48:	d073      	beq.n	8006b32 <find_volume+0x27e>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006a4a:	2603      	movs	r6, #3
	fs->id = ++Fsid;	/* File system mount ID */
 8006a4c:	4964      	ldr	r1, [pc, #400]	; (8006be0 <find_volume+0x32c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a4e:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <find_volume+0x330>)
	fs->id = ++Fsid;	/* File system mount ID */
 8006a50:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 8006a52:	f885 6400 	strb.w	r6, [r5, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8006a56:	3301      	adds	r3, #1
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	800b      	strh	r3, [r1, #0]
 8006a5c:	f8a5 3406 	strh.w	r3, [r5, #1030]	; 0x406
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a60:	6813      	ldr	r3, [r2, #0]
 8006a62:	429d      	cmp	r5, r3
 8006a64:	bf04      	itt	eq
 8006a66:	2300      	moveq	r3, #0
 8006a68:	6013      	streq	r3, [r2, #0]
 8006a6a:	68d3      	ldr	r3, [r2, #12]
 8006a6c:	429d      	cmp	r5, r3
 8006a6e:	d11b      	bne.n	8006aa8 <find_volume+0x1f4>
 8006a70:	2300      	movs	r3, #0
 8006a72:	60d3      	str	r3, [r2, #12]
 8006a74:	e018      	b.n	8006aa8 <find_volume+0x1f4>
 8006a76:	466e      	mov	r6, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006a78:	4631      	mov	r1, r6
 8006a7a:	f505 73df 	add.w	r3, r5, #446	; 0x1be
 8006a7e:	f505 70ff 	add.w	r0, r5, #510	; 0x1fe
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006a82:	791a      	ldrb	r2, [r3, #4]
 8006a84:	b102      	cbz	r2, 8006a88 <find_volume+0x1d4>
 8006a86:	689a      	ldr	r2, [r3, #8]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006a88:	3310      	adds	r3, #16
 8006a8a:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006a8c:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006a90:	d1f7      	bne.n	8006a82 <find_volume+0x1ce>
 8006a92:	f106 0810 	add.w	r8, r6, #16
			bsect = br[i];
 8006a96:	f856 7b04 	ldr.w	r7, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006a9a:	b9cf      	cbnz	r7, 8006ad0 <find_volume+0x21c>
 8006a9c:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006a9e:	4546      	cmp	r6, r8
 8006aa0:	d1f9      	bne.n	8006a96 <find_volume+0x1e2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006aa2:	2803      	cmp	r0, #3
 8006aa4:	d112      	bne.n	8006acc <find_volume+0x218>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006aa6:	2401      	movs	r4, #1
}
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	b005      	add	sp, #20
 8006aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ab0:	2403      	movs	r4, #3
}
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	b005      	add	sp, #20
 8006ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006aba:	240b      	movs	r4, #11
}
 8006abc:	4620      	mov	r0, r4
 8006abe:	b005      	add	sp, #20
 8006ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ac4:	240c      	movs	r4, #12
 8006ac6:	e7ef      	b.n	8006aa8 <find_volume+0x1f4>
			return FR_OK;				/* The file system object is valid */
 8006ac8:	463c      	mov	r4, r7
 8006aca:	e7ed      	b.n	8006aa8 <find_volume+0x1f4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006acc:	240d      	movs	r4, #13
 8006ace:	e7eb      	b.n	8006aa8 <find_volume+0x1f4>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f7ff feb8 	bl	8006848 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d1e0      	bne.n	8006a9e <find_volume+0x1ea>
 8006adc:	e743      	b.n	8006966 <find_volume+0xb2>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006ade:	f10c 0c02 	add.w	ip, ip, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006ae2:	eb09 0007 	add.w	r0, r9, r7
	fs->database = bsect + sysect;						/* Data start sector */
 8006ae6:	443e      	add	r6, r7
	fs->volbase = bsect;								/* Volume start sector */
 8006ae8:	f8c5 741c 	str.w	r7, [r5, #1052]	; 0x41c
	fs->database = bsect + sysect;						/* Data start sector */
 8006aec:	f8c5 6428 	str.w	r6, [r5, #1064]	; 0x428
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006af0:	f8c5 c414 	str.w	ip, [r5, #1044]	; 0x414
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006af4:	f8c5 0420 	str.w	r0, [r5, #1056]	; 0x420
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006af8:	f1be 0f00 	cmp.w	lr, #0
 8006afc:	d0e6      	beq.n	8006acc <find_volume+0x218>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006afe:	2601      	movs	r6, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006b00:	4402      	add	r2, r0
 8006b02:	f8c5 2424 	str.w	r2, [r5, #1060]	; 0x424
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b06:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8006b0a:	f00c 0c01 	and.w	ip, ip, #1
 8006b0e:	eb0c 0252 	add.w	r2, ip, r2, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006b12:	1e48      	subs	r0, r1, #1
 8006b14:	4402      	add	r2, r0
 8006b16:	fbb2 f1f1 	udiv	r1, r2, r1
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	d3d6      	bcc.n	8006acc <find_volume+0x218>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8006b22:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006b24:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
 8006b28:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
	fs->fsi_flag = 0x80;
 8006b2c:	f885 2405 	strb.w	r2, [r5, #1029]	; 0x405
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006b30:	e78c      	b.n	8006a4c <find_volume+0x198>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b32:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
		&& move_window(fs, bsect + 1) == FR_OK)
 8006b36:	3701      	adds	r7, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b38:	429f      	cmp	r7, r3
 8006b3a:	d012      	beq.n	8006b62 <find_volume+0x2ae>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b3c:	f895 3404 	ldrb.w	r3, [r5, #1028]	; 0x404
 8006b40:	bb83      	cbnz	r3, 8006ba4 <find_volume+0x2f0>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006b42:	2301      	movs	r3, #1
 8006b44:	463a      	mov	r2, r7
 8006b46:	4629      	mov	r1, r5
 8006b48:	f895 0401 	ldrb.w	r0, [r5, #1025]	; 0x401
 8006b4c:	f7ff fcba 	bl	80064c4 <disk_read>
 8006b50:	b128      	cbz	r0, 8006b5e <find_volume+0x2aa>
			fs->winsect = sector;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	2603      	movs	r6, #3
 8006b58:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
	return res;
 8006b5c:	e776      	b.n	8006a4c <find_volume+0x198>
			fs->winsect = sector;
 8006b5e:	f8c5 742c 	str.w	r7, [r5, #1068]	; 0x42c
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b62:	f64a 2355 	movw	r3, #43605	; 0xaa55
		fs->fsi_flag = 0;
 8006b66:	2100      	movs	r1, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b68:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8006b6c:	f885 1405 	strb.w	r1, [r5, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b70:	429a      	cmp	r2, r3
 8006b72:	f47f af6a 	bne.w	8006a4a <find_volume+0x196>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <find_volume+0x334>)
 8006b78:	682a      	ldr	r2, [r5, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	f47f af65 	bne.w	8006a4a <find_volume+0x196>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006b80:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8006b84:	f8d5 21e4 	ldr.w	r2, [r5, #484]	; 0x1e4
 8006b88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b8c:	3320      	adds	r3, #32
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f47f af5b 	bne.w	8006a4a <find_volume+0x196>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006b94:	e9d5 237a 	ldrd	r2, r3, [r5, #488]	; 0x1e8
 8006b98:	2603      	movs	r6, #3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006b9a:	f8c5 2410 	str.w	r2, [r5, #1040]	; 0x410
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006b9e:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
 8006ba2:	e753      	b.n	8006a4c <find_volume+0x198>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f7ff fda3 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0c9      	beq.n	8006b42 <find_volume+0x28e>
 8006bae:	e74c      	b.n	8006a4a <find_volume+0x196>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006bb0:	f10c 0002 	add.w	r0, ip, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006bb4:	44b9      	add	r9, r7
	fs->database = bsect + sysect;						/* Data start sector */
 8006bb6:	443e      	add	r6, r7
	fs->volbase = bsect;								/* Volume start sector */
 8006bb8:	f8c5 741c 	str.w	r7, [r5, #1052]	; 0x41c
	fs->database = bsect + sysect;						/* Data start sector */
 8006bbc:	f8c5 6428 	str.w	r6, [r5, #1064]	; 0x428
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006bc0:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006bc4:	f8c5 9420 	str.w	r9, [r5, #1056]	; 0x420
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006bc8:	f1be 0f00 	cmp.w	lr, #0
 8006bcc:	f43f af7e 	beq.w	8006acc <find_volume+0x218>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006bd0:	444a      	add	r2, r9
 8006bd2:	f8c5 2424 	str.w	r2, [r5, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006bd6:	2602      	movs	r6, #2
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bd8:	0042      	lsls	r2, r0, #1
 8006bda:	e79a      	b.n	8006b12 <find_volume+0x25e>
 8006bdc:	20002880 	.word	0x20002880
 8006be0:	2000289c 	.word	0x2000289c
 8006be4:	20002884 	.word	0x20002884
 8006be8:	41615252 	.word	0x41615252

08006bec <put_fat.part.0>:
FRESULT put_fat (
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8006bf0:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
FRESULT put_fat (
 8006bf4:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8006bf6:	2b02      	cmp	r3, #2
FRESULT put_fat (
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8006bfc:	d007      	beq.n	8006c0e <put_fat.part.0+0x22>
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	f000 8084 	beq.w	8006d0c <put_fat.part.0+0x120>
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d030      	beq.n	8006c6a <put_fat.part.0+0x7e>
 8006c08:	2002      	movs	r0, #2
}
 8006c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c0e:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
 8006c12:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8006c16:	085f      	lsrs	r7, r3, #1
 8006c18:	fbb1 f7f7 	udiv	r7, r1, r7
 8006c1c:	4417      	add	r7, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c1e:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
 8006c22:	4297      	cmp	r7, r2
 8006c24:	d011      	beq.n	8006c4a <put_fat.part.0+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c26:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f040 80d4 	bne.w	8006dd8 <put_fat.part.0+0x1ec>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006c30:	2301      	movs	r3, #1
 8006c32:	463a      	mov	r2, r7
 8006c34:	4621      	mov	r1, r4
 8006c36:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006c3a:	f7ff fc43 	bl	80064c4 <disk_read>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d15d      	bne.n	8006cfe <put_fat.part.0+0x112>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006c42:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006c46:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006c4a:	006d      	lsls	r5, r5, #1
 8006c4c:	fbb5 f7f3 	udiv	r7, r5, r3
			fs->wflag = 1;
 8006c50:	2201      	movs	r2, #1
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006c52:	fb03 5517 	mls	r5, r3, r7, r5
			ST_WORD(p, (WORD)val);
 8006c56:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8006c5a:	5566      	strb	r6, [r4, r5]
 8006c5c:	4425      	add	r5, r4
 8006c5e:	7069      	strb	r1, [r5, #1]
			fs->wflag = 1;
 8006c60:	f884 2404 	strb.w	r2, [r4, #1028]	; 0x404
			break;
 8006c64:	2000      	movs	r0, #0
}
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c6a:	f8b0 c40a 	ldrh.w	ip, [r0, #1034]	; 0x40a
			bc = (UINT)clst; bc += bc / 2;
 8006c6e:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c72:	fbb7 f1fc 	udiv	r1, r7, ip
 8006c76:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c7a:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c7e:	eb01 0803 	add.w	r8, r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c82:	4590      	cmp	r8, r2
 8006c84:	d015      	beq.n	8006cb2 <put_fat.part.0+0xc6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c86:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 809e 	bne.w	8006dcc <put_fat.part.0+0x1e0>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006c90:	2301      	movs	r3, #1
 8006c92:	4642      	mov	r2, r8
 8006c94:	4621      	mov	r1, r4
 8006c96:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006c9a:	f7ff fc13 	bl	80064c4 <disk_read>
 8006c9e:	bb70      	cbnz	r0, 8006cfe <put_fat.part.0+0x112>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006ca0:	f8b4 c40a 	ldrh.w	ip, [r4, #1034]	; 0x40a
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	fbb7 f1fc 	udiv	r1, r7, ip
 8006caa:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
			fs->winsect = sector;
 8006cae:	f8c4 842c 	str.w	r8, [r4, #1068]	; 0x42c
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cb2:	f015 0501 	ands.w	r5, r5, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8006cb6:	fb0c 7111 	mls	r1, ip, r1, r7
 8006cba:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cbe:	d067      	beq.n	8006d90 <put_fat.part.0+0x1a4>
			fs->wflag = 1;
 8006cc0:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cc4:	fbb7 fefc 	udiv	lr, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cc8:	5c60      	ldrb	r0, [r4, r1]
 8006cca:	f000 000f 	and.w	r0, r0, #15
 8006cce:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8006cd2:	5460      	strb	r0, [r4, r1]
			fs->wflag = 1;
 8006cd4:	f884 8404 	strb.w	r8, [r4, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cd8:	eb0e 0803 	add.w	r8, lr, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cdc:	4542      	cmp	r2, r8
 8006cde:	f000 8081 	beq.w	8006de4 <put_fat.part.0+0x1f8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff fd04 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d18e      	bne.n	8006c0a <put_fat.part.0+0x1e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006cec:	2301      	movs	r3, #1
 8006cee:	4642      	mov	r2, r8
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006cf6:	f7ff fbe5 	bl	80064c4 <disk_read>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d03c      	beq.n	8006d78 <put_fat.part.0+0x18c>
			fs->winsect = sector;
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8006d02:	2001      	movs	r0, #1
			fs->winsect = sector;
 8006d04:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
}
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d0c:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
 8006d10:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8006d14:	089f      	lsrs	r7, r3, #2
 8006d16:	fbb1 f7f7 	udiv	r7, r1, r7
 8006d1a:	4417      	add	r7, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d1c:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
 8006d20:	4297      	cmp	r7, r2
 8006d22:	d010      	beq.n	8006d46 <put_fat.part.0+0x15a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d24:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d14a      	bne.n	8006dc2 <put_fat.part.0+0x1d6>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	463a      	mov	r2, r7
 8006d30:	4621      	mov	r1, r4
 8006d32:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006d36:	f7ff fbc5 	bl	80064c4 <disk_read>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d1df      	bne.n	8006cfe <put_fat.part.0+0x112>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d3e:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006d42:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d46:	00ad      	lsls	r5, r5, #2
 8006d48:	fbb5 f2f3 	udiv	r2, r5, r3
			fs->wflag = 1;
 8006d4c:	2101      	movs	r1, #1
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d4e:	fb03 5512 	mls	r5, r3, r2, r5
 8006d52:	1963      	adds	r3, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8006d54:	78da      	ldrb	r2, [r3, #3]
			break;
 8006d56:	2000      	movs	r0, #0
			val |= LD_DWORD(p) & 0xF0000000;
 8006d58:	0612      	lsls	r2, r2, #24
 8006d5a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006d5e:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 8006d60:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006d64:	5566      	strb	r6, [r4, r5]
 8006d66:	705a      	strb	r2, [r3, #1]
 8006d68:	0c32      	lsrs	r2, r6, #16
 8006d6a:	0e36      	lsrs	r6, r6, #24
 8006d6c:	709a      	strb	r2, [r3, #2]
 8006d6e:	70de      	strb	r6, [r3, #3]
			fs->wflag = 1;
 8006d70:	f884 1404 	strb.w	r1, [r4, #1028]	; 0x404
}
 8006d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = &fs->win.d8[bc % SS(fs)];
 8006d78:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006d7c:	f8c4 842c 	str.w	r8, [r4, #1068]	; 0x42c
			p = &fs->win.d8[bc % SS(fs)];
 8006d80:	fbb7 f2f3 	udiv	r2, r7, r3
 8006d84:	fb03 7712 	mls	r7, r3, r2, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d88:	b175      	cbz	r5, 8006da8 <put_fat.part.0+0x1bc>
 8006d8a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8006d8e:	e011      	b.n	8006db4 <put_fat.part.0+0x1c8>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d90:	5466      	strb	r6, [r4, r1]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d92:	fbb7 f1fc 	udiv	r1, r7, ip
			fs->wflag = 1;
 8006d96:	2001      	movs	r0, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d98:	eb01 0803 	add.w	r8, r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d9c:	4542      	cmp	r2, r8
			fs->wflag = 1;
 8006d9e:	f884 0404 	strb.w	r0, [r4, #1028]	; 0x404
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006da2:	d19e      	bne.n	8006ce2 <put_fat.part.0+0xf6>
			p = &fs->win.d8[bc % SS(fs)];
 8006da4:	fb0c 7711 	mls	r7, ip, r1, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006da8:	5de3      	ldrb	r3, [r4, r7]
 8006daa:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8006dae:	f023 060f 	bic.w	r6, r3, #15
 8006db2:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8006db4:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006db6:	55e6      	strb	r6, [r4, r7]
			fs->wflag = 1;
 8006db8:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
			break;
 8006dbc:	2000      	movs	r0, #0
}
 8006dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc2:	f7ff fc95 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0b0      	beq.n	8006d2c <put_fat.part.0+0x140>
 8006dca:	e71e      	b.n	8006c0a <put_fat.part.0+0x1e>
 8006dcc:	f7ff fc90 	bl	80066f0 <sync_window.part.0>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f43f af5d 	beq.w	8006c90 <put_fat.part.0+0xa4>
 8006dd6:	e718      	b.n	8006c0a <put_fat.part.0+0x1e>
 8006dd8:	f7ff fc8a 	bl	80066f0 <sync_window.part.0>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f af27 	beq.w	8006c30 <put_fat.part.0+0x44>
 8006de2:	e712      	b.n	8006c0a <put_fat.part.0+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 8006de4:	fb0c 771e 	mls	r7, ip, lr, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006de8:	e7cf      	b.n	8006d8a <put_fat.part.0+0x19e>
 8006dea:	bf00      	nop

08006dec <get_fat.part.0>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8006df0:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8006df4:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8006df6:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8006df8:	460d      	mov	r5, r1
		switch (fs->fs_type) {
 8006dfa:	d006      	beq.n	8006e0a <get_fat.part.0+0x1e>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d07b      	beq.n	8006ef8 <get_fat.part.0+0x10c>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d02d      	beq.n	8006e60 <get_fat.part.0+0x74>
 8006e04:	2001      	movs	r0, #1
}
 8006e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e0a:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
 8006e0e:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8006e12:	085e      	lsrs	r6, r3, #1
 8006e14:	fbb1 f6f6 	udiv	r6, r1, r6
 8006e18:	4416      	add	r6, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e1a:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
 8006e1e:	4296      	cmp	r6, r2
 8006e20:	d012      	beq.n	8006e48 <get_fat.part.0+0x5c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e22:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 80a9 	bne.w	8006f7e <get_fat.part.0+0x192>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4632      	mov	r2, r6
 8006e30:	4621      	mov	r1, r4
 8006e32:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006e36:	f7ff fb45 	bl	80064c4 <disk_read>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 808b 	bne.w	8006f56 <get_fat.part.0+0x16a>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006e40:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006e44:	f8c4 642c 	str.w	r6, [r4, #1068]	; 0x42c
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006e48:	006d      	lsls	r5, r5, #1
 8006e4a:	fbb5 f2f3 	udiv	r2, r5, r3
 8006e4e:	fb03 5512 	mls	r5, r3, r2, r5
			val = LD_WORD(p);
 8006e52:	1963      	adds	r3, r4, r5
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	5d60      	ldrb	r0, [r4, r5]
 8006e58:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e60:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
			bc = (UINT)clst; bc += bc / 2;
 8006e64:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e68:	fbb7 f1f3 	udiv	r1, r7, r3
 8006e6c:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e70:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e74:	eb01 0608 	add.w	r6, r1, r8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e78:	4296      	cmp	r6, r2
 8006e7a:	d015      	beq.n	8006ea8 <get_fat.part.0+0xbc>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e7c:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d177      	bne.n	8006f74 <get_fat.part.0+0x188>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006e84:	2301      	movs	r3, #1
 8006e86:	4632      	mov	r2, r6
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006e8e:	f7ff fb19 	bl	80064c4 <disk_read>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d15f      	bne.n	8006f56 <get_fat.part.0+0x16a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006e96:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	fbb7 f1f3 	udiv	r1, r7, r3
 8006ea0:	f8d4 8420 	ldr.w	r8, [r4, #1056]	; 0x420
			fs->winsect = sector;
 8006ea4:	f8c4 642c 	str.w	r6, [r4, #1068]	; 0x42c
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ea8:	fb03 7111 	mls	r1, r3, r1, r7
 8006eac:	3701      	adds	r7, #1
 8006eae:	5c66      	ldrb	r6, [r4, r1]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eb0:	fbb7 f1f3 	udiv	r1, r7, r3
 8006eb4:	4488      	add	r8, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006eb6:	4590      	cmp	r8, r2
 8006eb8:	d012      	beq.n	8006ee0 <get_fat.part.0+0xf4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006eba:	f894 3404 	ldrb.w	r3, [r4, #1028]	; 0x404
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d163      	bne.n	8006f8a <get_fat.part.0+0x19e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006ecc:	f7ff fafa 	bl	80064c4 <disk_read>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d140      	bne.n	8006f56 <get_fat.part.0+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ed4:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006ed8:	f8c4 842c 	str.w	r8, [r4, #1068]	; 0x42c
	return res;
 8006edc:	fbb7 f1f3 	udiv	r1, r7, r3
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ee0:	fb03 7311 	mls	r3, r3, r1, r7
 8006ee4:	5ce0      	ldrb	r0, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006ee6:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ee8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006eec:	bf4c      	ite	mi
 8006eee:	0900      	lsrmi	r0, r0, #4
 8006ef0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8006ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ef8:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
 8006efc:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8006f00:	089e      	lsrs	r6, r3, #2
 8006f02:	fbb1 f6f6 	udiv	r6, r1, r6
 8006f06:	4416      	add	r6, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f08:	f8d0 242c 	ldr.w	r2, [r0, #1068]	; 0x42c
 8006f0c:	4296      	cmp	r6, r2
 8006f0e:	d00e      	beq.n	8006f2e <get_fat.part.0+0x142>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f10:	f890 3404 	ldrb.w	r3, [r0, #1028]	; 0x404
 8006f14:	bb33      	cbnz	r3, 8006f64 <get_fat.part.0+0x178>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006f16:	2301      	movs	r3, #1
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f894 0401 	ldrb.w	r0, [r4, #1025]	; 0x401
 8006f20:	f7ff fad0 	bl	80064c4 <disk_read>
 8006f24:	b9b8      	cbnz	r0, 8006f56 <get_fat.part.0+0x16a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006f26:	f8b4 340a 	ldrh.w	r3, [r4, #1034]	; 0x40a
			fs->winsect = sector;
 8006f2a:	f8c4 642c 	str.w	r6, [r4, #1068]	; 0x42c
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006f2e:	00ad      	lsls	r5, r5, #2
 8006f30:	fbb5 f2f3 	udiv	r2, r5, r3
 8006f34:	fb03 5512 	mls	r5, r3, r2, r5
 8006f38:	1962      	adds	r2, r4, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006f3a:	7893      	ldrb	r3, [r2, #2]
 8006f3c:	78d0      	ldrb	r0, [r2, #3]
 8006f3e:	5d61      	ldrb	r1, [r4, r5]
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	7852      	ldrb	r2, [r2, #1]
 8006f44:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8006f48:	4308      	orrs	r0, r1
 8006f4a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8006f4e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8006f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->winsect = sector;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f5a:	4618      	mov	r0, r3
			fs->winsect = sector;
 8006f5c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
}
 8006f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f64:	f7ff fbc4 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d0d4      	beq.n	8006f16 <get_fat.part.0+0x12a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	f7ff fbbc 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d083      	beq.n	8006e84 <get_fat.part.0+0x98>
 8006f7c:	e7f6      	b.n	8006f6c <get_fat.part.0+0x180>
 8006f7e:	f7ff fbb7 	bl	80066f0 <sync_window.part.0>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f af52 	beq.w	8006e2c <get_fat.part.0+0x40>
 8006f88:	e7f0      	b.n	8006f6c <get_fat.part.0+0x180>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f7ff fbb0 	bl	80066f0 <sync_window.part.0>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d096      	beq.n	8006ec2 <get_fat.part.0+0xd6>
 8006f94:	e7ea      	b.n	8006f6c <get_fat.part.0+0x180>
 8006f96:	bf00      	nop

08006f98 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f98:	2901      	cmp	r1, #1
 8006f9a:	d932      	bls.n	8007002 <remove_chain+0x6a>
{
 8006f9c:	b538      	push	{r3, r4, r5, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f9e:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	d81c      	bhi.n	8006fe4 <remove_chain+0x4c>
		res = FR_INT_ERR;
 8006faa:	2002      	movs	r0, #2
}
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006fae:	f8d5 3414 	ldr.w	r3, [r5, #1044]	; 0x414
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	d2f9      	bcs.n	8006faa <remove_chain+0x12>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f7ff fe17 	bl	8006bec <put_fat.part.0>
			if (res != FR_OK) break;
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d1f4      	bne.n	8006fac <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006fc2:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	d008      	beq.n	8006fdc <remove_chain+0x44>
				fs->fsi_flag |= 1;
 8006fca:	f895 2405 	ldrb.w	r2, [r5, #1029]	; 0x405
				fs->free_clust++;
 8006fce:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
				fs->free_clust++;
 8006fd4:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8006fd8:	f885 2405 	strb.w	r2, [r5, #1029]	; 0x405
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006fdc:	f8d5 3414 	ldr.w	r3, [r5, #1044]	; 0x414
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d910      	bls.n	8007006 <remove_chain+0x6e>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7ff ff00 	bl	8006dec <get_fat.part.0>
			if (nxt == 0) break;				/* Empty cluster? */
 8006fec:	4621      	mov	r1, r4
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b148      	cbz	r0, 8007006 <remove_chain+0x6e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006ff2:	2801      	cmp	r0, #1
 8006ff4:	d0d9      	beq.n	8006faa <remove_chain+0x12>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006ff6:	1c60      	adds	r0, r4, #1
 8006ff8:	d007      	beq.n	800700a <remove_chain+0x72>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006ffa:	2901      	cmp	r1, #1
 8006ffc:	d8d7      	bhi.n	8006fae <remove_chain+0x16>
		res = FR_INT_ERR;
 8006ffe:	2002      	movs	r0, #2
 8007000:	e7d4      	b.n	8006fac <remove_chain+0x14>
 8007002:	2002      	movs	r0, #2
}
 8007004:	4770      	bx	lr
		res = FR_INT_ERR;
 8007006:	2000      	movs	r0, #0
}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800700a:	2001      	movs	r0, #1
}
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop

08007010 <dir_sdi>:
{
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	460c      	mov	r4, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007014:	6881      	ldr	r1, [r0, #8]
	dp->index = (WORD)idx;	/* Current index */
 8007016:	80c4      	strh	r4, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007018:	2901      	cmp	r1, #1
 800701a:	d021      	beq.n	8007060 <dir_sdi+0x50>
 800701c:	6803      	ldr	r3, [r0, #0]
 800701e:	4605      	mov	r5, r0
 8007020:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007024:	428a      	cmp	r2, r1
 8007026:	d91b      	bls.n	8007060 <dir_sdi+0x50>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007028:	b1e1      	cbz	r1, 8007064 <dir_sdi+0x54>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800702a:	f8b3 640a 	ldrh.w	r6, [r3, #1034]	; 0x40a
 800702e:	f893 0402 	ldrb.w	r0, [r3, #1026]	; 0x402
 8007032:	0976      	lsrs	r6, r6, #5
 8007034:	fb00 f606 	mul.w	r6, r0, r6
 8007038:	e00c      	b.n	8007054 <dir_sdi+0x44>
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fed6 	bl	8006dec <get_fat.part.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	4601      	mov	r1, r0
 8007044:	d049      	beq.n	80070da <dir_sdi+0xca>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007046:	2801      	cmp	r0, #1
 8007048:	d90a      	bls.n	8007060 <dir_sdi+0x50>
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007050:	4282      	cmp	r2, r0
 8007052:	d905      	bls.n	8007060 <dir_sdi+0x50>
		while (idx >= ic) {	/* Follow cluster chain */
 8007054:	42b4      	cmp	r4, r6
 8007056:	d332      	bcc.n	80070be <dir_sdi+0xae>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007058:	428a      	cmp	r2, r1
			idx -= ic;
 800705a:	eba4 0406 	sub.w	r4, r4, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800705e:	d8ec      	bhi.n	800703a <dir_sdi+0x2a>
		return FR_INT_ERR;
 8007060:	2002      	movs	r0, #2
}
 8007062:	bd70      	pop	{r4, r5, r6, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007064:	f893 0400 	ldrb.w	r0, [r3, #1024]	; 0x400
 8007068:	2803      	cmp	r0, #3
 800706a:	d016      	beq.n	800709a <dir_sdi+0x8a>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800706c:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8007070:	42a2      	cmp	r2, r4
 8007072:	d9f5      	bls.n	8007060 <dir_sdi+0x50>
		sect = dp->fs->dirbase;
 8007074:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
	dp->clust = clst;	/* Current cluster# */
 8007078:	60e9      	str	r1, [r5, #12]
	if (!sect) return FR_INT_ERR;
 800707a:	2800      	cmp	r0, #0
 800707c:	d0f0      	beq.n	8007060 <dir_sdi+0x50>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800707e:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8007082:	0952      	lsrs	r2, r2, #5
 8007084:	fbb4 f1f2 	udiv	r1, r4, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007088:	fb02 4211 	mls	r2, r2, r1, r4
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800708c:	4401      	add	r1, r0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800708e:	eb03 1242 	add.w	r2, r3, r2, lsl #5
	return FR_OK;
 8007092:	2000      	movs	r0, #0
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007094:	6129      	str	r1, [r5, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007096:	616a      	str	r2, [r5, #20]
}
 8007098:	bd70      	pop	{r4, r5, r6, pc}
		clst = dp->fs->dirbase;
 800709a:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0e4      	beq.n	800706c <dir_sdi+0x5c>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80070a2:	f8b3 640a 	ldrh.w	r6, [r3, #1034]	; 0x40a
 80070a6:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 80070aa:	0976      	lsrs	r6, r6, #5
 80070ac:	fb01 f606 	mul.w	r6, r1, r6
		while (idx >= ic) {	/* Follow cluster chain */
 80070b0:	42b4      	cmp	r4, r6
 80070b2:	d303      	bcc.n	80070bc <dir_sdi+0xac>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80070b4:	2801      	cmp	r0, #1
 80070b6:	d0d3      	beq.n	8007060 <dir_sdi+0x50>
 80070b8:	4601      	mov	r1, r0
 80070ba:	e7cd      	b.n	8007058 <dir_sdi+0x48>
		while (idx >= ic) {	/* Follow cluster chain */
 80070bc:	4601      	mov	r1, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070be:	3a02      	subs	r2, #2
	clst -= 2;
 80070c0:	1e8e      	subs	r6, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070c2:	4296      	cmp	r6, r2
 80070c4:	d206      	bcs.n	80070d4 <dir_sdi+0xc4>
	return clst * fs->csize + fs->database;
 80070c6:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
 80070ca:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
 80070ce:	fb06 0002 	mla	r0, r6, r2, r0
 80070d2:	e7d1      	b.n	8007078 <dir_sdi+0x68>
	if (!sect) return FR_INT_ERR;
 80070d4:	2002      	movs	r0, #2
	dp->clust = clst;	/* Current cluster# */
 80070d6:	60e9      	str	r1, [r5, #12]
}
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070da:	2001      	movs	r0, #1
}
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	bf00      	nop

080070e0 <create_chain>:
{
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	4606      	mov	r6, r0
	if (clst == 0) {		/* Create a new chain */
 80070e4:	460f      	mov	r7, r1
 80070e6:	bb41      	cbnz	r1, 800713a <create_chain+0x5a>
		scl = fs->last_clust;			/* Get suggested start point */
 80070e8:	f8d0 540c 	ldr.w	r5, [r0, #1036]	; 0x40c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80070ec:	b96d      	cbnz	r5, 800710a <create_chain+0x2a>
 80070ee:	2501      	movs	r5, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80070f0:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
	ncl = scl;				/* Start cluster */
 80070f4:	462c      	mov	r4, r5
		ncl++;							/* Next cluster */
 80070f6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d30c      	bcc.n	8007116 <create_chain+0x36>
			if (ncl > scl) return 0;	/* No free cluster */
 80070fc:	2d01      	cmp	r5, #1
 80070fe:	d92f      	bls.n	8007160 <create_chain+0x80>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007100:	2b02      	cmp	r3, #2
 8007102:	d818      	bhi.n	8007136 <create_chain+0x56>
		if (cs < 2) return 1;			/* Invalid value */
 8007104:	2401      	movs	r4, #1
}
 8007106:	4620      	mov	r0, r4
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800710a:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 800710e:	42ab      	cmp	r3, r5
 8007110:	bf98      	it	ls
 8007112:	2501      	movls	r5, #1
 8007114:	e7ee      	b.n	80070f4 <create_chain+0x14>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007116:	2c01      	cmp	r4, #1
 8007118:	d9f4      	bls.n	8007104 <create_chain+0x24>
 800711a:	4621      	mov	r1, r4
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff fe65 	bl	8006dec <get_fat.part.0>
		if (cs == 0) break;				/* Found a free cluster */
 8007122:	b300      	cbz	r0, 8007166 <create_chain+0x86>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007124:	1c41      	adds	r1, r0, #1
 8007126:	d02b      	beq.n	8007180 <create_chain+0xa0>
 8007128:	2801      	cmp	r0, #1
 800712a:	d0eb      	beq.n	8007104 <create_chain+0x24>
		if (ncl == scl) return 0;		/* No free cluster */
 800712c:	42a5      	cmp	r5, r4
 800712e:	d017      	beq.n	8007160 <create_chain+0x80>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007130:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 8007134:	e7df      	b.n	80070f6 <create_chain+0x16>
			ncl = 2;
 8007136:	2402      	movs	r4, #2
 8007138:	e7ef      	b.n	800711a <create_chain+0x3a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800713a:	2901      	cmp	r1, #1
 800713c:	d0e2      	beq.n	8007104 <create_chain+0x24>
 800713e:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 8007142:	4299      	cmp	r1, r3
 8007144:	d2de      	bcs.n	8007104 <create_chain+0x24>
 8007146:	f7ff fe51 	bl	8006dec <get_fat.part.0>
		if (cs < 2) return 1;			/* Invalid value */
 800714a:	2801      	cmp	r0, #1
 800714c:	4604      	mov	r4, r0
 800714e:	d9d9      	bls.n	8007104 <create_chain+0x24>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007150:	1c60      	adds	r0, r4, #1
 8007152:	d015      	beq.n	8007180 <create_chain+0xa0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007154:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 8007158:	42a3      	cmp	r3, r4
 800715a:	d8d4      	bhi.n	8007106 <create_chain+0x26>
 800715c:	463d      	mov	r5, r7
 800715e:	e7c9      	b.n	80070f4 <create_chain+0x14>
			if (ncl > scl) return 0;	/* No free cluster */
 8007160:	2400      	movs	r4, #0
}
 8007162:	4620      	mov	r0, r4
 8007164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007166:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 800716a:	42a3      	cmp	r3, r4
 800716c:	d9ca      	bls.n	8007104 <create_chain+0x24>
 800716e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007172:	4621      	mov	r1, r4
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff fd39 	bl	8006bec <put_fat.part.0>
	if (res == FR_OK && clst != 0) {
 800717a:	b128      	cbz	r0, 8007188 <create_chain+0xa8>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800717c:	2801      	cmp	r0, #1
 800717e:	d1c1      	bne.n	8007104 <create_chain+0x24>
 8007180:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007184:	4620      	mov	r0, r4
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_OK && clst != 0) {
 8007188:	b167      	cbz	r7, 80071a4 <create_chain+0xc4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800718a:	2f01      	cmp	r7, #1
 800718c:	d0ba      	beq.n	8007104 <create_chain+0x24>
 800718e:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 8007192:	429f      	cmp	r7, r3
 8007194:	d2b6      	bcs.n	8007104 <create_chain+0x24>
 8007196:	4622      	mov	r2, r4
 8007198:	4639      	mov	r1, r7
 800719a:	4630      	mov	r0, r6
 800719c:	f7ff fd26 	bl	8006bec <put_fat.part.0>
	if (res == FR_OK) {
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d1eb      	bne.n	800717c <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80071a4:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
		fs->last_clust = ncl;			/* Update FSINFO */
 80071a8:	f8c6 440c 	str.w	r4, [r6, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	d0aa      	beq.n	8007106 <create_chain+0x26>
			fs->fsi_flag |= 1;
 80071b0:	f896 2405 	ldrb.w	r2, [r6, #1029]	; 0x405
			fs->free_clust--;
 80071b4:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 80071b6:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 80071ba:	f8c6 3410 	str.w	r3, [r6, #1040]	; 0x410
			fs->fsi_flag |= 1;
 80071be:	f886 2405 	strb.w	r2, [r6, #1029]	; 0x405
 80071c2:	e7a0      	b.n	8007106 <create_chain+0x26>

080071c4 <f_write.part.0>:
FRESULT f_write (
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	4605      	mov	r5, r0
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80071ca:	6880      	ldr	r0, [r0, #8]
FRESULT f_write (
 80071cc:	b083      	sub	sp, #12
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80071ce:	42d0      	cmn	r0, r2
 80071d0:	d30b      	bcc.n	80071ea <f_write.part.0+0x26>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80071d2:	68eb      	ldr	r3, [r5, #12]
 80071d4:	4283      	cmp	r3, r0
 80071d6:	bf38      	it	cc
 80071d8:	60e8      	strcc	r0, [r5, #12]
	LEAVE_FF(fp->fs, FR_OK);
 80071da:	2000      	movs	r0, #0
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80071dc:	79ab      	ldrb	r3, [r5, #6]
 80071de:	f043 0320 	orr.w	r3, r3, #32
 80071e2:	71ab      	strb	r3, [r5, #6]
}
 80071e4:	b003      	add	sp, #12
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for ( ;  btw;							/* Repeat until all data written */
 80071ea:	4616      	mov	r6, r2
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d0f0      	beq.n	80071d2 <f_write.part.0+0xe>
 80071f0:	468a      	mov	sl, r1
 80071f2:	461f      	mov	r7, r3
		fp->fs->wflag = 1;
 80071f4:	f04f 0801 	mov.w	r8, #1
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80071f8:	f8d5 b000 	ldr.w	fp, [r5]
 80071fc:	f8bb 440a 	ldrh.w	r4, [fp, #1034]	; 0x40a
 8007200:	fbb0 f1f4 	udiv	r1, r0, r4
 8007204:	fb04 0311 	mls	r3, r4, r1, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d046      	beq.n	800729a <f_write.part.0+0xd6>
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800720c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007210:	f8db 242c 	ldr.w	r2, [fp, #1068]	; 0x42c
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007214:	1ae4      	subs	r4, r4, r3
		if (wcnt > btw) wcnt = btw;
 8007216:	42b4      	cmp	r4, r6
 8007218:	bf28      	it	cs
 800721a:	4634      	movcs	r4, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800721c:	4591      	cmp	r9, r2
 800721e:	d021      	beq.n	8007264 <f_write.part.0+0xa0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007220:	f89b 3404 	ldrb.w	r3, [fp, #1028]	; 0x404
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80c7 	bne.w	80073b8 <f_write.part.0+0x1f4>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800722a:	2301      	movs	r3, #1
 800722c:	464a      	mov	r2, r9
 800722e:	4659      	mov	r1, fp
 8007230:	f89b 0401 	ldrb.w	r0, [fp, #1025]	; 0x401
 8007234:	f7ff f946 	bl	80064c4 <disk_read>
 8007238:	b148      	cbz	r0, 800724e <f_write.part.0+0x8a>
			fs->winsect = sector;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	f8cb 342c 	str.w	r3, [fp, #1068]	; 0x42c
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007242:	2301      	movs	r3, #1
 8007244:	4618      	mov	r0, r3
 8007246:	71eb      	strb	r3, [r5, #7]
}
 8007248:	b003      	add	sp, #12
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800724e:	f8cb 942c 	str.w	r9, [fp, #1068]	; 0x42c
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007252:	f8d5 b000 	ldr.w	fp, [r5]
 8007256:	68a8      	ldr	r0, [r5, #8]
 8007258:	f8bb 140a 	ldrh.w	r1, [fp, #1034]	; 0x40a
 800725c:	fbb0 f3f1 	udiv	r3, r0, r1
 8007260:	fb01 0313 	mls	r3, r1, r3, r0
	while (cnt--)
 8007264:	4652      	mov	r2, sl
 8007266:	b16c      	cbz	r4, 8007284 <f_write.part.0+0xc0>
 8007268:	3b01      	subs	r3, #1
 800726a:	eb0b 0103 	add.w	r1, fp, r3
 800726e:	eb0a 0204 	add.w	r2, sl, r4
		*d++ = *s++;
 8007272:	f81a 3b01 	ldrb.w	r3, [sl], #1
	while (cnt--)
 8007276:	4592      	cmp	sl, r2
		*d++ = *s++;
 8007278:	f801 3f01 	strb.w	r3, [r1, #1]!
	while (cnt--)
 800727c:	d1f9      	bne.n	8007272 <f_write.part.0+0xae>
		fp->fs->wflag = 1;
 800727e:	f8d5 b000 	ldr.w	fp, [r5]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007282:	68a8      	ldr	r0, [r5, #8]
		fp->fs->wflag = 1;
 8007284:	f88b 8404 	strb.w	r8, [fp, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4420      	add	r0, r4
 800728c:	4423      	add	r3, r4
	for ( ;  btw;							/* Repeat until all data written */
 800728e:	1b36      	subs	r6, r6, r4
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007290:	60a8      	str	r0, [r5, #8]
 8007292:	4692      	mov	sl, r2
 8007294:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8007296:	d1af      	bne.n	80071f8 <f_write.part.0+0x34>
 8007298:	e79b      	b.n	80071d2 <f_write.part.0+0xe>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800729a:	f89b 3402 	ldrb.w	r3, [fp, #1026]	; 0x402
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	400a      	ands	r2, r1
			if (!csect) {					/* On the cluster boundary? */
 80072a2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80072a6:	d10f      	bne.n	80072c8 <f_write.part.0+0x104>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d167      	bne.n	800737c <f_write.part.0+0x1b8>
					clst = fp->sclust;		/* Follow from the origin */
 80072ac:	6928      	ldr	r0, [r5, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f000 80a8 	beq.w	8007404 <f_write.part.0+0x240>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80072b4:	2801      	cmp	r0, #1
 80072b6:	d03f      	beq.n	8007338 <f_write.part.0+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d0c2      	beq.n	8007242 <f_write.part.0+0x7e>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80072bc:	692b      	ldr	r3, [r5, #16]
				fp->clust = clst;			/* Update current cluster */
 80072be:	6168      	str	r0, [r5, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80072c0:	b903      	cbnz	r3, 80072c4 <f_write.part.0+0x100>
 80072c2:	6128      	str	r0, [r5, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 80072c4:	f8d5 b000 	ldr.w	fp, [r5]
 80072c8:	f8db 142c 	ldr.w	r1, [fp, #1068]	; 0x42c
 80072cc:	69ab      	ldr	r3, [r5, #24]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	d038      	beq.n	8007344 <f_write.part.0+0x180>
	clst -= 2;
 80072d2:	696b      	ldr	r3, [r5, #20]
 80072d4:	f1a3 0902 	sub.w	r9, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072d8:	f8db 3414 	ldr.w	r3, [fp, #1044]	; 0x414
 80072dc:	3b02      	subs	r3, #2
 80072de:	4599      	cmp	r9, r3
 80072e0:	d22a      	bcs.n	8007338 <f_write.part.0+0x174>
	return clst * fs->csize + fs->database;
 80072e2:	f89b 1402 	ldrb.w	r1, [fp, #1026]	; 0x402
 80072e6:	f8db 3428 	ldr.w	r3, [fp, #1064]	; 0x428
 80072ea:	fb01 3309 	mla	r3, r1, r9, r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80072ee:	b31b      	cbz	r3, 8007338 <f_write.part.0+0x174>
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80072f0:	f8bb 440a 	ldrh.w	r4, [fp, #1034]	; 0x40a
			sect += csect;
 80072f4:	eb03 0902 	add.w	r9, r3, r2
			if (cc) {						/* Write maximum contiguous sectors directly */
 80072f8:	42b4      	cmp	r4, r6
 80072fa:	d832      	bhi.n	8007362 <f_write.part.0+0x19e>
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80072fc:	fbb6 f4f4 	udiv	r4, r6, r4
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007300:	1913      	adds	r3, r2, r4
 8007302:	4299      	cmp	r1, r3
					cc = fp->fs->csize - csect;
 8007304:	bf38      	it	cc
 8007306:	1a8c      	subcc	r4, r1, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007308:	4623      	mov	r3, r4
 800730a:	464a      	mov	r2, r9
 800730c:	4651      	mov	r1, sl
 800730e:	f89b 0401 	ldrb.w	r0, [fp, #1025]	; 0x401
 8007312:	f7ff f8e5 	bl	80064e0 <disk_write>
 8007316:	2800      	cmp	r0, #0
 8007318:	d193      	bne.n	8007242 <f_write.part.0+0x7e>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800731a:	682a      	ldr	r2, [r5, #0]
 800731c:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007320:	f8b2 140a 	ldrh.w	r1, [r2, #1034]	; 0x40a
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8007324:	eba3 0309 	sub.w	r3, r3, r9
 8007328:	429c      	cmp	r4, r3
 800732a:	d858      	bhi.n	80073de <f_write.part.0+0x21a>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800732c:	fb01 f404 	mul.w	r4, r1, r4
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007330:	68a8      	ldr	r0, [r5, #8]
 8007332:	eb0a 0204 	add.w	r2, sl, r4
				continue;
 8007336:	e7a7      	b.n	8007288 <f_write.part.0+0xc4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007338:	2302      	movs	r3, #2
 800733a:	4618      	mov	r0, r3
 800733c:	71eb      	strb	r3, [r5, #7]
}
 800733e:	b003      	add	sp, #12
 8007340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007344:	f89b 3404 	ldrb.w	r3, [fp, #1028]	; 0x404
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0c2      	beq.n	80072d2 <f_write.part.0+0x10e>
 800734c:	4658      	mov	r0, fp
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	f7ff f9ce 	bl	80066f0 <sync_window.part.0>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 8007354:	2800      	cmp	r0, #0
 8007356:	f47f af74 	bne.w	8007242 <f_write.part.0+0x7e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800735a:	f8d5 b000 	ldr.w	fp, [r5]
 800735e:	9a01      	ldr	r2, [sp, #4]
 8007360:	e7b7      	b.n	80072d2 <f_write.part.0+0x10e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 8007362:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 8007366:	4298      	cmp	r0, r3
 8007368:	d21f      	bcs.n	80073aa <f_write.part.0+0x1e6>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800736a:	f8db 242c 	ldr.w	r2, [fp, #1068]	; 0x42c
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800736e:	fbb0 f3f4 	udiv	r3, r0, r4
			fp->dsect = sect;
 8007372:	f8c5 9018 	str.w	r9, [r5, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007376:	fb04 0313 	mls	r3, r4, r3, r0
 800737a:	e74b      	b.n	8007214 <f_write.part.0+0x50>
					if (fp->cltbl)
 800737c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800737e:	2c00      	cmp	r4, #0
 8007380:	d04a      	beq.n	8007418 <f_write.part.0+0x254>
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007382:	fbb1 f1f3 	udiv	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007386:	6863      	ldr	r3, [r4, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007388:	3404      	adds	r4, #4
		if (!ncl) return 0;		/* End of table? (error) */
 800738a:	b933      	cbnz	r3, 800739a <f_write.part.0+0x1d6>
 800738c:	e721      	b.n	80071d2 <f_write.part.0+0xe>
		cl -= ncl; tbl++;		/* Next fragment */
 800738e:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007390:	f854 3f08 	ldr.w	r3, [r4, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 8007394:	2b00      	cmp	r3, #0
 8007396:	f43f af1c 	beq.w	80071d2 <f_write.part.0+0xe>
		if (cl < ncl) break;	/* In this fragment? */
 800739a:	4299      	cmp	r1, r3
 800739c:	d2f7      	bcs.n	800738e <f_write.part.0+0x1ca>
	return cl + *tbl;	/* Return the cluster number */
 800739e:	6860      	ldr	r0, [r4, #4]
 80073a0:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d186      	bne.n	80072b4 <f_write.part.0+0xf0>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80073a6:	68a8      	ldr	r0, [r5, #8]
 80073a8:	e713      	b.n	80071d2 <f_write.part.0+0xe>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80073aa:	f89b 3404 	ldrb.w	r3, [fp, #1028]	; 0x404
 80073ae:	b953      	cbnz	r3, 80073c6 <f_write.part.0+0x202>
				fp->fs->winsect = sect;
 80073b0:	464a      	mov	r2, r9
 80073b2:	f8cb 942c 	str.w	r9, [fp, #1068]	; 0x42c
 80073b6:	e7da      	b.n	800736e <f_write.part.0+0x1aa>
 80073b8:	4658      	mov	r0, fp
 80073ba:	f7ff f999 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f af33 	beq.w	800722a <f_write.part.0+0x66>
 80073c4:	e73d      	b.n	8007242 <f_write.part.0+0x7e>
 80073c6:	4658      	mov	r0, fp
 80073c8:	f7ff f992 	bl	80066f0 <sync_window.part.0>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f47f af38 	bne.w	8007242 <f_write.part.0+0x7e>
				fp->fs->winsect = sect;
 80073d2:	f8d5 b000 	ldr.w	fp, [r5]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80073d6:	68a8      	ldr	r0, [r5, #8]
 80073d8:	f8bb 440a 	ldrh.w	r4, [fp, #1034]	; 0x40a
 80073dc:	e7e8      	b.n	80073b0 <f_write.part.0+0x1ec>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 80073de:	fb01 a303 	mla	r3, r1, r3, sl
	while (cnt--)
 80073e2:	b151      	cbz	r1, 80073fa <f_write.part.0+0x236>
 80073e4:	3a01      	subs	r2, #1
 80073e6:	4419      	add	r1, r3
		*d++ = *s++;
 80073e8:	f813 0b01 	ldrb.w	r0, [r3], #1
	while (cnt--)
 80073ec:	428b      	cmp	r3, r1
		*d++ = *s++;
 80073ee:	f802 0f01 	strb.w	r0, [r2, #1]!
	while (cnt--)
 80073f2:	d1f9      	bne.n	80073e8 <f_write.part.0+0x224>
					fp->fs->wflag = 0;
 80073f4:	682a      	ldr	r2, [r5, #0]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80073f6:	f8b2 140a 	ldrh.w	r1, [r2, #1034]	; 0x40a
					fp->fs->wflag = 0;
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	f882 3404 	strb.w	r3, [r2, #1028]	; 0x404
 8007402:	e793      	b.n	800732c <f_write.part.0+0x168>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007404:	4611      	mov	r1, r2
 8007406:	4658      	mov	r0, fp
 8007408:	9201      	str	r2, [sp, #4]
 800740a:	f7ff fe69 	bl	80070e0 <create_chain>
 800740e:	9a01      	ldr	r2, [sp, #4]
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007410:	2800      	cmp	r0, #0
 8007412:	f47f af4f 	bne.w	80072b4 <f_write.part.0+0xf0>
 8007416:	e7c6      	b.n	80073a6 <f_write.part.0+0x1e2>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007418:	4658      	mov	r0, fp
 800741a:	6969      	ldr	r1, [r5, #20]
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	f7ff fe5f 	bl	80070e0 <create_chain>
 8007422:	9a01      	ldr	r2, [sp, #4]
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007424:	2800      	cmp	r0, #0
 8007426:	f47f af45 	bne.w	80072b4 <f_write.part.0+0xf0>
 800742a:	e7bc      	b.n	80073a6 <f_write.part.0+0x1e2>

0800742c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800742c:	b570      	push	{r4, r5, r6, lr}
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800742e:	290a      	cmp	r1, #10
{
 8007430:	460d      	mov	r5, r1
 8007432:	4604      	mov	r4, r0
 8007434:	b082      	sub	sp, #8
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007436:	d026      	beq.n	8007486 <putc_bfd+0x5a>
		putc_bfd(pb, '\r');

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007438:	6866      	ldr	r6, [r4, #4]
	if (i < 0) return;
 800743a:	2e00      	cmp	r6, #0
 800743c:	db08      	blt.n	8007450 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800743e:	19a3      	adds	r3, r4, r6
 8007440:	3601      	adds	r6, #1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007442:	2e3c      	cmp	r6, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8007444:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007446:	dc05      	bgt.n	8007454 <putc_bfd+0x28>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
 8007448:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 800744a:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 800744c:	3301      	adds	r3, #1
 800744e:	60a3      	str	r3, [r4, #8]
}
 8007450:	b002      	add	sp, #8
 8007452:	bd70      	pop	{r4, r5, r6, pc}
	*bw = 0;	/* Clear write byte counter */
 8007454:	2300      	movs	r3, #0
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007456:	6825      	ldr	r5, [r4, #0]
	*bw = 0;	/* Clear write byte counter */
 8007458:	9301      	str	r3, [sp, #4]
	res = validate(fp);						/* Check validity */
 800745a:	4628      	mov	r0, r5
 800745c:	f7ff f930 	bl	80066c0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007460:	b958      	cbnz	r0, 800747a <putc_bfd+0x4e>
	if (fp->err)							/* Check error */
 8007462:	79eb      	ldrb	r3, [r5, #7]
 8007464:	b94b      	cbnz	r3, 800747a <putc_bfd+0x4e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007466:	79ab      	ldrb	r3, [r5, #6]
 8007468:	079b      	lsls	r3, r3, #30
 800746a:	d506      	bpl.n	800747a <putc_bfd+0x4e>
 800746c:	4632      	mov	r2, r6
 800746e:	4628      	mov	r0, r5
 8007470:	ab01      	add	r3, sp, #4
 8007472:	f104 010c 	add.w	r1, r4, #12
 8007476:	f7ff fea5 	bl	80071c4 <f_write.part.0>
		i = (bw == (UINT)i) ? 0 : -1;
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	1b9e      	subs	r6, r3, r6
 800747e:	bf18      	it	ne
 8007480:	f04f 36ff 	movne.w	r6, #4294967295
 8007484:	e7e0      	b.n	8007448 <putc_bfd+0x1c>
		putc_bfd(pb, '\r');
 8007486:	210d      	movs	r1, #13
 8007488:	f7ff ffd0 	bl	800742c <putc_bfd>
 800748c:	e7d4      	b.n	8007438 <putc_bfd+0xc>
 800748e:	bf00      	nop

08007490 <dir_next>:
{
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
 8007494:	88c5      	ldrh	r5, [r0, #6]
 8007496:	3501      	adds	r5, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007498:	b2ab      	uxth	r3, r5
 800749a:	2b00      	cmp	r3, #0
 800749c:	d04b      	beq.n	8007536 <dir_next+0xa6>
 800749e:	6902      	ldr	r2, [r0, #16]
 80074a0:	4604      	mov	r4, r0
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d047      	beq.n	8007536 <dir_next+0xa6>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	fbb5 fcf3 	udiv	ip, r5, r3
 80074b2:	fb03 531c 	mls	r3, r3, ip, r5
 80074b6:	b133      	cbz	r3, 80074c6 <dir_next+0x36>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80074b8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
	return FR_OK;
 80074bc:	2000      	movs	r0, #0
	dp->index = (WORD)i;	/* Current index */
 80074be:	80e5      	strh	r5, [r4, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80074c0:	6163      	str	r3, [r4, #20]
}
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dp->sect++;					/* Next sector */
 80074c6:	460e      	mov	r6, r1
		if (!dp->clust) {		/* Static table */
 80074c8:	68e1      	ldr	r1, [r4, #12]
		dp->sect++;					/* Next sector */
 80074ca:	3201      	adds	r2, #1
 80074cc:	6122      	str	r2, [r4, #16]
		if (!dp->clust) {		/* Static table */
 80074ce:	b371      	cbz	r1, 800752e <dir_next+0x9e>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80074d0:	f890 2402 	ldrb.w	r2, [r0, #1026]	; 0x402
 80074d4:	3a01      	subs	r2, #1
 80074d6:	ea12 070c 	ands.w	r7, r2, ip
 80074da:	d1ed      	bne.n	80074b8 <dir_next+0x28>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074dc:	2901      	cmp	r1, #1
 80074de:	d02d      	beq.n	800753c <dir_next+0xac>
 80074e0:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d229      	bcs.n	800753c <dir_next+0xac>
 80074e8:	f7ff fc80 	bl	8006dec <get_fat.part.0>
				if (clst <= 1) return FR_INT_ERR;
 80074ec:	2801      	cmp	r0, #1
 80074ee:	4680      	mov	r8, r0
 80074f0:	d924      	bls.n	800753c <dir_next+0xac>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80074f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074f6:	d064      	beq.n	80075c2 <dir_next+0x132>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 80074fe:	4543      	cmp	r3, r8
 8007500:	d91e      	bls.n	8007540 <dir_next+0xb0>
	clst -= 2;
 8007502:	f1a8 0602 	sub.w	r6, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007506:	3b02      	subs	r3, #2
 8007508:	42b3      	cmp	r3, r6
				dp->clust = clst;				/* Initialize data for new cluster */
 800750a:	f8c4 800c 	str.w	r8, [r4, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800750e:	d905      	bls.n	800751c <dir_next+0x8c>
	return clst * fs->csize + fs->database;
 8007510:	f890 7402 	ldrb.w	r7, [r0, #1026]	; 0x402
 8007514:	f8d0 2428 	ldr.w	r2, [r0, #1064]	; 0x428
 8007518:	fb06 2707 	mla	r7, r6, r7, r2
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800751c:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
				dp->sect = clust2sect(dp->fs, clst);
 8007520:	6127      	str	r7, [r4, #16]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007522:	095a      	lsrs	r2, r3, #5
 8007524:	fbb5 f3f2 	udiv	r3, r5, r2
 8007528:	fb02 5313 	mls	r3, r2, r3, r5
 800752c:	e7c4      	b.n	80074b8 <dir_next+0x28>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800752e:	f8b0 2408 	ldrh.w	r2, [r0, #1032]	; 0x408
 8007532:	42aa      	cmp	r2, r5
 8007534:	d8c0      	bhi.n	80074b8 <dir_next+0x28>
		return FR_NO_FILE;
 8007536:	2004      	movs	r0, #4
}
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst <= 1) return FR_INT_ERR;
 800753c:	2002      	movs	r0, #2
 800753e:	e7c0      	b.n	80074c2 <dir_next+0x32>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007540:	2e00      	cmp	r6, #0
 8007542:	d0f8      	beq.n	8007536 <dir_next+0xa6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007544:	68e1      	ldr	r1, [r4, #12]
 8007546:	f7ff fdcb 	bl	80070e0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800754a:	4680      	mov	r8, r0
 800754c:	2800      	cmp	r0, #0
 800754e:	d042      	beq.n	80075d6 <dir_next+0x146>
					if (clst == 1) return FR_INT_ERR;
 8007550:	2801      	cmp	r0, #1
 8007552:	d0f3      	beq.n	800753c <dir_next+0xac>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007558:	d033      	beq.n	80075c2 <dir_next+0x132>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800755a:	6821      	ldr	r1, [r4, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800755c:	f891 3404 	ldrb.w	r3, [r1, #1028]	; 0x404
 8007560:	bbdb      	cbnz	r3, 80075da <dir_next+0x14a>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007562:	f8b1 240a 	ldrh.w	r2, [r1, #1034]	; 0x40a
	while (cnt--)
 8007566:	b122      	cbz	r2, 8007572 <dir_next+0xe2>
		*d++ = (BYTE)val;
 8007568:	4608      	mov	r0, r1
 800756a:	2100      	movs	r1, #0
 800756c:	f001 fa20 	bl	80089b0 <memset>
 8007570:	6821      	ldr	r1, [r4, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007572:	f8d1 3414 	ldr.w	r3, [r1, #1044]	; 0x414
	clst -= 2;
 8007576:	f1a8 0602 	sub.w	r6, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800757a:	3b02      	subs	r3, #2
 800757c:	429e      	cmp	r6, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800757e:	4608      	mov	r0, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007580:	d232      	bcs.n	80075e8 <dir_next+0x158>
	return clst * fs->csize + fs->database;
 8007582:	f891 2402 	ldrb.w	r2, [r1, #1026]	; 0x402
 8007586:	f8d1 3428 	ldr.w	r3, [r1, #1064]	; 0x428
 800758a:	fb06 3302 	mla	r3, r6, r2, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800758e:	f8c1 342c 	str.w	r3, [r1, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007592:	b1c2      	cbz	r2, 80075c6 <dir_next+0x136>
 8007594:	f04f 0a00 	mov.w	sl, #0
						dp->fs->wflag = 1;
 8007598:	f04f 0901 	mov.w	r9, #1
 800759c:	e009      	b.n	80075b2 <dir_next+0x122>
						dp->fs->winsect++;
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80075a4:	f890 2402 	ldrb.w	r2, [r0, #1026]	; 0x402
						dp->fs->winsect++;
 80075a8:	3301      	adds	r3, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80075aa:	4552      	cmp	r2, sl
						dp->fs->winsect++;
 80075ac:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80075b0:	d90a      	bls.n	80075c8 <dir_next+0x138>
						dp->fs->wflag = 1;
 80075b2:	f880 9404 	strb.w	r9, [r0, #1028]	; 0x404
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075b6:	f7ff f89b 	bl	80066f0 <sync_window.part.0>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80075ba:	f10a 0a01 	add.w	sl, sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80075be:	2800      	cmp	r0, #0
 80075c0:	d0ed      	beq.n	800759e <dir_next+0x10e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80075c2:	2001      	movs	r0, #1
 80075c4:	e77d      	b.n	80074c2 <dir_next+0x32>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80075c6:	4692      	mov	sl, r2
					dp->fs->winsect -= c;						/* Rewind window offset */
 80075c8:	eba3 030a 	sub.w	r3, r3, sl
 80075cc:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80075d0:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 80075d4:	e797      	b.n	8007506 <dir_next+0x76>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80075d6:	2007      	movs	r0, #7
 80075d8:	e773      	b.n	80074c2 <dir_next+0x32>
 80075da:	4608      	mov	r0, r1
 80075dc:	f7ff f888 	bl	80066f0 <sync_window.part.0>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1ee      	bne.n	80075c2 <dir_next+0x132>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80075e4:	6821      	ldr	r1, [r4, #0]
 80075e6:	e7bc      	b.n	8007562 <dir_next+0xd2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80075e8:	2300      	movs	r3, #0
	return clst * fs->csize + fs->database;
 80075ea:	f891 2402 	ldrb.w	r2, [r1, #1026]	; 0x402
 80075ee:	e7ce      	b.n	800758e <dir_next+0xfe>

080075f0 <dir_find.part.0>:
FRESULT dir_find (
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80075f4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80075f8:	f64f 75ff 	movw	r5, #65535	; 0xffff
FRESULT dir_find (
 80075fc:	4604      	mov	r4, r0
 80075fe:	b083      	sub	sp, #12
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007600:	f8cd 8000 	str.w	r8, [sp]
 8007604:	8485      	strh	r5, [r0, #36]	; 0x24
		res = move_window(dp->fs, dp->sect);
 8007606:	6827      	ldr	r7, [r4, #0]
 8007608:	6926      	ldr	r6, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800760a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800760e:	429e      	cmp	r6, r3
 8007610:	d015      	beq.n	800763e <dir_find.part.0+0x4e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007612:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8007616:	2b00      	cmp	r3, #0
 8007618:	d143      	bne.n	80076a2 <dir_find.part.0+0xb2>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800761a:	2301      	movs	r3, #1
 800761c:	4632      	mov	r2, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f897 0401 	ldrb.w	r0, [r7, #1025]	; 0x401
 8007624:	f7fe ff4e 	bl	80064c4 <disk_read>
 8007628:	b138      	cbz	r0, 800763a <dir_find.part.0+0x4a>
			fs->winsect = sector;
 800762a:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800762e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8007630:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
}
 8007634:	b003      	add	sp, #12
 8007636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800763a:	f8c7 642c 	str.w	r6, [r7, #1068]	; 0x42c
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800763e:	6967      	ldr	r7, [r4, #20]
		c = dir[DIR_Name];
 8007640:	783a      	ldrb	r2, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007642:	2a00      	cmp	r2, #0
 8007644:	f000 8091 	beq.w	800776a <dir_find.part.0+0x17a>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007648:	2ae5      	cmp	r2, #229	; 0xe5
 800764a:	d006      	beq.n	800765a <dir_find.part.0+0x6a>
		a = dir[DIR_Attr] & AM_MASK;
 800764c:	7afb      	ldrb	r3, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800764e:	0718      	lsls	r0, r3, #28
		a = dir[DIR_Attr] & AM_MASK;
 8007650:	f003 013f 	and.w	r1, r3, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007654:	d50d      	bpl.n	8007672 <dir_find.part.0+0x82>
 8007656:	290f      	cmp	r1, #15
 8007658:	d02b      	beq.n	80076b2 <dir_find.part.0+0xc2>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800765a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800765e:	84a5      	strh	r5, [r4, #36]	; 0x24
		res = dir_next(dp, 0);		/* Next entry */
 8007660:	2100      	movs	r1, #0
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff ff14 	bl	8007490 <dir_next>
	} while (res == FR_OK);
 8007668:	2800      	cmp	r0, #0
 800766a:	d0cc      	beq.n	8007606 <dir_find.part.0+0x16>
}
 800766c:	b003      	add	sp, #12
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007672:	290f      	cmp	r1, #15
 8007674:	d01d      	beq.n	80076b2 <dir_find.part.0+0xc2>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007676:	f1b8 0f00 	cmp.w	r8, #0
 800767a:	d02e      	beq.n	80076da <dir_find.part.0+0xea>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800767c:	69a3      	ldr	r3, [r4, #24]
 800767e:	7ad8      	ldrb	r0, [r3, #11]
 8007680:	f010 0001 	ands.w	r0, r0, #1
 8007684:	d1e9      	bne.n	800765a <dir_find.part.0+0x6a>
 8007686:	f103 0c0b 	add.w	ip, r3, #11
 800768a:	e001      	b.n	8007690 <dir_find.part.0+0xa0>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800768c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8007690:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007694:	4291      	cmp	r1, r2
 8007696:	d1e0      	bne.n	800765a <dir_find.part.0+0x6a>
 8007698:	4563      	cmp	r3, ip
 800769a:	d1f7      	bne.n	800768c <dir_find.part.0+0x9c>
}
 800769c:	b003      	add	sp, #12
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff f824 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0b6      	beq.n	800761a <dir_find.part.0+0x2a>
}
 80076ac:	b003      	add	sp, #12
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dp->lfn) {
 80076b2:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80076b6:	f1b9 0f00 	cmp.w	r9, #0
 80076ba:	d0d1      	beq.n	8007660 <dir_find.part.0+0x70>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80076bc:	0651      	lsls	r1, r2, #25
 80076be:	d521      	bpl.n	8007704 <dir_find.part.0+0x114>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80076c0:	88e3      	ldrh	r3, [r4, #6]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80076c2:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dir[LDIR_Chksum];
 80076c6:	7b7a      	ldrb	r2, [r7, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80076c8:	84a3      	strh	r3, [r4, #36]	; 0x24
						sum = dir[LDIR_Chksum];
 80076ca:	9200      	str	r2, [sp, #0]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80076cc:	7b7b      	ldrb	r3, [r7, #13]
 80076ce:	9a00      	ldr	r2, [sp, #0]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d01c      	beq.n	800770e <dir_find.part.0+0x11e>
 80076d4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80076d8:	e7c2      	b.n	8007660 <dir_find.part.0+0x70>
 80076da:	4639      	mov	r1, r7
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80076dc:	4610      	mov	r0, r2
 80076de:	f107 0c0a 	add.w	ip, r7, #10
 80076e2:	e001      	b.n	80076e8 <dir_find.part.0+0xf8>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80076e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076e8:	ea4f 13c8 	mov.w	r3, r8, lsl #7
 80076ec:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
 80076f0:	4403      	add	r3, r0
 80076f2:	458c      	cmp	ip, r1
 80076f4:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 80076f8:	d1f4      	bne.n	80076e4 <dir_find.part.0+0xf4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	4598      	cmp	r8, r3
 80076fe:	d1bd      	bne.n	800767c <dir_find.part.0+0x8c>
 8007700:	2000      	movs	r0, #0
 8007702:	e797      	b.n	8007634 <dir_find.part.0+0x44>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007704:	4542      	cmp	r2, r8
 8007706:	d0e1      	beq.n	80076cc <dir_find.part.0+0xdc>
 8007708:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800770c:	e7a8      	b.n	8007660 <dir_find.part.0+0x70>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800770e:	2301      	movs	r3, #1
 8007710:	7839      	ldrb	r1, [r7, #0]
 8007712:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007788 <dir_find.part.0+0x198>
 8007716:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800771a:	3901      	subs	r1, #1
 800771c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8007720:	eb01 0b80 	add.w	fp, r1, r0, lsl #2
	s = 0; wc = 1;
 8007724:	4619      	mov	r1, r3
 8007726:	e006      	b.n	8007736 <dir_find.part.0+0x146>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007728:	42a8      	cmp	r0, r5
 800772a:	d1d3      	bne.n	80076d4 <dir_find.part.0+0xe4>
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800772c:	4b17      	ldr	r3, [pc, #92]	; (800778c <dir_find.part.0+0x19c>)
 800772e:	4553      	cmp	r3, sl
 8007730:	d01d      	beq.n	800776e <dir_find.part.0+0x17e>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007732:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007736:	18f8      	adds	r0, r7, r3
 8007738:	7840      	ldrb	r0, [r0, #1]
 800773a:	5cfb      	ldrb	r3, [r7, r3]
 800773c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last character has not been processed */
 8007740:	2900      	cmp	r1, #0
 8007742:	d0f1      	beq.n	8007728 <dir_find.part.0+0x138>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007744:	f000 feb0 	bl	80084a8 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007748:	f10b 0301 	add.w	r3, fp, #1
 800774c:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007750:	4606      	mov	r6, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	d8be      	bhi.n	80076d4 <dir_find.part.0+0xe4>
 8007756:	f839 001b 	ldrh.w	r0, [r9, fp, lsl #1]
 800775a:	f000 fea5 	bl	80084a8 <ff_wtoupper>
 800775e:	4286      	cmp	r6, r0
 8007760:	4601      	mov	r1, r0
 8007762:	d1b7      	bne.n	80076d4 <dir_find.part.0+0xe4>
 8007764:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007768:	e7e0      	b.n	800772c <dir_find.part.0+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800776a:	2004      	movs	r0, #4
 800776c:	e762      	b.n	8007634 <dir_find.part.0+0x44>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800776e:	783b      	ldrb	r3, [r7, #0]
 8007770:	065b      	lsls	r3, r3, #25
 8007772:	d504      	bpl.n	800777e <dir_find.part.0+0x18e>
 8007774:	b119      	cbz	r1, 800777e <dir_find.part.0+0x18e>
 8007776:	f839 301b 	ldrh.w	r3, [r9, fp, lsl #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1aa      	bne.n	80076d4 <dir_find.part.0+0xe4>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800777e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007782:	fa5f f888 	uxtb.w	r8, r8
 8007786:	e76b      	b.n	8007660 <dir_find.part.0+0x70>
 8007788:	08009df4 	.word	0x08009df4
 800778c:	08009e00 	.word	0x08009e00

08007790 <follow_path>:
{
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007794:	780b      	ldrb	r3, [r1, #0]
{
 8007796:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007798:	2b2f      	cmp	r3, #47	; 0x2f
{
 800779a:	4607      	mov	r7, r0
 800779c:	b083      	sub	sp, #12
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800779e:	d03f      	beq.n	8007820 <follow_path+0x90>
 80077a0:	2b5c      	cmp	r3, #92	; 0x5c
 80077a2:	d03d      	beq.n	8007820 <follow_path+0x90>
	dp->sclust = 0;							/* Always start from the root directory */
 80077a4:	2400      	movs	r4, #0
 80077a6:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077a8:	782b      	ldrb	r3, [r5, #0]
 80077aa:	2b1f      	cmp	r3, #31
 80077ac:	d93e      	bls.n	800782c <follow_path+0x9c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80077ae:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8007a54 <follow_path+0x2c4>
 80077b2:	e001      	b.n	80077b8 <follow_path+0x28>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80077b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80077b8:	2b2f      	cmp	r3, #47	; 0x2f
 80077ba:	d0fb      	beq.n	80077b4 <follow_path+0x24>
 80077bc:	2b5c      	cmp	r3, #92	; 0x5c
 80077be:	d0f9      	beq.n	80077b4 <follow_path+0x24>
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80077c0:	2b1f      	cmp	r3, #31
	lfn = dp->lfn;
 80077c2:	f8d7 8020 	ldr.w	r8, [r7, #32]
		w = p[si++];					/* Get a character */
 80077c6:	b298      	uxth	r0, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80077c8:	d926      	bls.n	8007818 <follow_path+0x88>
 80077ca:	f1a8 0602 	sub.w	r6, r8, #2
 80077ce:	46ab      	mov	fp, r5
 80077d0:	46b2      	mov	sl, r6
		w = p[si++];					/* Get a character */
 80077d2:	2401      	movs	r4, #1
 80077d4:	e008      	b.n	80077e8 <follow_path+0x58>
		lfn[di++] = w;					/* Store the Unicode character */
 80077d6:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 80077da:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 80077de:	1c62      	adds	r2, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80077e0:	281f      	cmp	r0, #31
 80077e2:	f240 80f6 	bls.w	80079d2 <follow_path+0x242>
		w = p[si++];					/* Get a character */
 80077e6:	4614      	mov	r4, r2
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80077e8:	282f      	cmp	r0, #47	; 0x2f
 80077ea:	f104 33ff 	add.w	r3, r4, #4294967295
 80077ee:	d025      	beq.n	800783c <follow_path+0xac>
 80077f0:	285c      	cmp	r0, #92	; 0x5c
 80077f2:	d023      	beq.n	800783c <follow_path+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80077f4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80077f8:	d00e      	beq.n	8007818 <follow_path+0x88>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80077fa:	2101      	movs	r1, #1
 80077fc:	f000 fe34 	bl	8008468 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007800:	b150      	cbz	r0, 8007818 <follow_path+0x88>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007802:	287f      	cmp	r0, #127	; 0x7f
 8007804:	d8e7      	bhi.n	80077d6 <follow_path+0x46>
	while (*str && *str != chr) str++;
 8007806:	2322      	movs	r3, #34	; 0x22
 8007808:	4a93      	ldr	r2, [pc, #588]	; (8007a58 <follow_path+0x2c8>)
 800780a:	e003      	b.n	8007814 <follow_path+0x84>
 800780c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0e0      	beq.n	80077d6 <follow_path+0x46>
 8007814:	4298      	cmp	r0, r3
 8007816:	d1f9      	bne.n	800780c <follow_path+0x7c>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007818:	2006      	movs	r0, #6
}
 800781a:	b003      	add	sp, #12
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->sclust = 0;							/* Always start from the root directory */
 8007820:	2400      	movs	r4, #0
		path++;
 8007822:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8007824:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007826:	782b      	ldrb	r3, [r5, #0]
 8007828:	2b1f      	cmp	r3, #31
 800782a:	d8c0      	bhi.n	80077ae <follow_path+0x1e>
		res = dir_sdi(dp, 0);
 800782c:	4621      	mov	r1, r4
 800782e:	4638      	mov	r0, r7
 8007830:	f7ff fbee 	bl	8007010 <dir_sdi>
		dp->dir = 0;
 8007834:	617c      	str	r4, [r7, #20]
}
 8007836:	b003      	add	sp, #12
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
 800783c:	4425      	add	r5, r4
	while (di) {						/* Strip trailing spaces and dots */
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0ea      	beq.n	8007818 <follow_path+0x88>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007842:	f04f 0a00 	mov.w	sl, #0
 8007846:	eb08 0143 	add.w	r1, r8, r3, lsl #1
		w = lfn[di - 1];
 800784a:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
		if (w != ' ' && w != '.') break;
 800784e:	2a20      	cmp	r2, #32
 8007850:	d001      	beq.n	8007856 <follow_path+0xc6>
 8007852:	2a2e      	cmp	r2, #46	; 0x2e
 8007854:	d102      	bne.n	800785c <follow_path+0xcc>
	while (di) {						/* Strip trailing spaces and dots */
 8007856:	3b01      	subs	r3, #1
 8007858:	d1f7      	bne.n	800784a <follow_path+0xba>
 800785a:	e7dd      	b.n	8007818 <follow_path+0x88>
		*d++ = (BYTE)val;
 800785c:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8007860:	2400      	movs	r4, #0
		*d++ = (BYTE)val;
 8007862:	69ba      	ldr	r2, [r7, #24]
	lfn[di] = 0;						/* LFN is created */
 8007864:	f828 4013 	strh.w	r4, [r8, r3, lsl #1]
		*d++ = (BYTE)val;
 8007868:	6051      	str	r1, [r2, #4]
 800786a:	6011      	str	r1, [r2, #0]
 800786c:	f8c2 1007 	str.w	r1, [r2, #7]
 8007870:	e000      	b.n	8007874 <follow_path+0xe4>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007872:	3401      	adds	r4, #1
 8007874:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8007878:	2820      	cmp	r0, #32
 800787a:	d0fa      	beq.n	8007872 <follow_path+0xe2>
 800787c:	282e      	cmp	r0, #46	; 0x2e
 800787e:	d0f8      	beq.n	8007872 <follow_path+0xe2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007880:	b10c      	cbz	r4, 8007886 <follow_path+0xf6>
 8007882:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007886:	eb08 0243 	add.w	r2, r8, r3, lsl #1
 800788a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 800788e:	292e      	cmp	r1, #46	; 0x2e
 8007890:	d001      	beq.n	8007896 <follow_path+0x106>
 8007892:	3b01      	subs	r3, #1
 8007894:	d1f9      	bne.n	800788a <follow_path+0xfa>
		w = lfn[si++];					/* Get an LFN character */
 8007896:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8007898:	2800      	cmp	r0, #0
 800789a:	f000 80cf 	beq.w	8007a3c <follow_path+0x2ac>
 800789e:	2600      	movs	r6, #0
 80078a0:	f04f 0b08 	mov.w	fp, #8
 80078a4:	4632      	mov	r2, r6
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80078a6:	2820      	cmp	r0, #32
 80078a8:	d05f      	beq.n	800796a <follow_path+0x1da>
 80078aa:	282e      	cmp	r0, #46	; 0x2e
 80078ac:	d060      	beq.n	8007970 <follow_path+0x1e0>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80078ae:	455a      	cmp	r2, fp
 80078b0:	d26a      	bcs.n	8007988 <follow_path+0x1f8>
 80078b2:	42a3      	cmp	r3, r4
 80078b4:	d05e      	beq.n	8007974 <follow_path+0x1e4>
		if (w >= 0x80) {				/* Non ASCII character */
 80078b6:	287f      	cmp	r0, #127	; 0x7f
 80078b8:	f200 8090 	bhi.w	80079dc <follow_path+0x24c>
	while (*str && *str != chr) str++;
 80078bc:	212b      	movs	r1, #43	; 0x2b
 80078be:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007a5c <follow_path+0x2cc>
 80078c2:	e004      	b.n	80078ce <follow_path+0x13e>
 80078c4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80078c8:	2900      	cmp	r1, #0
 80078ca:	f000 809b 	beq.w	8007a04 <follow_path+0x274>
 80078ce:	4281      	cmp	r1, r0
 80078d0:	d1f8      	bne.n	80078c4 <follow_path+0x134>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80078d2:	205f      	movs	r0, #95	; 0x5f
 80078d4:	f04a 0a03 	orr.w	sl, sl, #3
		dp->fn[i++] = (BYTE)w;
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	5488      	strb	r0, [r1, r2]
 80078dc:	3201      	adds	r2, #1
		w = lfn[si++];					/* Get an LFN character */
 80078de:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
 80078e2:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1de      	bne.n	80078a6 <follow_path+0x116>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	2ae5      	cmp	r2, #229	; 0xe5
 80078ee:	d102      	bne.n	80078f6 <follow_path+0x166>
 80078f0:	2205      	movs	r2, #5
 80078f2:	701a      	strb	r2, [r3, #0]
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80078f4:	69bb      	ldr	r3, [r7, #24]
	if (ni == 8) b <<= 2;
 80078f6:	f1bb 0f08 	cmp.w	fp, #8
 80078fa:	d04e      	beq.n	800799a <follow_path+0x20a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80078fc:	f006 020c 	and.w	r2, r6, #12
 8007900:	2a0c      	cmp	r2, #12
 8007902:	d050      	beq.n	80079a6 <follow_path+0x216>
 8007904:	f006 0103 	and.w	r1, r6, #3
 8007908:	2903      	cmp	r1, #3
 800790a:	d04c      	beq.n	80079a6 <follow_path+0x216>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800790c:	f00a 0102 	and.w	r1, sl, #2
 8007910:	b949      	cbnz	r1, 8007926 <follow_path+0x196>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007912:	f006 0603 	and.w	r6, r6, #3
 8007916:	2e01      	cmp	r6, #1
 8007918:	bf08      	it	eq
 800791a:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800791e:	2a04      	cmp	r2, #4
 8007920:	bf08      	it	eq
 8007922:	f04a 0a08 	orreq.w	sl, sl, #8
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007926:	2100      	movs	r1, #0
 8007928:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800792a:	f883 a00b 	strb.w	sl, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800792e:	f7ff fb6f 	bl	8007010 <dir_sdi>
	if (res != FR_OK) return res;
 8007932:	2800      	cmp	r0, #0
 8007934:	d141      	bne.n	80079ba <follow_path+0x22a>
 8007936:	4638      	mov	r0, r7
 8007938:	f7ff fe5a 	bl	80075f0 <dir_find.part.0>
			ns = dp->fn[NSFLAG];
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007940:	2800      	cmp	r0, #0
 8007942:	d13c      	bne.n	80079be <follow_path+0x22e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007944:	0759      	lsls	r1, r3, #29
 8007946:	f53f af68 	bmi.w	800781a <follow_path+0x8a>
			dir = dp->dir;						/* Follow the sub-directory */
 800794a:	697b      	ldr	r3, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800794c:	7ada      	ldrb	r2, [r3, #11]
 800794e:	06d2      	lsls	r2, r2, #27
 8007950:	d53b      	bpl.n	80079ca <follow_path+0x23a>
	if (fs->fs_type == FS_FAT32)
 8007952:	6839      	ldr	r1, [r7, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007954:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8007956:	f891 1400 	ldrb.w	r1, [r1, #1024]	; 0x400
 800795a:	2903      	cmp	r1, #3
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800795c:	bf04      	itt	eq
 800795e:	8a9b      	ldrheq	r3, [r3, #20]
 8007960:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 8007964:	60ba      	str	r2, [r7, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007966:	782b      	ldrb	r3, [r5, #0]
 8007968:	e726      	b.n	80077b8 <follow_path+0x28>
			cf |= NS_LOSS | NS_LFN; continue;
 800796a:	f04a 0a03 	orr.w	sl, sl, #3
 800796e:	e7b6      	b.n	80078de <follow_path+0x14e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007970:	42a3      	cmp	r3, r4
 8007972:	d1fa      	bne.n	800796a <follow_path+0x1da>
			if (ni == 11) {				/* Long extension */
 8007974:	f1bb 0f0b 	cmp.w	fp, #11
 8007978:	d055      	beq.n	8007a26 <follow_path+0x296>
			b <<= 2; continue;
 800797a:	00b6      	lsls	r6, r6, #2
 800797c:	461c      	mov	r4, r3
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800797e:	f04f 0b0b 	mov.w	fp, #11
 8007982:	2208      	movs	r2, #8
			b <<= 2; continue;
 8007984:	b2f6      	uxtb	r6, r6
 8007986:	e7aa      	b.n	80078de <follow_path+0x14e>
			if (ni == 11) {				/* Long extension */
 8007988:	f1bb 0f0b 	cmp.w	fp, #11
 800798c:	d04b      	beq.n	8007a26 <follow_path+0x296>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800798e:	42a3      	cmp	r3, r4
 8007990:	d0f3      	beq.n	800797a <follow_path+0x1ea>
 8007992:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 8007996:	d3a7      	bcc.n	80078e8 <follow_path+0x158>
 8007998:	e7ef      	b.n	800797a <follow_path+0x1ea>
	if (ni == 8) b <<= 2;
 800799a:	00b6      	lsls	r6, r6, #2
 800799c:	f006 020c 	and.w	r2, r6, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80079a0:	2a0c      	cmp	r2, #12
	if (ni == 8) b <<= 2;
 80079a2:	b2f6      	uxtb	r6, r6
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80079a4:	d1b2      	bne.n	800790c <follow_path+0x17c>
		cf |= NS_LFN;
 80079a6:	f04a 0a02 	orr.w	sl, sl, #2
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80079aa:	2100      	movs	r1, #0
 80079ac:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80079ae:	f883 a00b 	strb.w	sl, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80079b2:	f7ff fb2d 	bl	8007010 <dir_sdi>
	if (res != FR_OK) return res;
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d0bd      	beq.n	8007936 <follow_path+0x1a6>
			ns = dp->fn[NSFLAG];
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079be:	2804      	cmp	r0, #4
 80079c0:	f47f af2b 	bne.w	800781a <follow_path+0x8a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079c4:	075c      	lsls	r4, r3, #29
 80079c6:	f53f af28 	bmi.w	800781a <follow_path+0x8a>
 80079ca:	2005      	movs	r0, #5
}
 80079cc:	b003      	add	sp, #12
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
 80079d2:	4623      	mov	r3, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80079d4:	f04f 0a04 	mov.w	sl, #4
	*path = &p[si];						/* Return pointer to the next segment */
 80079d8:	4415      	add	r5, r2
	while (di) {						/* Strip trailing spaces and dots */
 80079da:	e734      	b.n	8007846 <follow_path+0xb6>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80079dc:	2100      	movs	r1, #0
 80079de:	e9cd 3200 	strd	r3, r2, [sp]
 80079e2:	f000 fd41 	bl	8008468 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80079e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079ea:	b140      	cbz	r0, 80079fe <follow_path+0x26e>
 80079ec:	4448      	add	r0, r9
 80079ee:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 80079f2:	f04a 0a02 	orr.w	sl, sl, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f43f af6b 	beq.w	80078d2 <follow_path+0x142>
 80079fc:	e75e      	b.n	80078bc <follow_path+0x12c>
			cf |= NS_LFN;				/* Force create LFN entry */
 80079fe:	f04a 0a02 	orr.w	sl, sl, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007a02:	e766      	b.n	80078d2 <follow_path+0x142>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007a04:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8007a08:	2919      	cmp	r1, #25
 8007a0a:	d803      	bhi.n	8007a14 <follow_path+0x284>
					b |= 2;
 8007a0c:	f046 0602 	orr.w	r6, r6, #2
		dp->fn[i++] = (BYTE)w;
 8007a10:	b2c0      	uxtb	r0, r0
 8007a12:	e761      	b.n	80078d8 <follow_path+0x148>
					if (IsLower(w)) {	/* ASCII small capital */
 8007a14:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8007a18:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8007a1a:	bf9c      	itt	ls
 8007a1c:	3820      	subls	r0, #32
 8007a1e:	f046 0601 	orrls.w	r6, r6, #1
		dp->fn[i++] = (BYTE)w;
 8007a22:	b2c0      	uxtb	r0, r0
 8007a24:	e758      	b.n	80078d8 <follow_path+0x148>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007a26:	69bb      	ldr	r3, [r7, #24]
				cf |= NS_LOSS | NS_LFN; break;
 8007a28:	f04a 0a03 	orr.w	sl, sl, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	2ae5      	cmp	r2, #229	; 0xe5
 8007a30:	f47f af64 	bne.w	80078fc <follow_path+0x16c>
 8007a34:	2205      	movs	r2, #5
 8007a36:	701a      	strb	r2, [r3, #0]
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	e75f      	b.n	80078fc <follow_path+0x16c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007a3c:	69bb      	ldr	r3, [r7, #24]
	if (ni == 8) b <<= 2;
 8007a3e:	4606      	mov	r6, r0
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	2ae5      	cmp	r2, #229	; 0xe5
 8007a44:	d001      	beq.n	8007a4a <follow_path+0x2ba>
 8007a46:	4632      	mov	r2, r6
 8007a48:	e760      	b.n	800790c <follow_path+0x17c>
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	701a      	strb	r2, [r3, #0]
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	4602      	mov	r2, r0
 8007a52:	e75b      	b.n	800790c <follow_path+0x17c>
 8007a54:	08009d74 	.word	0x08009d74
 8007a58:	08009d60 	.word	0x08009d60
 8007a5c:	08009d6c 	.word	0x08009d6c

08007a60 <dir_register>:
{
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8007a64:	f8d0 9018 	ldr.w	r9, [r0, #24]
{
 8007a68:	b089      	sub	sp, #36	; 0x24
 8007a6a:	4605      	mov	r5, r0
	fn = dp->fn; lfn = dp->lfn;
 8007a6c:	6a07      	ldr	r7, [r0, #32]
		*d++ = *s++;
 8007a6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a72:	f8d9 0000 	ldr.w	r0, [r9]
 8007a76:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007a7a:	ab05      	add	r3, sp, #20
 8007a7c:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007a7e:	f89d 801f 	ldrb.w	r8, [sp, #31]
 8007a82:	f018 0f01 	tst.w	r8, #1
 8007a86:	f000 8085 	beq.w	8007b94 <dir_register+0x134>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007a8a:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8007a8c:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007a90:	4e8f      	ldr	r6, [pc, #572]	; (8007cd0 <dir_register+0x270>)
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007a92:	f889 300b 	strb.w	r3, [r9, #11]
 8007a96:	622b      	str	r3, [r5, #32]
		*d++ = *s++;
 8007a98:	ab05      	add	r3, sp, #20
 8007a9a:	cb03      	ldmia	r3!, {r0, r1}
 8007a9c:	881a      	ldrh	r2, [r3, #0]
 8007a9e:	789b      	ldrb	r3, [r3, #2]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007aa0:	f1ba 0f05 	cmp.w	sl, #5
		*d++ = *s++;
 8007aa4:	f8a9 2008 	strh.w	r2, [r9, #8]
 8007aa8:	f8c9 0000 	str.w	r0, [r9]
 8007aac:	f8c9 1004 	str.w	r1, [r9, #4]
 8007ab0:	f889 300a 	strb.w	r3, [r9, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007ab4:	d966      	bls.n	8007b84 <dir_register+0x124>
		while (*lfn) {	/* Create a CRC */
 8007ab6:	883a      	ldrh	r2, [r7, #0]
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d063      	beq.n	8007b84 <dir_register+0x124>
 8007abc:	463c      	mov	r4, r7
 8007abe:	4653      	mov	r3, sl
 8007ac0:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8007ac2:	f002 0001 	and.w	r0, r2, #1
 8007ac6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007aca:	03d8      	lsls	r0, r3, #15
 8007acc:	bf48      	it	mi
 8007ace:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 8007ad0:	3901      	subs	r1, #1
				wc >>= 1;
 8007ad2:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8007ad6:	d1f4      	bne.n	8007ac2 <dir_register+0x62>
		while (*lfn) {	/* Create a CRC */
 8007ad8:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	d1ef      	bne.n	8007ac0 <dir_register+0x60>
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	f10d 0413 	add.w	r4, sp, #19
 8007ae6:	e000      	b.n	8007aea <dir_register+0x8a>
		seq /= 16;
 8007ae8:	4663      	mov	r3, ip
		c = (seq % 16) + '0';
 8007aea:	f003 000f 	and.w	r0, r3, #15
 8007aee:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007af2:	2939      	cmp	r1, #57	; 0x39
 8007af4:	bf88      	it	hi
 8007af6:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 8007afa:	2b0f      	cmp	r3, #15
		seq /= 16;
 8007afc:	ea4f 1c13 	mov.w	ip, r3, lsr #4
		ns[i--] = c;
 8007b00:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b04:	f804 1901 	strb.w	r1, [r4], #-1
	} while (seq);
 8007b08:	d8ee      	bhi.n	8007ae8 <dir_register+0x88>
	ns[i] = '~';
 8007b0a:	217e      	movs	r1, #126	; 0x7e
 8007b0c:	f102 0320 	add.w	r3, r2, #32
 8007b10:	446b      	add	r3, sp
 8007b12:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	f000 80c0 	beq.w	8007c9c <dir_register+0x23c>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8007b22:	e002      	b.n	8007b2a <dir_register+0xca>
 8007b24:	3301      	adds	r3, #1
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d003      	beq.n	8007b32 <dir_register+0xd2>
 8007b2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b2e:	2820      	cmp	r0, #32
 8007b30:	d1f8      	bne.n	8007b24 <dir_register+0xc4>
 8007b32:	3b01      	subs	r3, #1
 8007b34:	444b      	add	r3, r9
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b36:	2a07      	cmp	r2, #7
 8007b38:	bf88      	it	hi
 8007b3a:	2020      	movhi	r0, #32
 8007b3c:	f102 0120 	add.w	r1, r2, #32
 8007b40:	4469      	add	r1, sp
 8007b42:	bf98      	it	ls
 8007b44:	f811 0c14 	ldrbls.w	r0, [r1, #-20]
	} while (j < 8);
 8007b48:	f103 0102 	add.w	r1, r3, #2
 8007b4c:	eba1 0109 	sub.w	r1, r1, r9
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b50:	bf98      	it	ls
 8007b52:	3201      	addls	r2, #1
	} while (j < 8);
 8007b54:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b56:	7058      	strb	r0, [r3, #1]
 8007b58:	f103 0301 	add.w	r3, r3, #1
	} while (j < 8);
 8007b5c:	d9eb      	bls.n	8007b36 <dir_register+0xd6>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4628      	mov	r0, r5
 8007b62:	f7ff fa55 	bl	8007010 <dir_sdi>
	if (res != FR_OK) return res;
 8007b66:	b978      	cbnz	r0, 8007b88 <dir_register+0x128>
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7ff fd41 	bl	80075f0 <dir_find.part.0>
			if (res != FR_OK) break;
 8007b6e:	b958      	cbnz	r0, 8007b88 <dir_register+0x128>
		for (n = 1; n < 100; n++) {
 8007b70:	f10a 0a01 	add.w	sl, sl, #1
 8007b74:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8007b78:	d18e      	bne.n	8007a98 <dir_register+0x38>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007b7a:	2407      	movs	r4, #7
}
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	b009      	add	sp, #36	; 0x24
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*lfn) {	/* Create a CRC */
 8007b84:	4653      	mov	r3, sl
 8007b86:	e7ab      	b.n	8007ae0 <dir_register+0x80>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007b88:	2804      	cmp	r0, #4
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	d1f6      	bne.n	8007b7c <dir_register+0x11c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007b8e:	f889 800b 	strb.w	r8, [r9, #11]
 8007b92:	622f      	str	r7, [r5, #32]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007b94:	f018 0f02 	tst.w	r8, #2
 8007b98:	d074      	beq.n	8007c84 <dir_register+0x224>
		for (n = 0; lfn[n]; n++) ;
 8007b9a:	883b      	ldrh	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d071      	beq.n	8007c84 <dir_register+0x224>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f837 1f02 	ldrh.w	r1, [r7, #2]!
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	3301      	adds	r3, #1
 8007baa:	2900      	cmp	r1, #0
 8007bac:	d1f9      	bne.n	8007ba2 <dir_register+0x142>
		nent = (n + 25) / 13;
 8007bae:	4b49      	ldr	r3, [pc, #292]	; (8007cd4 <dir_register+0x274>)
 8007bb0:	f102 071a 	add.w	r7, r2, #26
 8007bb4:	fba3 3707 	umull	r3, r7, r3, r7
	res = dir_sdi(dp, 0);
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4628      	mov	r0, r5
		nent = (n + 25) / 13;
 8007bbc:	08bf      	lsrs	r7, r7, #2
	res = dir_sdi(dp, 0);
 8007bbe:	f7ff fa27 	bl	8007010 <dir_sdi>
	if (res == FR_OK) {
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d165      	bne.n	8007c92 <dir_register+0x232>
		n = 0;
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4681      	mov	r9, r0
 8007bca:	e008      	b.n	8007bde <dir_register+0x17e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007bcc:	b303      	cbz	r3, 8007c10 <dir_register+0x1b0>
				n = 0;					/* Not a blank entry. Restart to search */
 8007bce:	f04f 0800 	mov.w	r8, #0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7ff fc5b 	bl	8007490 <dir_next>
		} while (res == FR_OK);
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d159      	bne.n	8007c92 <dir_register+0x232>
			res = move_window(dp->fs, dp->sect);
 8007bde:	682e      	ldr	r6, [r5, #0]
 8007be0:	692c      	ldr	r4, [r5, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007be2:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d00e      	beq.n	8007c08 <dir_register+0x1a8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007bea:	f896 3404 	ldrb.w	r3, [r6, #1028]	; 0x404
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d15f      	bne.n	8007cb2 <dir_register+0x252>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	f896 0401 	ldrb.w	r0, [r6, #1025]	; 0x401
 8007bfc:	f7fe fc62 	bl	80064c4 <disk_read>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d14d      	bne.n	8007ca0 <dir_register+0x240>
			fs->winsect = sector;
 8007c04:	f8c6 442c 	str.w	r4, [r6, #1068]	; 0x42c
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007c08:	696b      	ldr	r3, [r5, #20]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2be5      	cmp	r3, #229	; 0xe5
 8007c0e:	d1dd      	bne.n	8007bcc <dir_register+0x16c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c10:	f108 0801 	add.w	r8, r8, #1
 8007c14:	4547      	cmp	r7, r8
 8007c16:	d1dc      	bne.n	8007bd2 <dir_register+0x172>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c18:	1e7b      	subs	r3, r7, #1
 8007c1a:	464c      	mov	r4, r9
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	d15b      	bne.n	8007cd8 <dir_register+0x278>
		res = move_window(dp->fs, dp->sect);
 8007c20:	682e      	ldr	r6, [r5, #0]
 8007c22:	692f      	ldr	r7, [r5, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c24:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
 8007c28:	429f      	cmp	r7, r3
 8007c2a:	d00d      	beq.n	8007c48 <dir_register+0x1e8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c2c:	f896 3404 	ldrb.w	r3, [r6, #1028]	; 0x404
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d144      	bne.n	8007cbe <dir_register+0x25e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007c34:	2301      	movs	r3, #1
 8007c36:	463a      	mov	r2, r7
 8007c38:	4631      	mov	r1, r6
 8007c3a:	f896 0401 	ldrb.w	r0, [r6, #1025]	; 0x401
 8007c3e:	f7fe fc41 	bl	80064c4 <disk_read>
 8007c42:	bb68      	cbnz	r0, 8007ca0 <dir_register+0x240>
			fs->winsect = sector;
 8007c44:	f8c6 742c 	str.w	r7, [r6, #1068]	; 0x42c
		*d++ = (BYTE)val;
 8007c48:	2220      	movs	r2, #32
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6968      	ldr	r0, [r5, #20]
 8007c4e:	f000 feaf 	bl	80089b0 <memset>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007c52:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
 8007c56:	f103 000b 	add.w	r0, r3, #11
 8007c5a:	3a01      	subs	r2, #1
		*d++ = *s++;
 8007c5c:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 8007c60:	4283      	cmp	r3, r0
		*d++ = *s++;
 8007c62:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 8007c66:	d1f9      	bne.n	8007c5c <dir_register+0x1fc>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007c68:	e9d5 1305 	ldrd	r1, r3, [r5, #20]
			dp->fs->wflag = 1;
 8007c6c:	2201      	movs	r2, #1
}
 8007c6e:	4620      	mov	r0, r4
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007c70:	7adb      	ldrb	r3, [r3, #11]
 8007c72:	f003 0318 	and.w	r3, r3, #24
 8007c76:	730b      	strb	r3, [r1, #12]
			dp->fs->wflag = 1;
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
}
 8007c7e:	b009      	add	sp, #36	; 0x24
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = dir_sdi(dp, 0);
 8007c84:	2100      	movs	r1, #0
 8007c86:	4628      	mov	r0, r5
		nent = 1;
 8007c88:	2701      	movs	r7, #1
	res = dir_sdi(dp, 0);
 8007c8a:	f7ff f9c1 	bl	8007010 <dir_sdi>
	if (res == FR_OK) {
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d099      	beq.n	8007bc6 <dir_register+0x166>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c92:	2804      	cmp	r0, #4
 8007c94:	f43f af71 	beq.w	8007b7a <dir_register+0x11a>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e76f      	b.n	8007b7c <dir_register+0x11c>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	e748      	b.n	8007b32 <dir_register+0xd2>
				res = FR_DISK_ERR;
 8007ca0:	2401      	movs	r4, #1
			fs->winsect = sector;
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ca6:	4620      	mov	r0, r4
			fs->winsect = sector;
 8007ca8:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
}
 8007cac:	b009      	add	sp, #36	; 0x24
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7fe fd1c 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d09a      	beq.n	8007bf2 <dir_register+0x192>
 8007cbc:	e7e9      	b.n	8007c92 <dir_register+0x232>
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe fd16 	bl	80066f0 <sync_window.part.0>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0b4      	beq.n	8007c34 <dir_register+0x1d4>
 8007cca:	461c      	mov	r4, r3
 8007ccc:	e756      	b.n	8007b7c <dir_register+0x11c>
 8007cce:	bf00      	nop
 8007cd0:	00011021 	.word	0x00011021
 8007cd4:	4ec4ec4f 	.word	0x4ec4ec4f
		res = dir_sdi(dp, dp->index - nent);
 8007cd8:	88e9      	ldrh	r1, [r5, #6]
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	1ac9      	subs	r1, r1, r3
 8007ce0:	f7ff f996 	bl	8007010 <dir_sdi>
		if (res == FR_OK) {
 8007ce4:	4683      	mov	fp, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f040 8091 	bne.w	8007e0e <dir_register+0x3ae>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007cec:	69aa      	ldr	r2, [r5, #24]
	UINT n = 11;
 8007cee:	f102 010b 	add.w	r1, r2, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007cf2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007cf6:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8007cfa:	ea43 035b 	orr.w	r3, r3, fp, lsr #1
 8007cfe:	4403      	add	r3, r0
 8007d00:	428a      	cmp	r2, r1
 8007d02:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8007d06:	d1f4      	bne.n	8007cf2 <dir_register+0x292>
 8007d08:	f8df a108 	ldr.w	sl, [pc, #264]	; 8007e14 <dir_register+0x3b4>
 8007d0c:	9401      	str	r4, [sp, #4]
				res = move_window(dp->fs, dp->sect);
 8007d0e:	682e      	ldr	r6, [r5, #0]
 8007d10:	692c      	ldr	r4, [r5, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d12:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d00e      	beq.n	8007d38 <dir_register+0x2d8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d1a:	f896 3404 	ldrb.w	r3, [r6, #1028]	; 0x404
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d16d      	bne.n	8007dfe <dir_register+0x39e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007d22:	2301      	movs	r3, #1
 8007d24:	4622      	mov	r2, r4
 8007d26:	4631      	mov	r1, r6
 8007d28:	f896 0401 	ldrb.w	r0, [r6, #1025]	; 0x401
 8007d2c:	f7fe fbca 	bl	80064c4 <disk_read>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1b5      	bne.n	8007ca0 <dir_register+0x240>
			fs->winsect = sector;
 8007d34:	f8c6 442c 	str.w	r4, [r6, #1068]	; 0x42c
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007d38:	f89d 9000 	ldrb.w	r9, [sp]
	s = wc = 0;
 8007d3c:	2300      	movs	r3, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007d3e:	f109 36ff 	add.w	r6, r9, #4294967295
 8007d42:	eb06 0146 	add.w	r1, r6, r6, lsl #1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007d46:	f64f 78ff 	movw	r8, #65535	; 0xffff
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007d4a:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007d4c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
	dir[LDIR_Type] = 0;
 8007d50:	f04f 0100 	mov.w	r1, #0
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007d54:	696c      	ldr	r4, [r5, #20]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007d56:	4543      	cmp	r3, r8
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007d58:	f8d5 e020 	ldr.w	lr, [r5, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007d5c:	f04f 0001 	mov.w	r0, #1
	dir[LDIR_Type] = 0;
 8007d60:	7321      	strb	r1, [r4, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007d62:	76a1      	strb	r1, [r4, #26]
 8007d64:	76e1      	strb	r1, [r4, #27]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007d66:	f884 b00d 	strb.w	fp, [r4, #13]
	s = wc = 0;
 8007d6a:	4619      	mov	r1, r3
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007d6c:	72e2      	strb	r2, [r4, #11]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007d6e:	d01f      	beq.n	8007db0 <dir_register+0x350>
 8007d70:	f83e 3016 	ldrh.w	r3, [lr, r6, lsl #1]
	} while (++s < 13);
 8007d74:	1c4a      	adds	r2, r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007d76:	1827      	adds	r7, r4, r0
 8007d78:	0a19      	lsrs	r1, r3, #8
 8007d7a:	5423      	strb	r3, [r4, r0]
 8007d7c:	eb0a 0c02 	add.w	ip, sl, r2
 8007d80:	7079      	strb	r1, [r7, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007d82:	b963      	cbnz	r3, 8007d9e <dir_register+0x33e>
	} while (++s < 13);
 8007d84:	2a0d      	cmp	r2, #13
 8007d86:	d023      	beq.n	8007dd0 <dir_register+0x370>
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007d8c:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8007d90:	0a19      	lsrs	r1, r3, #8
 8007d92:	1827      	adds	r7, r4, r0
 8007d94:	5423      	strb	r3, [r4, r0]
 8007d96:	3201      	adds	r2, #1
 8007d98:	7079      	strb	r1, [r7, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f2      	beq.n	8007d84 <dir_register+0x324>
	} while (++s < 13);
 8007d9e:	2a0d      	cmp	r2, #13
 8007da0:	4611      	mov	r1, r2
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007da2:	f106 0601 	add.w	r6, r6, #1
	} while (++s < 13);
 8007da6:	d00c      	beq.n	8007dc2 <dir_register+0x362>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007da8:	4543      	cmp	r3, r8
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007daa:	f81a 0002 	ldrb.w	r0, [sl, r2]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007dae:	d1df      	bne.n	8007d70 <dir_register+0x310>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	5422      	strb	r2, [r4, r0]
 8007db6:	4420      	add	r0, r4
 8007db8:	7042      	strb	r2, [r0, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007dba:	1c4a      	adds	r2, r1, #1
	} while (++s < 13);
 8007dbc:	2a0d      	cmp	r2, #13
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	d1f2      	bne.n	8007da8 <dir_register+0x348>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d002      	beq.n	8007dd0 <dir_register+0x370>
 8007dca:	f83e 3016 	ldrh.w	r3, [lr, r6, lsl #1]
 8007dce:	b90b      	cbnz	r3, 8007dd4 <dir_register+0x374>
 8007dd0:	f049 0940 	orr.w	r9, r9, #64	; 0x40
				dp->fs->wflag = 1;
 8007dd4:	f04f 0201 	mov.w	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007dd8:	f884 9000 	strb.w	r9, [r4]
				dp->fs->wflag = 1;
 8007ddc:	682b      	ldr	r3, [r5, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8007dde:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8007de0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fb53 	bl	8007490 <dir_next>
			} while (res == FR_OK && --nent);
 8007dea:	4603      	mov	r3, r0
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f47f af6c 	bne.w	8007cca <dir_register+0x26a>
 8007df2:	9b00      	ldr	r3, [sp, #0]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	d189      	bne.n	8007d0e <dir_register+0x2ae>
 8007dfa:	9c01      	ldr	r4, [sp, #4]
 8007dfc:	e710      	b.n	8007c20 <dir_register+0x1c0>
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fe fc76 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e04:	4603      	mov	r3, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d08b      	beq.n	8007d22 <dir_register+0x2c2>
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	e6b6      	b.n	8007b7c <dir_register+0x11c>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	e6b4      	b.n	8007b7c <dir_register+0x11c>
 8007e12:	bf00      	nop
 8007e14:	08009df4 	.word	0x08009df4

08007e18 <f_mount>:
{
 8007e18:	b530      	push	{r4, r5, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	9001      	str	r0, [sp, #4]
	vol = get_ldnumber(&rp);
 8007e1e:	a803      	add	r0, sp, #12
{
 8007e20:	4615      	mov	r5, r2
 8007e22:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8007e24:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8007e26:	f7fe fc2d 	bl	8006684 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e2a:	1e03      	subs	r3, r0, #0
 8007e2c:	db23      	blt.n	8007e76 <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e2e:	4c16      	ldr	r4, [pc, #88]	; (8007e88 <f_mount+0x70>)
 8007e30:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
	if (cfs) {
 8007e34:	b169      	cbz	r1, 8007e52 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e36:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <f_mount+0x74>)
 8007e38:	6810      	ldr	r0, [r2, #0]
 8007e3a:	4281      	cmp	r1, r0
 8007e3c:	bf04      	itt	eq
 8007e3e:	2000      	moveq	r0, #0
 8007e40:	6010      	streq	r0, [r2, #0]
 8007e42:	68d0      	ldr	r0, [r2, #12]
 8007e44:	4281      	cmp	r1, r0
 8007e46:	bf04      	itt	eq
 8007e48:	2000      	moveq	r0, #0
 8007e4a:	60d0      	streq	r0, [r2, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f881 2400 	strb.w	r2, [r1, #1024]	; 0x400
	if (fs) {
 8007e52:	9901      	ldr	r1, [sp, #4]
 8007e54:	b191      	cbz	r1, 8007e7c <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e56:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e58:	2d01      	cmp	r5, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8007e5a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8007e5e:	f881 0400 	strb.w	r0, [r1, #1024]	; 0x400
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e62:	d001      	beq.n	8007e68 <f_mount+0x50>
}
 8007e64:	b005      	add	sp, #20
 8007e66:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007e68:	4602      	mov	r2, r0
 8007e6a:	4669      	mov	r1, sp
 8007e6c:	a801      	add	r0, sp, #4
 8007e6e:	f7fe fd21 	bl	80068b4 <find_volume>
}
 8007e72:	b005      	add	sp, #20
 8007e74:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e76:	200b      	movs	r0, #11
}
 8007e78:	b005      	add	sp, #20
 8007e7a:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e7c:	4608      	mov	r0, r1
	FatFs[vol] = fs;					/* Register new fs object */
 8007e7e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 8007e82:	b005      	add	sp, #20
 8007e84:	bd30      	pop	{r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	20002880 	.word	0x20002880
 8007e8c:	20002884 	.word	0x20002884

08007e90 <f_open>:
{
 8007e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e94:	b090      	sub	sp, #64	; 0x40
 8007e96:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d039      	beq.n	8007f10 <f_open+0x80>
	fp->fs = 0;			/* Clear file object */
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4616      	mov	r6, r2
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007ea2:	a806      	add	r0, sp, #24
 8007ea4:	f002 021e 	and.w	r2, r2, #30
 8007ea8:	a901      	add	r1, sp, #4
	fp->fs = 0;			/* Clear file object */
 8007eaa:	6023      	str	r3, [r4, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007eac:	f7fe fd02 	bl	80068b4 <find_volume>
	if (res == FR_OK) {
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b118      	cbz	r0, 8007ebc <f_open+0x2c>
}
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	b010      	add	sp, #64	; 0x40
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		INIT_BUF(dj);
 8007ebc:	4b70      	ldr	r3, [pc, #448]	; (8008080 <f_open+0x1f0>)
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ebe:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8007ec0:	930e      	str	r3, [sp, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ec2:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ec8:	f7ff fc62 	bl	8007790 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007ecc:	f006 081f 	and.w	r8, r6, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ed0:	4603      	mov	r3, r0
		if (res == FR_OK) {
 8007ed2:	b9c0      	cbnz	r0, 8007f06 <f_open+0x76>
		dir = dj.dir;
 8007ed4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (!dir)	/* Default directory itself */
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	d069      	beq.n	8007fae <f_open+0x11e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007eda:	f018 0f1e 	tst.w	r8, #30
 8007ede:	bf14      	ite	ne
 8007ee0:	2101      	movne	r1, #1
 8007ee2:	2100      	moveq	r1, #0
 8007ee4:	a806      	add	r0, sp, #24
 8007ee6:	f7fe fb15 	bl	8006514 <chk_lock>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007eea:	f016 0f1c 	tst.w	r6, #28
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007eee:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007ef0:	d013      	beq.n	8007f1a <f_open+0x8a>
			if (res != FR_OK) {					/* No file, create new */
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d146      	bne.n	8007f84 <f_open+0xf4>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	f013 0f11 	tst.w	r3, #17
 8007efc:	d14b      	bne.n	8007f96 <f_open+0x106>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007efe:	0773      	lsls	r3, r6, #29
 8007f00:	d54f      	bpl.n	8007fa2 <f_open+0x112>
						res = FR_EXIST;
 8007f02:	2508      	movs	r5, #8
 8007f04:	e7d6      	b.n	8007eb4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f06:	f016 0f1c 	tst.w	r6, #28
 8007f0a:	d13b      	bne.n	8007f84 <f_open+0xf4>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	e7d1      	b.n	8007eb4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8007f10:	2509      	movs	r5, #9
}
 8007f12:	4628      	mov	r0, r5
 8007f14:	b010      	add	sp, #64	; 0x40
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (res == FR_OK) {					/* Follow succeeded */
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d1f6      	bne.n	8007f0c <f_open+0x7c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	06d8      	lsls	r0, r3, #27
 8007f22:	d43a      	bmi.n	8007f9a <f_open+0x10a>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007f24:	07b2      	lsls	r2, r6, #30
 8007f26:	d501      	bpl.n	8007f2c <f_open+0x9c>
 8007f28:	07db      	lsls	r3, r3, #31
 8007f2a:	d434      	bmi.n	8007f96 <f_open+0x106>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f32:	f018 0f08 	tst.w	r8, #8
 8007f36:	d072      	beq.n	800801e <f_open+0x18e>
				mode |= FA__WRITTEN;
 8007f38:	2101      	movs	r1, #1
 8007f3a:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007f3e:	61e3      	str	r3, [r4, #28]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f40:	a806      	add	r0, sp, #24
			fp->dir_ptr = dir;
 8007f42:	6227      	str	r7, [r4, #32]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f44:	f7fe fb3a 	bl	80065bc <inc_lock>
 8007f48:	62a0      	str	r0, [r4, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007f4a:	b340      	cbz	r0, 8007f9e <f_open+0x10e>
			fp->err = 0;						/* Clear error flag */
 8007f4c:	2200      	movs	r2, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007f4e:	9b06      	ldr	r3, [sp, #24]
			fp->flag = mode;					/* File access mode */
 8007f50:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
 8007f54:	71e2      	strb	r2, [r4, #7]
	if (fs->fs_type == FS_FAT32)
 8007f56:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007f5a:	8b7a      	ldrh	r2, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8007f5c:	2903      	cmp	r1, #3
 8007f5e:	d102      	bne.n	8007f66 <f_open+0xd6>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007f60:	8ab9      	ldrh	r1, [r7, #20]
 8007f62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007f66:	6122      	str	r2, [r4, #16]
}
 8007f68:	4628      	mov	r0, r5
			fp->fptr = 0;						/* File pointer */
 8007f6a:	2200      	movs	r2, #0
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007f6c:	69f9      	ldr	r1, [r7, #28]
			fp->fs = dj.fs;	 					/* Validate file object */
 8007f6e:	6023      	str	r3, [r4, #0]
			fp->id = fp->fs->id;
 8007f70:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			fp->fptr = 0;						/* File pointer */
 8007f74:	e9c4 2102 	strd	r2, r1, [r4, #8]
			fp->id = fp->fs->id;
 8007f78:	80a3      	strh	r3, [r4, #4]
			fp->dsect = 0;
 8007f7a:	61a2      	str	r2, [r4, #24]
			fp->cltbl = 0;						/* Normal seek mode */
 8007f7c:	6262      	str	r2, [r4, #36]	; 0x24
}
 8007f7e:	b010      	add	sp, #64	; 0x40
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d148      	bne.n	800801a <f_open+0x18a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f88:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <f_open+0x1f4>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	b18a      	cbz	r2, 8007fb2 <f_open+0x122>
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	b17b      	cbz	r3, 8007fb2 <f_open+0x122>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f92:	2512      	movs	r5, #18
 8007f94:	e78e      	b.n	8007eb4 <f_open+0x24>
					res = FR_DENIED;
 8007f96:	2507      	movs	r5, #7
 8007f98:	e78c      	b.n	8007eb4 <f_open+0x24>
					res = FR_NO_FILE;
 8007f9a:	2504      	movs	r5, #4
 8007f9c:	e78a      	b.n	8007eb4 <f_open+0x24>
			if (!fp->lockid) res = FR_INT_ERR;
 8007f9e:	2502      	movs	r5, #2
 8007fa0:	e788      	b.n	8007eb4 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007fa2:	0736      	lsls	r6, r6, #28
 8007fa4:	d40d      	bmi.n	8007fc2 <f_open+0x132>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8007fac:	e7c7      	b.n	8007f3e <f_open+0xae>
				res = FR_INVALID_NAME;
 8007fae:	2506      	movs	r5, #6
 8007fb0:	e780      	b.n	8007eb4 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007fb2:	a806      	add	r0, sp, #24
 8007fb4:	f7ff fd54 	bl	8007a60 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007fb8:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8007fbc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d1a4      	bne.n	8007f0c <f_open+0x7c>
				dw = GET_FATTIME();				/* Created time */
 8007fc2:	f7fd fc79 	bl	80058b8 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	72fb      	strb	r3, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007fca:	773b      	strb	r3, [r7, #28]
 8007fcc:	777b      	strb	r3, [r7, #29]
 8007fce:	77bb      	strb	r3, [r7, #30]
 8007fd0:	77fb      	strb	r3, [r7, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007fd2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	0c03      	lsrs	r3, r0, #16
 8007fda:	743b      	strb	r3, [r7, #16]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007fdc:	9a06      	ldr	r2, [sp, #24]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007fde:	0e03      	lsrs	r3, r0, #24
 8007fe0:	73b8      	strb	r0, [r7, #14]
 8007fe2:	747b      	strb	r3, [r7, #17]
	if (fs->fs_type == FS_FAT32)
 8007fe4:	f892 3400 	ldrb.w	r3, [r2, #1024]	; 0x400
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007fe8:	8b7e      	ldrh	r6, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8007fea:	2b03      	cmp	r3, #3
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007fec:	bf08      	it	eq
 8007fee:	8abb      	ldrheq	r3, [r7, #20]
				dj.fs->wflag = 1;
 8007ff0:	f04f 0101 	mov.w	r1, #1
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007ff4:	bf08      	it	eq
 8007ff6:	ea46 4603 	orreq.w	r6, r6, r3, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	76bb      	strb	r3, [r7, #26]
 8007ffe:	76fb      	strb	r3, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008000:	753b      	strb	r3, [r7, #20]
 8008002:	757b      	strb	r3, [r7, #21]
				dj.fs->wflag = 1;
 8008004:	f882 1404 	strb.w	r1, [r2, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8008008:	b97e      	cbnz	r6, 800802a <f_open+0x19a>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800800a:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
 800800e:	e790      	b.n	8007f32 <f_open+0xa2>
 8008010:	4650      	mov	r0, sl
 8008012:	f7fe fb6d 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008016:	4603      	mov	r3, r0
 8008018:	b1f0      	cbz	r0, 8008058 <f_open+0x1c8>
 800801a:	461d      	mov	r5, r3
 800801c:	e74a      	b.n	8007eb4 <f_open+0x24>
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800801e:	f018 0ffe 	tst.w	r8, #254	; 0xfe
 8008022:	bf14      	ite	ne
 8008024:	2101      	movne	r1, #1
 8008026:	2100      	moveq	r1, #0
 8008028:	e789      	b.n	8007f3e <f_open+0xae>
					res = remove_chain(dj.fs, cl);
 800802a:	4631      	mov	r1, r6
 800802c:	4610      	mov	r0, r2
					dw = dj.fs->winsect;
 800802e:	f8d2 942c 	ldr.w	r9, [r2, #1068]	; 0x42c
					res = remove_chain(dj.fs, cl);
 8008032:	f7fe ffb1 	bl	8006f98 <remove_chain>
					if (res == FR_OK) {
 8008036:	2800      	cmp	r0, #0
 8008038:	f47f af68 	bne.w	8007f0c <f_open+0x7c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800803c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008040:	3e01      	subs	r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008042:	f8da 342c 	ldr.w	r3, [sl, #1068]	; 0x42c
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008046:	f8ca 640c 	str.w	r6, [sl, #1036]	; 0x40c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800804a:	4599      	cmp	r9, r3
 800804c:	f43f af71 	beq.w	8007f32 <f_open+0xa2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008050:	f89a 3404 	ldrb.w	r3, [sl, #1028]	; 0x404
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1db      	bne.n	8008010 <f_open+0x180>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008058:	2301      	movs	r3, #1
 800805a:	464a      	mov	r2, r9
 800805c:	4651      	mov	r1, sl
 800805e:	f89a 0401 	ldrb.w	r0, [sl, #1025]	; 0x401
 8008062:	f7fe fa2f 	bl	80064c4 <disk_read>
 8008066:	b128      	cbz	r0, 8008074 <f_open+0x1e4>
			fs->winsect = sector;
 8008068:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800806c:	2501      	movs	r5, #1
			fs->winsect = sector;
 800806e:	f8ca 342c 	str.w	r3, [sl, #1068]	; 0x42c
		if (res == FR_OK) {
 8008072:	e71f      	b.n	8007eb4 <f_open+0x24>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008074:	9b06      	ldr	r3, [sp, #24]
			fs->winsect = sector;
 8008076:	f8ca 942c 	str.w	r9, [sl, #1068]	; 0x42c
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800807a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800807e:	e758      	b.n	8007f32 <f_open+0xa2>
 8008080:	200028a0 	.word	0x200028a0
 8008084:	20002884 	.word	0x20002884

08008088 <f_close>:
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008088:	2800      	cmp	r0, #0
 800808a:	d04a      	beq.n	8008122 <f_close+0x9a>
 800808c:	6803      	ldr	r3, [r0, #0]
{
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	4604      	mov	r4, r0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008092:	b13b      	cbz	r3, 80080a4 <f_close+0x1c>
 8008094:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8008098:	b122      	cbz	r2, 80080a4 <f_close+0x1c>
 800809a:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 800809e:	8882      	ldrh	r2, [r0, #4]
 80080a0:	4291      	cmp	r1, r2
 80080a2:	d001      	beq.n	80080a8 <f_close+0x20>
		return FR_INVALID_OBJECT;
 80080a4:	2009      	movs	r0, #9
}
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80080a8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80080ac:	f7fe f9ec 	bl	8006488 <disk_status>
 80080b0:	07c2      	lsls	r2, r0, #31
 80080b2:	d4f7      	bmi.n	80080a4 <f_close+0x1c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80080b4:	79a3      	ldrb	r3, [r4, #6]
 80080b6:	069b      	lsls	r3, r3, #26
 80080b8:	d518      	bpl.n	80080ec <f_close+0x64>
			res = move_window(fp->fs, fp->dir_sect);
 80080ba:	6825      	ldr	r5, [r4, #0]
 80080bc:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80080be:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
 80080c2:	429e      	cmp	r6, r3
 80080c4:	d00d      	beq.n	80080e2 <f_close+0x5a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80080c6:	f895 3404 	ldrb.w	r3, [r5, #1028]	; 0x404
 80080ca:	bb63      	cbnz	r3, 8008126 <f_close+0x9e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80080cc:	2301      	movs	r3, #1
 80080ce:	4632      	mov	r2, r6
 80080d0:	4629      	mov	r1, r5
 80080d2:	f895 0401 	ldrb.w	r0, [r5, #1025]	; 0x401
 80080d6:	f7fe f9f5 	bl	80064c4 <disk_read>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d131      	bne.n	8008142 <f_close+0xba>
			fs->winsect = sector;
 80080de:	f8c5 642c 	str.w	r6, [r5, #1068]	; 0x42c
			if (res == FR_OK) {
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7fe fb7e 	bl	80067e4 <f_sync.part.0>
	if (res == FR_OK)
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1dc      	bne.n	80080a6 <f_close+0x1e>
		res = validate(fp);				/* Lock volume */
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7fe fae7 	bl	80066c0 <validate>
		if (res == FR_OK) {
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1d7      	bne.n	80080a6 <f_close+0x1e>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80080f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080f8:	3b01      	subs	r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d81f      	bhi.n	800813e <f_close+0xb6>
		n = Files[i].ctr;
 80080fe:	4e14      	ldr	r6, [pc, #80]	; (8008150 <f_close+0xc8>)
 8008100:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008104:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8008108:	894a      	ldrh	r2, [r1, #10]
 800810a:	005d      	lsls	r5, r3, #1
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800810c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008110:	d00f      	beq.n	8008132 <f_close+0xaa>
		if (n) n--;					/* Decrement read mode open count */
 8008112:	b17a      	cbz	r2, 8008134 <f_close+0xac>
 8008114:	3a01      	subs	r2, #1
 8008116:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8008118:	814a      	strh	r2, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800811a:	b15a      	cbz	r2, 8008134 <f_close+0xac>
				fp->fs = 0;				/* Invalidate file object */
 800811c:	2300      	movs	r3, #0
 800811e:	6023      	str	r3, [r4, #0]
}
 8008120:	bd70      	pop	{r4, r5, r6, pc}
		return FR_INVALID_OBJECT;
 8008122:	2009      	movs	r0, #9
}
 8008124:	4770      	bx	lr
 8008126:	4628      	mov	r0, r5
 8008128:	f7fe fae2 	bl	80066f0 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800812c:	2800      	cmp	r0, #0
 800812e:	d0cd      	beq.n	80080cc <f_close+0x44>
}
 8008130:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8008132:	8148      	strh	r0, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008134:	2200      	movs	r2, #0
 8008136:	442b      	add	r3, r5
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	50f2      	str	r2, [r6, r3]
			if (res == FR_OK)
 800813c:	e7ee      	b.n	800811c <f_close+0x94>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800813e:	2002      	movs	r0, #2
}
 8008140:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8008142:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8008146:	2001      	movs	r0, #1
			fs->winsect = sector;
 8008148:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
}
 800814c:	bd70      	pop	{r4, r5, r6, pc}
 800814e:	bf00      	nop
 8008150:	20002884 	.word	0x20002884

08008154 <f_lseek>:
{
 8008154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	4604      	mov	r4, r0
 800815a:	460e      	mov	r6, r1
	res = validate(fp);					/* Check validity of the object */
 800815c:	f7fe fab0 	bl	80066c0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008160:	4605      	mov	r5, r0
 8008162:	b960      	cbnz	r0, 800817e <f_lseek+0x2a>
	if (fp->err)						/* Check error */
 8008164:	79e5      	ldrb	r5, [r4, #7]
 8008166:	b955      	cbnz	r5, 800817e <f_lseek+0x2a>
	if (fp->cltbl) {	/* Fast seek */
 8008168:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800816a:	2a00      	cmp	r2, #0
 800816c:	d03f      	beq.n	80081ee <f_lseek+0x9a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800816e:	1c71      	adds	r1, r6, #1
 8008170:	d079      	beq.n	8008266 <f_lseek+0x112>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008172:	68e1      	ldr	r1, [r4, #12]
 8008174:	42b1      	cmp	r1, r6
 8008176:	bf28      	it	cs
 8008178:	4631      	movcs	r1, r6
			fp->fptr = ofs;				/* Set file pointer */
 800817a:	60a1      	str	r1, [r4, #8]
			if (ofs) {
 800817c:	b911      	cbnz	r1, 8008184 <f_lseek+0x30>
}
 800817e:	4628      	mov	r0, r5
 8008180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->clust = clmt_clust(fp, ofs - 1);
 8008184:	6826      	ldr	r6, [r4, #0]
 8008186:	1e4f      	subs	r7, r1, #1
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008188:	f8b6 e40a 	ldrh.w	lr, [r6, #1034]	; 0x40a
 800818c:	f896 c402 	ldrb.w	ip, [r6, #1026]	; 0x402
 8008190:	fbb7 f7fe 	udiv	r7, r7, lr
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008194:	6853      	ldr	r3, [r2, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008196:	fbb7 f0fc 	udiv	r0, r7, ip
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800819a:	3204      	adds	r2, #4
		if (!ncl) return 0;		/* End of table? (error) */
 800819c:	b933      	cbnz	r3, 80081ac <f_lseek+0x58>
 800819e:	e09d      	b.n	80082dc <f_lseek+0x188>
		cl -= ncl; tbl++;		/* Next fragment */
 80081a0:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081a2:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8098 	beq.w	80082dc <f_lseek+0x188>
		if (cl < ncl) break;	/* In this fragment? */
 80081ac:	4283      	cmp	r3, r0
 80081ae:	d9f7      	bls.n	80081a0 <f_lseek+0x4c>
	return cl + *tbl;	/* Return the cluster number */
 80081b0:	6853      	ldr	r3, [r2, #4]
 80081b2:	4403      	add	r3, r0
	clst -= 2;
 80081b4:	1e9a      	subs	r2, r3, #2
				fp->clust = clmt_clust(fp, ofs - 1);
 80081b6:	6163      	str	r3, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80081b8:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 80081bc:	3b02      	subs	r3, #2
 80081be:	4293      	cmp	r3, r2
 80081c0:	d967      	bls.n	8008292 <f_lseek+0x13e>
	return clst * fs->csize + fs->database;
 80081c2:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
 80081c6:	fb02 330c 	mla	r3, r2, ip, r3
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d061      	beq.n	8008292 <f_lseek+0x13e>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80081ce:	fbb1 f6fe 	udiv	r6, r1, lr
 80081d2:	fb0e 1616 	mls	r6, lr, r6, r1
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	d0d1      	beq.n	800817e <f_lseek+0x2a>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80081da:	f10c 3cff 	add.w	ip, ip, #4294967295
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80081de:	69a2      	ldr	r2, [r4, #24]
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80081e0:	ea0c 0707 	and.w	r7, ip, r7
 80081e4:	441f      	add	r7, r3
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80081e6:	42ba      	cmp	r2, r7
 80081e8:	d0c9      	beq.n	800817e <f_lseek+0x2a>
					fp->dsect = dsc;
 80081ea:	61a7      	str	r7, [r4, #24]
 80081ec:	e7c7      	b.n	800817e <f_lseek+0x2a>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80081ee:	68e3      	ldr	r3, [r4, #12]
 80081f0:	42b3      	cmp	r3, r6
 80081f2:	d204      	bcs.n	80081fe <f_lseek+0xaa>
			 && !(fp->flag & FA_WRITE)
 80081f4:	79a2      	ldrb	r2, [r4, #6]
 80081f6:	f012 0f02 	tst.w	r2, #2
 80081fa:	bf08      	it	eq
 80081fc:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 80081fe:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8008200:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
 8008202:	60a2      	str	r2, [r4, #8]
		if (ofs) {
 8008204:	2e00      	cmp	r6, #0
 8008206:	d0ba      	beq.n	800817e <f_lseek+0x2a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	f890 7402 	ldrb.w	r7, [r0, #1026]	; 0x402
 800820e:	f8b0 240a 	ldrh.w	r2, [r0, #1034]	; 0x40a
 8008212:	fb02 f707 	mul.w	r7, r2, r7
			if (ifptr > 0 &&
 8008216:	2b00      	cmp	r3, #0
 8008218:	d055      	beq.n	80082c6 <f_lseek+0x172>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800821a:	3b01      	subs	r3, #1
 800821c:	1e72      	subs	r2, r6, #1
 800821e:	fbb2 f2f7 	udiv	r2, r2, r7
 8008222:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 8008226:	428a      	cmp	r2, r1
 8008228:	d34d      	bcc.n	80082c6 <f_lseek+0x172>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800822a:	427a      	negs	r2, r7
 800822c:	4013      	ands	r3, r2
				clst = fp->clust;
 800822e:	6961      	ldr	r1, [r4, #20]
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008230:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
 8008232:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 8008234:	2900      	cmp	r1, #0
 8008236:	d154      	bne.n	80082e2 <f_lseek+0x18e>
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008238:	68a3      	ldr	r3, [r4, #8]
 800823a:	f8b0 740a 	ldrh.w	r7, [r0, #1034]	; 0x40a
 800823e:	fbb3 f2f7 	udiv	r2, r3, r7
 8008242:	fb07 3212 	mls	r2, r7, r2, r3
 8008246:	2a00      	cmp	r2, #0
 8008248:	f000 80ac 	beq.w	80083a4 <f_lseek+0x250>
 800824c:	69a2      	ldr	r2, [r4, #24]
 800824e:	428a      	cmp	r2, r1
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008250:	68e2      	ldr	r2, [r4, #12]
			fp->dsect = nsect;
 8008252:	bf18      	it	ne
 8008254:	61a1      	strne	r1, [r4, #24]
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008256:	4293      	cmp	r3, r2
 8008258:	d991      	bls.n	800817e <f_lseek+0x2a>
			fp->flag |= FA__WRITTEN;
 800825a:	79a2      	ldrb	r2, [r4, #6]
			fp->fsize = fp->fptr;
 800825c:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 800825e:	f042 0320 	orr.w	r3, r2, #32
 8008262:	71a3      	strb	r3, [r4, #6]
 8008264:	e78b      	b.n	800817e <f_lseek+0x2a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008266:	4617      	mov	r7, r2
			cl = fp->sclust;			/* Top of the chain */
 8008268:	f8d4 8010 	ldr.w	r8, [r4, #16]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800826c:	f04f 0902 	mov.w	r9, #2
 8008270:	f857 ab04 	ldr.w	sl, [r7], #4
			if (cl) {
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d01e      	beq.n	80082b8 <f_lseek+0x164>
						cl = get_fat(fp->fs, cl);
 800827a:	6820      	ldr	r0, [r4, #0]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800827c:	4646      	mov	r6, r8
 800827e:	f04f 0b00 	mov.w	fp, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008282:	2e01      	cmp	r6, #1
						pcl = cl; ncl++;
 8008284:	f10b 0b01 	add.w	fp, fp, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008288:	d903      	bls.n	8008292 <f_lseek+0x13e>
 800828a:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 800828e:	429e      	cmp	r6, r3
 8008290:	d303      	bcc.n	800829a <f_lseek+0x146>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008292:	2302      	movs	r3, #2
 8008294:	461d      	mov	r5, r3
 8008296:	71e3      	strb	r3, [r4, #7]
 8008298:	e771      	b.n	800817e <f_lseek+0x2a>
 800829a:	4631      	mov	r1, r6
 800829c:	f7fe fda6 	bl	8006dec <get_fat.part.0>
 80082a0:	2801      	cmp	r0, #1
 80082a2:	4603      	mov	r3, r0
					} while (cl == pcl + 1);
 80082a4:	f106 0601 	add.w	r6, r6, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80082a8:	d9f3      	bls.n	8008292 <f_lseek+0x13e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80082aa:	1c42      	adds	r2, r0, #1
 80082ac:	d012      	beq.n	80082d4 <f_lseek+0x180>
					} while (cl == pcl + 1);
 80082ae:	4286      	cmp	r6, r0
 80082b0:	d13c      	bne.n	800832c <f_lseek+0x1d8>
						cl = get_fat(fp->fs, cl);
 80082b2:	6820      	ldr	r0, [r4, #0]
 80082b4:	e7e5      	b.n	8008282 <f_lseek+0x12e>
			*fp->cltbl = ulen;	/* Number of items used */
 80082b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			if (ulen <= tlen)
 80082b8:	45d1      	cmp	r9, sl
			*fp->cltbl = ulen;	/* Number of items used */
 80082ba:	f8c2 9000 	str.w	r9, [r2]
			if (ulen <= tlen)
 80082be:	d807      	bhi.n	80082d0 <f_lseek+0x17c>
				*tbl = 0;		/* Terminate table */
 80082c0:	2300      	movs	r3, #0
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	e75b      	b.n	800817e <f_lseek+0x2a>
				clst = fp->sclust;						/* start from the first cluster */
 80082c6:	6921      	ldr	r1, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d040      	beq.n	800834e <f_lseek+0x1fa>
				fp->clust = clst;
 80082cc:	6161      	str	r1, [r4, #20]
 80082ce:	e7b1      	b.n	8008234 <f_lseek+0xe0>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80082d0:	2511      	movs	r5, #17
 80082d2:	e754      	b.n	800817e <f_lseek+0x2a>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80082d4:	2301      	movs	r3, #1
 80082d6:	461d      	mov	r5, r3
 80082d8:	71e3      	strb	r3, [r4, #7]
 80082da:	e750      	b.n	800817e <f_lseek+0x2a>
 80082dc:	f06f 0201 	mvn.w	r2, #1
 80082e0:	e769      	b.n	80081b6 <f_lseek+0x62>
				while (ofs > bcs) {						/* Cluster following loop */
 80082e2:	42be      	cmp	r6, r7
 80082e4:	d814      	bhi.n	8008310 <f_lseek+0x1bc>
 80082e6:	e05b      	b.n	80083a0 <f_lseek+0x24c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80082e8:	f7fe fefa 	bl	80070e0 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80082ec:	4601      	mov	r1, r0
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d037      	beq.n	8008362 <f_lseek+0x20e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80082f2:	1c4b      	adds	r3, r1, #1
 80082f4:	d0ee      	beq.n	80082d4 <f_lseek+0x180>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80082f6:	2901      	cmp	r1, #1
 80082f8:	d9cb      	bls.n	8008292 <f_lseek+0x13e>
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 8008300:	428b      	cmp	r3, r1
 8008302:	d9c6      	bls.n	8008292 <f_lseek+0x13e>
					fp->fptr += bcs;
 8008304:	68a3      	ldr	r3, [r4, #8]
				while (ofs > bcs) {						/* Cluster following loop */
 8008306:	42b7      	cmp	r7, r6
					fp->fptr += bcs;
 8008308:	443b      	add	r3, r7
 800830a:	60a3      	str	r3, [r4, #8]
					fp->clust = clst;
 800830c:	6161      	str	r1, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 800830e:	d22b      	bcs.n	8008368 <f_lseek+0x214>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008310:	79a3      	ldrb	r3, [r4, #6]
					ofs -= bcs;
 8008312:	1bf6      	subs	r6, r6, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008314:	079a      	lsls	r2, r3, #30
 8008316:	d4e7      	bmi.n	80082e8 <f_lseek+0x194>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008318:	2901      	cmp	r1, #1
 800831a:	d9ba      	bls.n	8008292 <f_lseek+0x13e>
 800831c:	f8d0 3414 	ldr.w	r3, [r0, #1044]	; 0x414
 8008320:	4299      	cmp	r1, r3
 8008322:	d2b6      	bcs.n	8008292 <f_lseek+0x13e>
 8008324:	f7fe fd62 	bl	8006dec <get_fat.part.0>
 8008328:	4601      	mov	r1, r0
 800832a:	e7e2      	b.n	80082f2 <f_lseek+0x19e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800832c:	f109 0902 	add.w	r9, r9, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008330:	45ca      	cmp	sl, r9
 8008332:	d305      	bcc.n	8008340 <f_lseek+0x1ec>
						*tbl++ = ncl; *tbl++ = tcl;
 8008334:	463a      	mov	r2, r7
 8008336:	f842 bb08 	str.w	fp, [r2], #8
 800833a:	f8c7 8004 	str.w	r8, [r7, #4]
 800833e:	4617      	mov	r7, r2
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	f8d0 2414 	ldr.w	r2, [r0, #1044]	; 0x414
 8008346:	429a      	cmp	r2, r3
 8008348:	d9b5      	bls.n	80082b6 <f_lseek+0x162>
 800834a:	4698      	mov	r8, r3
 800834c:	e796      	b.n	800827c <f_lseek+0x128>
					clst = create_chain(fp->fs, 0);
 800834e:	f7fe fec7 	bl	80070e0 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008352:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8008354:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008356:	d09c      	beq.n	8008292 <f_lseek+0x13e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008358:	1c48      	adds	r0, r1, #1
 800835a:	d0bb      	beq.n	80082d4 <f_lseek+0x180>
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800835c:	6820      	ldr	r0, [r4, #0]
					fp->sclust = clst;
 800835e:	6121      	str	r1, [r4, #16]
 8008360:	e7b4      	b.n	80082cc <f_lseek+0x178>
				if (ofs % SS(fp->fs)) {
 8008362:	463e      	mov	r6, r7
				fp->fptr += ofs;
 8008364:	68a3      	ldr	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	f8b0 740a 	ldrh.w	r7, [r0, #1034]	; 0x40a
				fp->fptr += ofs;
 800836c:	4433      	add	r3, r6
				if (ofs % SS(fp->fs)) {
 800836e:	fbb6 f2f7 	udiv	r2, r6, r7
 8008372:	fb07 6612 	mls	r6, r7, r2, r6
				fp->fptr += ofs;
 8008376:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 8008378:	b186      	cbz	r6, 800839c <f_lseek+0x248>
	clst -= 2;
 800837a:	1e8e      	subs	r6, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800837c:	f8d0 1414 	ldr.w	r1, [r0, #1044]	; 0x414
 8008380:	3902      	subs	r1, #2
 8008382:	428e      	cmp	r6, r1
 8008384:	d285      	bcs.n	8008292 <f_lseek+0x13e>
	return clst * fs->csize + fs->database;
 8008386:	f890 c402 	ldrb.w	ip, [r0, #1026]	; 0x402
 800838a:	f8d0 1428 	ldr.w	r1, [r0, #1064]	; 0x428
 800838e:	fb06 110c 	mla	r1, r6, ip, r1
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008392:	2900      	cmp	r1, #0
 8008394:	f43f af7d 	beq.w	8008292 <f_lseek+0x13e>
					nsect += ofs / SS(fp->fs);
 8008398:	4411      	add	r1, r2
 800839a:	e750      	b.n	800823e <f_lseek+0xea>
		fp->fptr = nsect = 0;
 800839c:	4631      	mov	r1, r6
 800839e:	e74e      	b.n	800823e <f_lseek+0xea>
				fp->fptr += ofs;
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	e7e1      	b.n	8008368 <f_lseek+0x214>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80083a4:	68e2      	ldr	r2, [r4, #12]
 80083a6:	e756      	b.n	8008256 <f_lseek+0x102>

080083a8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80083a8:	b530      	push	{r4, r5, lr}
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 80083aa:	2300      	movs	r3, #0
{
 80083ac:	460d      	mov	r5, r1

	while (*str)			/* Put the string */
 80083ae:	7801      	ldrb	r1, [r0, #0]
{
 80083b0:	b095      	sub	sp, #84	; 0x54
	pb.nchr = pb.idx = 0;
 80083b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	pb.fp = fp;				/* Initialize output buffer */
 80083b6:	9501      	str	r5, [sp, #4]
	while (*str)			/* Put the string */
 80083b8:	b341      	cbz	r1, 800840c <f_puts+0x64>
 80083ba:	4604      	mov	r4, r0
		putc_bfd(&pb, *str++);
 80083bc:	a801      	add	r0, sp, #4
 80083be:	f7ff f835 	bl	800742c <putc_bfd>
	while (*str)			/* Put the string */
 80083c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80083c6:	2900      	cmp	r1, #0
 80083c8:	d1f8      	bne.n	80083bc <f_puts+0x14>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80083ca:	9c02      	ldr	r4, [sp, #8]
 80083cc:	2c00      	cmp	r4, #0
 80083ce:	db19      	blt.n	8008404 <f_puts+0x5c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80083d0:	9d01      	ldr	r5, [sp, #4]
	*bw = 0;	/* Clear write byte counter */
 80083d2:	2300      	movs	r3, #0
	res = validate(fp);						/* Check validity */
 80083d4:	4628      	mov	r0, r5
	*bw = 0;	/* Clear write byte counter */
 80083d6:	9300      	str	r3, [sp, #0]
	res = validate(fp);						/* Check validity */
 80083d8:	f7fe f972 	bl	80066c0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80083dc:	b990      	cbnz	r0, 8008404 <f_puts+0x5c>
	if (fp->err)							/* Check error */
 80083de:	79eb      	ldrb	r3, [r5, #7]
 80083e0:	b983      	cbnz	r3, 8008404 <f_puts+0x5c>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80083e2:	79ab      	ldrb	r3, [r5, #6]
 80083e4:	079b      	lsls	r3, r3, #30
 80083e6:	d50d      	bpl.n	8008404 <f_puts+0x5c>
 80083e8:	4622      	mov	r2, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	466b      	mov	r3, sp
 80083ee:	a904      	add	r1, sp, #16
 80083f0:	f7fe fee8 	bl	80071c4 <f_write.part.0>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80083f4:	b930      	cbnz	r0, 8008404 <f_puts+0x5c>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80083f6:	9a02      	ldr	r2, [sp, #8]
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d102      	bne.n	8008404 <f_puts+0x5c>
 80083fe:	9803      	ldr	r0, [sp, #12]
	return EOF;
}
 8008400:	b015      	add	sp, #84	; 0x54
 8008402:	bd30      	pop	{r4, r5, pc}
	return EOF;
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008408:	b015      	add	sp, #84	; 0x54
 800840a:	bd30      	pop	{r4, r5, pc}
	while (*str)			/* Put the string */
 800840c:	460c      	mov	r4, r1
 800840e:	e7e0      	b.n	80083d2 <f_puts+0x2a>

08008410 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8008410:	4b14      	ldr	r3, [pc, #80]	; (8008464 <FATFS_LinkDriver+0x54>)
 8008412:	7a5a      	ldrb	r2, [r3, #9]
 8008414:	2a01      	cmp	r2, #1
 8008416:	d901      	bls.n	800841c <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8008418:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800841a:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 800841c:	2200      	movs	r2, #0
{
 800841e:	b530      	push	{r4, r5, lr}
    path[1] = ':';
 8008420:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 8008422:	242f      	movs	r4, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 8008424:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8008428:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 800842c:	fa5f fc8c 	uxtb.w	ip, ip
    disk.drv[disk.nbr] = drv;  
 8008430:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8008434:	f8ce 0004 	str.w	r0, [lr, #4]
    disk.is_initialized[disk.nbr] = 0;
 8008438:	f803 200c 	strb.w	r2, [r3, ip]
    disk.lun[disk.nbr] = lun;  
 800843c:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
 800843e:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8008442:	4418      	add	r0, r3
    DiskNum = disk.nbr++;
 8008444:	f10c 0e01 	add.w	lr, ip, #1
 8008448:	fa5f fe8e 	uxtb.w	lr, lr
    disk.lun[disk.nbr] = lun;  
 800844c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800844e:	f883 e009 	strb.w	lr, [r3, #9]
    path[0] = DiskNum + '0';
 8008452:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    path[3] = 0;
 8008456:	4610      	mov	r0, r2
    path[1] = ':';
 8008458:	704d      	strb	r5, [r1, #1]
    path[0] = DiskNum + '0';
 800845a:	f881 c000 	strb.w	ip, [r1]
    path[2] = '/';
 800845e:	708c      	strb	r4, [r1, #2]
    path[3] = 0;
 8008460:	70ca      	strb	r2, [r1, #3]
}
 8008462:	bd30      	pop	{r4, r5, pc}
 8008464:	20002aa0 	.word	0x20002aa0

08008468 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008468:	287f      	cmp	r0, #127	; 0x7f
 800846a:	d914      	bls.n	8008496 <ff_convert+0x2e>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800846c:	b981      	cbnz	r1, 8008490 <ff_convert+0x28>
 800846e:	23c7      	movs	r3, #199	; 0xc7
 8008470:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <ff_convert+0x3c>)
 8008472:	e003      	b.n	800847c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008474:	2980      	cmp	r1, #128	; 0x80
 8008476:	d00d      	beq.n	8008494 <ff_convert+0x2c>
				if (chr == Tbl[c]) break;
 8008478:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800847c:	4298      	cmp	r0, r3
 800847e:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8008482:	f101 0101 	add.w	r1, r1, #1
				if (chr == Tbl[c]) break;
 8008486:	d1f5      	bne.n	8008474 <ff_convert+0xc>
			}
			c = (c + 0x80) & 0xFF;
 8008488:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 800848c:	b280      	uxth	r0, r0
 800848e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008490:	28ff      	cmp	r0, #255	; 0xff
 8008492:	d901      	bls.n	8008498 <ff_convert+0x30>
 8008494:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8008496:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <ff_convert+0x3c>)
 800849a:	3880      	subs	r0, #128	; 0x80
 800849c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	08009e04 	.word	0x08009e04

080084a8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80084a8:	2200      	movs	r2, #0
 80084aa:	2361      	movs	r3, #97	; 0x61
 80084ac:	4905      	ldr	r1, [pc, #20]	; (80084c4 <ff_wtoupper+0x1c>)
 80084ae:	e003      	b.n	80084b8 <ff_wtoupper+0x10>
 80084b0:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80084b4:	3201      	adds	r2, #1
 80084b6:	b123      	cbz	r3, 80084c2 <ff_wtoupper+0x1a>
 80084b8:	4298      	cmp	r0, r3
 80084ba:	d1f9      	bne.n	80084b0 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <ff_wtoupper+0x20>)
 80084be:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
 80084c2:	4770      	bx	lr
 80084c4:	08009f04 	.word	0x08009f04
 80084c8:	0800a0e4 	.word	0x0800a0e4

080084cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084ce:	2200      	movs	r2, #0
 80084d0:	4917      	ldr	r1, [pc, #92]	; (8008530 <MX_USB_DEVICE_Init+0x64>)
 80084d2:	4818      	ldr	r0, [pc, #96]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 80084d4:	f7fd fbaa 	bl	8005c2c <USBD_Init>
 80084d8:	b970      	cbnz	r0, 80084f8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084da:	4917      	ldr	r1, [pc, #92]	; (8008538 <MX_USB_DEVICE_Init+0x6c>)
 80084dc:	4815      	ldr	r0, [pc, #84]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 80084de:	f7fd fbbb 	bl	8005c58 <USBD_RegisterClass>
 80084e2:	b988      	cbnz	r0, 8008508 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084e4:	4915      	ldr	r1, [pc, #84]	; (800853c <MX_USB_DEVICE_Init+0x70>)
 80084e6:	4813      	ldr	r0, [pc, #76]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 80084e8:	f7fd fb50 	bl	8005b8c <USBD_CDC_RegisterInterface>
 80084ec:	b9a0      	cbnz	r0, 8008518 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084ee:	4811      	ldr	r0, [pc, #68]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 80084f0:	f7fd fbba 	bl	8005c68 <USBD_Start>
 80084f4:	b9b8      	cbnz	r0, 8008526 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80084f8:	f7f9 f88a 	bl	8001610 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084fc:	490e      	ldr	r1, [pc, #56]	; (8008538 <MX_USB_DEVICE_Init+0x6c>)
 80084fe:	480d      	ldr	r0, [pc, #52]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 8008500:	f7fd fbaa 	bl	8005c58 <USBD_RegisterClass>
 8008504:	2800      	cmp	r0, #0
 8008506:	d0ed      	beq.n	80084e4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8008508:	f7f9 f882 	bl	8001610 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800850c:	490b      	ldr	r1, [pc, #44]	; (800853c <MX_USB_DEVICE_Init+0x70>)
 800850e:	4809      	ldr	r0, [pc, #36]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 8008510:	f7fd fb3c 	bl	8005b8c <USBD_CDC_RegisterInterface>
 8008514:	2800      	cmp	r0, #0
 8008516:	d0ea      	beq.n	80084ee <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8008518:	f7f9 f87a 	bl	8001610 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <MX_USB_DEVICE_Init+0x68>)
 800851e:	f7fd fba3 	bl	8005c68 <USBD_Start>
 8008522:	2800      	cmp	r0, #0
 8008524:	d0e7      	beq.n	80084f6 <MX_USB_DEVICE_Init+0x2a>
}
 8008526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800852a:	f7f9 b871 	b.w	8001610 <Error_Handler>
 800852e:	bf00      	nop
 8008530:	20000144 	.word	0x20000144
 8008534:	20002aac 	.word	0x20002aac
 8008538:	20000024 	.word	0x20000024
 800853c:	20000134 	.word	0x20000134

08008540 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008540:	2000      	movs	r0, #0
 8008542:	4770      	bx	lr

08008544 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr

08008548 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800854c:	4d07      	ldr	r5, [pc, #28]	; (800856c <CDC_Receive_FS+0x24>)
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f7fd fb2d 	bl	8005bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008556:	4628      	mov	r0, r5
 8008558:	f7fd fb4c 	bl	8005bf4 <USBD_CDC_ReceivePacket>

  sscanf(Buf,"%s %s", vcp_command,vcp_data);
 800855c:	4620      	mov	r0, r4
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <CDC_Receive_FS+0x28>)
 8008560:	4a04      	ldr	r2, [pc, #16]	; (8008574 <CDC_Receive_FS+0x2c>)
 8008562:	4905      	ldr	r1, [pc, #20]	; (8008578 <CDC_Receive_FS+0x30>)
 8008564:	f000 fa4c 	bl	8008a00 <siscanf>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008568:	2000      	movs	r0, #0
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	20002aac 	.word	0x20002aac
 8008570:	20002850 	.word	0x20002850
 8008574:	20002830 	.word	0x20002830
 8008578:	0800a2c4 	.word	0x0800a2c4

0800857c <CDC_Init_FS>:
{
 800857c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800857e:	4c06      	ldr	r4, [pc, #24]	; (8008598 <CDC_Init_FS+0x1c>)
 8008580:	2200      	movs	r2, #0
 8008582:	4620      	mov	r0, r4
 8008584:	4905      	ldr	r1, [pc, #20]	; (800859c <CDC_Init_FS+0x20>)
 8008586:	f7fd fb09 	bl	8005b9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800858a:	4620      	mov	r0, r4
 800858c:	4904      	ldr	r1, [pc, #16]	; (80085a0 <CDC_Init_FS+0x24>)
 800858e:	f7fd fb0f 	bl	8005bb0 <USBD_CDC_SetRxBuffer>
}
 8008592:	2000      	movs	r0, #0
 8008594:	bd10      	pop	{r4, pc}
 8008596:	bf00      	nop
 8008598:	20002aac 	.word	0x20002aac
 800859c:	20003158 	.word	0x20003158
 80085a0:	20002d70 	.word	0x20002d70

080085a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085a4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085a6:	4c09      	ldr	r4, [pc, #36]	; (80085cc <CDC_Transmit_FS+0x28>)
 80085a8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80085ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085b0:	b10b      	cbz	r3, 80085b6 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80085b2:	2001      	movs	r0, #1
 80085b4:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085b6:	460a      	mov	r2, r1
 80085b8:	4601      	mov	r1, r0
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7fd faee 	bl	8005b9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085c0:	4620      	mov	r0, r4
}
 80085c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085c6:	f7fd bafb 	b.w	8005bc0 <USBD_CDC_TransmitPacket>
 80085ca:	bf00      	nop
 80085cc:	20002aac 	.word	0x20002aac

080085d0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80085d2:	4801      	ldr	r0, [pc, #4]	; (80085d8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d4:	800b      	strh	r3, [r1, #0]
}
 80085d6:	4770      	bx	lr
 80085d8:	20000160 	.word	0x20000160

080085dc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085dc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80085de:	4801      	ldr	r0, [pc, #4]	; (80085e4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80085e0:	800b      	strh	r3, [r1, #0]
}
 80085e2:	4770      	bx	lr
 80085e4:	20000174 	.word	0x20000174

080085e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085ea:	4c04      	ldr	r4, [pc, #16]	; (80085fc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80085ec:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085ee:	4804      	ldr	r0, [pc, #16]	; (8008600 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80085f0:	4621      	mov	r1, r4
 80085f2:	f7fd fed7 	bl	80063a4 <USBD_GetString>
  return USBD_StrDesc;
}
 80085f6:	4620      	mov	r0, r4
 80085f8:	bd10      	pop	{r4, pc}
 80085fa:	bf00      	nop
 80085fc:	20003540 	.word	0x20003540
 8008600:	0800a2cc 	.word	0x0800a2cc

08008604 <USBD_FS_ProductStrDescriptor>:
{
 8008604:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008606:	4c04      	ldr	r4, [pc, #16]	; (8008618 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8008608:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860a:	4804      	ldr	r0, [pc, #16]	; (800861c <USBD_FS_ProductStrDescriptor+0x18>)
 800860c:	4621      	mov	r1, r4
 800860e:	f7fd fec9 	bl	80063a4 <USBD_GetString>
}
 8008612:	4620      	mov	r0, r4
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	20003540 	.word	0x20003540
 800861c:	0800a2e0 	.word	0x0800a2e0

08008620 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008622:	4c04      	ldr	r4, [pc, #16]	; (8008634 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8008624:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008626:	4804      	ldr	r0, [pc, #16]	; (8008638 <USBD_FS_ConfigStrDescriptor+0x18>)
 8008628:	4621      	mov	r1, r4
 800862a:	f7fd febb 	bl	80063a4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800862e:	4620      	mov	r0, r4
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop
 8008634:	20003540 	.word	0x20003540
 8008638:	0800a2f8 	.word	0x0800a2f8

0800863c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863e:	4c04      	ldr	r4, [pc, #16]	; (8008650 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8008640:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008642:	4804      	ldr	r0, [pc, #16]	; (8008654 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008644:	4621      	mov	r1, r4
 8008646:	f7fd fead 	bl	80063a4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800864a:	4620      	mov	r0, r4
 800864c:	bd10      	pop	{r4, pc}
 800864e:	bf00      	nop
 8008650:	20003540 	.word	0x20003540
 8008654:	0800a304 	.word	0x0800a304

08008658 <USBD_FS_SerialStrDescriptor>:
{
 8008658:	b530      	push	{r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800865a:	241a      	movs	r4, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800865c:	481f      	ldr	r0, [pc, #124]	; (80086dc <USBD_FS_SerialStrDescriptor+0x84>)
 800865e:	f8d0 37e8 	ldr.w	r3, [r0, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8008662:	f8d0 27f0 	ldr.w	r2, [r0, #2032]	; 0x7f0
  *length = USB_SIZ_STRING_SERIAL;
 8008666:	800c      	strh	r4, [r1, #0]

  if (deviceserial0 != 0)
 8008668:	189b      	adds	r3, r3, r2
 800866a:	d101      	bne.n	8008670 <USBD_FS_SerialStrDescriptor+0x18>
}
 800866c:	481c      	ldr	r0, [pc, #112]	; (80086e0 <USBD_FS_SerialStrDescriptor+0x88>)
 800866e:	bd30      	pop	{r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008670:	f04f 0e00 	mov.w	lr, #0
 8008674:	4a1a      	ldr	r2, [pc, #104]	; (80086e0 <USBD_FS_SerialStrDescriptor+0x88>)
 8008676:	f8d0 17ec 	ldr.w	r1, [r0, #2028]	; 0x7ec
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800867a:	4675      	mov	r5, lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800867c:	4610      	mov	r0, r2
    if (((value >> 28)) < 0xA)
 800867e:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8008682:	ea4f 7c13 	mov.w	ip, r3, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8008686:	f10c 0430 	add.w	r4, ip, #48	; 0x30
  for (idx = 0; idx < len; idx++)
 800868a:	f10e 0e02 	add.w	lr, lr, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800868e:	bf2a      	itet	cs
 8008690:	f10c 0c37 	addcs.w	ip, ip, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008694:	7084      	strbcc	r4, [r0, #2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008696:	f880 c002 	strbcs.w	ip, [r0, #2]
  for (idx = 0; idx < len; idx++)
 800869a:	f1be 0f10 	cmp.w	lr, #16
    pbuf[2 * idx + 1] = 0;
 800869e:	70c5      	strb	r5, [r0, #3]
    value = value << 4;
 80086a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
  for (idx = 0; idx < len; idx++)
 80086a4:	f100 0002 	add.w	r0, r0, #2
 80086a8:	d1e9      	bne.n	800867e <USBD_FS_SerialStrDescriptor+0x26>
 80086aa:	2000      	movs	r0, #0
    pbuf[2 * idx + 1] = 0;
 80086ac:	4604      	mov	r4, r0
    if (((value >> 28)) < 0xA)
 80086ae:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 80086b2:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80086b6:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  for (idx = 0; idx < len; idx++)
 80086ba:	f100 0002 	add.w	r0, r0, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086be:	bf2a      	itet	cs
 80086c0:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80086c2:	f882 c012 	strbcc.w	ip, [r2, #18]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086c6:	7493      	strbcs	r3, [r2, #18]
  for (idx = 0; idx < len; idx++)
 80086c8:	2808      	cmp	r0, #8
    pbuf[2 * idx + 1] = 0;
 80086ca:	74d4      	strb	r4, [r2, #19]
    value = value << 4;
 80086cc:	ea4f 1101 	mov.w	r1, r1, lsl #4
  for (idx = 0; idx < len; idx++)
 80086d0:	f102 0202 	add.w	r2, r2, #2
 80086d4:	d1eb      	bne.n	80086ae <USBD_FS_SerialStrDescriptor+0x56>
}
 80086d6:	4802      	ldr	r0, [pc, #8]	; (80086e0 <USBD_FS_SerialStrDescriptor+0x88>)
 80086d8:	bd30      	pop	{r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	1ffff000 	.word	0x1ffff000
 80086e0:	20000178 	.word	0x20000178

080086e4 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <HAL_PCD_MspInit+0x3c>)
 80086e6:	6802      	ldr	r2, [r0, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d000      	beq.n	80086ee <HAL_PCD_MspInit+0xa>
 80086ec:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80086ee:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80086f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80086f4:	69d9      	ldr	r1, [r3, #28]
{
 80086f6:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80086f8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80086fc:	61d9      	str	r1, [r3, #28]
 80086fe:	69db      	ldr	r3, [r3, #28]
{
 8008700:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8008702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008706:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008708:	2014      	movs	r0, #20
 800870a:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800870c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800870e:	f7f9 fcd3 	bl	80020b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008712:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008714:	b003      	add	sp, #12
 8008716:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800871a:	f7f9 bd0b 	b.w	8002134 <HAL_NVIC_EnableIRQ>
 800871e:	bf00      	nop
 8008720:	40005c00 	.word	0x40005c00

08008724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008724:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008726:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800872a:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800872e:	f7fd bab3 	b.w	8005c98 <USBD_LL_SetupStage>
 8008732:	bf00      	nop

08008734 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008734:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008738:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800873c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008740:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008744:	f7fd bad8 	b.w	8005cf8 <USBD_LL_DataOutStage>

08008748 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008748:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800874c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8008750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008752:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008756:	f7fd bb0d 	b.w	8005d74 <USBD_LL_DataInStage>
 800875a:	bf00      	nop

0800875c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800875c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008760:	f7fd bbae 	b.w	8005ec0 <USBD_LL_SOF>

08008764 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008764:	6883      	ldr	r3, [r0, #8]
{
 8008766:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008768:	2b02      	cmp	r3, #2
{
 800876a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800876c:	d001      	beq.n	8008772 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800876e:	f7f8 ff4f 	bl	8001610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008772:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8008776:	2101      	movs	r1, #1
 8008778:	f7fd fb8a 	bl	8005e90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800877c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8008780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008784:	f7fd bb5c 	b.w	8005e40 <USBD_LL_Reset>

08008788 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b510      	push	{r4, lr}
 800878a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800878c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8008790:	f7fd fb82 	bl	8005e98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008794:	69a3      	ldr	r3, [r4, #24]
 8008796:	b123      	cbz	r3, 80087a2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008798:	4a02      	ldr	r2, [pc, #8]	; (80087a4 <HAL_PCD_SuspendCallback+0x1c>)
 800879a:	6913      	ldr	r3, [r2, #16]
 800879c:	f043 0306 	orr.w	r3, r3, #6
 80087a0:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087a2:	bd10      	pop	{r4, pc}
 80087a4:	e000ed00 	.word	0xe000ed00

080087a8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087a8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80087ac:	f7fd bb7e 	b.w	8005eac <USBD_LL_Resume>

080087b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087b0:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087b2:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 80087b4:	4b1e      	ldr	r3, [pc, #120]	; (8008830 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087b6:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087b8:	605c      	str	r4, [r3, #4]
{
 80087ba:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087bc:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087be:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 80087c4:	4a1b      	ldr	r2, [pc, #108]	; (8008834 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 80087c6:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087ca:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 80087cc:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087d0:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Instance = USB;
 80087d2:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087d4:	f7f9 fec4 	bl	8002560 <HAL_PCD_Init>
 80087d8:	bb30      	cbnz	r0, 8008828 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087da:	2200      	movs	r2, #0
 80087dc:	2318      	movs	r3, #24
 80087de:	4611      	mov	r1, r2
 80087e0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80087e4:	f7fa fe14 	bl	8003410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087e8:	2358      	movs	r3, #88	; 0x58
 80087ea:	2200      	movs	r2, #0
 80087ec:	2180      	movs	r1, #128	; 0x80
 80087ee:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80087f2:	f7fa fe0d 	bl	8003410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087f6:	23c0      	movs	r3, #192	; 0xc0
 80087f8:	2200      	movs	r2, #0
 80087fa:	2181      	movs	r1, #129	; 0x81
 80087fc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008800:	f7fa fe06 	bl	8003410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008804:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008808:	2200      	movs	r2, #0
 800880a:	2101      	movs	r1, #1
 800880c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008810:	f7fa fdfe 	bl	8003410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008818:	2200      	movs	r2, #0
 800881a:	2182      	movs	r1, #130	; 0x82
 800881c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008820:	f7fa fdf6 	bl	8003410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8008824:	2000      	movs	r0, #0
 8008826:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008828:	f7f8 fef2 	bl	8001610 <Error_Handler>
 800882c:	e7d5      	b.n	80087da <USBD_LL_Init+0x2a>
 800882e:	bf00      	nop
 8008830:	20003580 	.word	0x20003580
 8008834:	40005c00 	.word	0x40005c00

08008838 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008838:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800883a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800883e:	f7f9 ff0d 	bl	800265c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008842:	2803      	cmp	r0, #3
 8008844:	bf96      	itet	ls
 8008846:	4b02      	ldrls	r3, [pc, #8]	; (8008850 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8008848:	2002      	movhi	r0, #2
 800884a:	5c18      	ldrbls	r0, [r3, r0]
}
 800884c:	bd08      	pop	{r3, pc}
 800884e:	bf00      	nop
 8008850:	0800a314 	.word	0x0800a314

08008854 <USBD_LL_OpenEP>:
{
 8008854:	4694      	mov	ip, r2
 8008856:	b508      	push	{r3, lr}
 8008858:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800885a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800885e:	4663      	mov	r3, ip
 8008860:	f7fa fca6 	bl	80031b0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8008864:	2803      	cmp	r0, #3
 8008866:	bf96      	itet	ls
 8008868:	4b01      	ldrls	r3, [pc, #4]	; (8008870 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800886a:	2002      	movhi	r0, #2
 800886c:	5c18      	ldrbls	r0, [r3, r0]
}
 800886e:	bd08      	pop	{r3, pc}
 8008870:	0800a314 	.word	0x0800a314

08008874 <USBD_LL_CloseEP>:
{
 8008874:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008876:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800887a:	f7fa fcd7 	bl	800322c <HAL_PCD_EP_Close>
  switch (hal_status)
 800887e:	2803      	cmp	r0, #3
 8008880:	bf96      	itet	ls
 8008882:	4b02      	ldrls	r3, [pc, #8]	; (800888c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008884:	2002      	movhi	r0, #2
 8008886:	5c18      	ldrbls	r0, [r3, r0]
}
 8008888:	bd08      	pop	{r3, pc}
 800888a:	bf00      	nop
 800888c:	0800a314 	.word	0x0800a314

08008890 <USBD_LL_StallEP>:
{
 8008890:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008892:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008896:	f7fa fd41 	bl	800331c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800889a:	2803      	cmp	r0, #3
 800889c:	bf96      	itet	ls
 800889e:	4b02      	ldrls	r3, [pc, #8]	; (80088a8 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a0:	2002      	movhi	r0, #2
 80088a2:	5c18      	ldrbls	r0, [r3, r0]
}
 80088a4:	bd08      	pop	{r3, pc}
 80088a6:	bf00      	nop
 80088a8:	0800a314 	.word	0x0800a314

080088ac <USBD_LL_ClearStallEP>:
{
 80088ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80088b2:	f7fa fd71 	bl	8003398 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80088b6:	2803      	cmp	r0, #3
 80088b8:	bf96      	itet	ls
 80088ba:	4b02      	ldrls	r3, [pc, #8]	; (80088c4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088bc:	2002      	movhi	r0, #2
 80088be:	5c18      	ldrbls	r0, [r3, r0]
}
 80088c0:	bd08      	pop	{r3, pc}
 80088c2:	bf00      	nop
 80088c4:	0800a314 	.word	0x0800a314

080088c8 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80088c8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088ca:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80088ce:	d406      	bmi.n	80088de <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80088d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088d8:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80088dc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80088e2:	3101      	adds	r1, #1
 80088e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80088e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088ec:	7888      	ldrb	r0, [r1, #2]
 80088ee:	4770      	bx	lr

080088f0 <USBD_LL_SetUSBAddress>:
{
 80088f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80088f6:	f7fa fc45 	bl	8003184 <HAL_PCD_SetAddress>
  switch (hal_status)
 80088fa:	2803      	cmp	r0, #3
 80088fc:	bf96      	itet	ls
 80088fe:	4b02      	ldrls	r3, [pc, #8]	; (8008908 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008900:	2002      	movhi	r0, #2
 8008902:	5c18      	ldrbls	r0, [r3, r0]
}
 8008904:	bd08      	pop	{r3, pc}
 8008906:	bf00      	nop
 8008908:	0800a314 	.word	0x0800a314

0800890c <USBD_LL_Transmit>:
{
 800890c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800890e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008912:	f7fa fcdf 	bl	80032d4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8008916:	2803      	cmp	r0, #3
 8008918:	bf96      	itet	ls
 800891a:	4b02      	ldrls	r3, [pc, #8]	; (8008924 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800891c:	2002      	movhi	r0, #2
 800891e:	5c18      	ldrbls	r0, [r3, r0]
}
 8008920:	bd08      	pop	{r3, pc}
 8008922:	bf00      	nop
 8008924:	0800a314 	.word	0x0800a314

08008928 <USBD_LL_PrepareReceive>:
{
 8008928:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800892a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800892e:	f7fa fcaf 	bl	8003290 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8008932:	2803      	cmp	r0, #3
 8008934:	bf96      	itet	ls
 8008936:	4b02      	ldrls	r3, [pc, #8]	; (8008940 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008938:	2002      	movhi	r0, #2
 800893a:	5c18      	ldrbls	r0, [r3, r0]
}
 800893c:	bd08      	pop	{r3, pc}
 800893e:	bf00      	nop
 8008940:	0800a314 	.word	0x0800a314

08008944 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008944:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008948:	f7fa bcba 	b.w	80032c0 <HAL_PCD_EP_GetRxCount>

0800894c <USBD_static_malloc>:
}
 800894c:	4800      	ldr	r0, [pc, #0]	; (8008950 <USBD_static_malloc+0x4>)
 800894e:	4770      	bx	lr
 8008950:	2000386c 	.word	0x2000386c

08008954 <USBD_static_free>:
}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <HAL_PCDEx_SetConnectionState>:
}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	; (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000194 	.word	0x20000194

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	2600      	movs	r6, #0
 800896c:	4d0c      	ldr	r5, [pc, #48]	; (80089a0 <__libc_init_array+0x38>)
 800896e:	4c0d      	ldr	r4, [pc, #52]	; (80089a4 <__libc_init_array+0x3c>)
 8008970:	1b64      	subs	r4, r4, r5
 8008972:	10a4      	asrs	r4, r4, #2
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	f001 f950 	bl	8009c1c <_init>
 800897c:	2600      	movs	r6, #0
 800897e:	4d0a      	ldr	r5, [pc, #40]	; (80089a8 <__libc_init_array+0x40>)
 8008980:	4c0a      	ldr	r4, [pc, #40]	; (80089ac <__libc_init_array+0x44>)
 8008982:	1b64      	subs	r4, r4, r5
 8008984:	10a4      	asrs	r4, r4, #2
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	f855 3b04 	ldr.w	r3, [r5], #4
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	0800a4c8 	.word	0x0800a4c8
 80089a4:	0800a4c8 	.word	0x0800a4c8
 80089a8:	0800a4c8 	.word	0x0800a4c8
 80089ac:	0800a4cc 	.word	0x0800a4cc

080089b0 <memset>:
 80089b0:	4603      	mov	r3, r0
 80089b2:	4402      	add	r2, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <siprintf>:
 80089c0:	b40e      	push	{r1, r2, r3}
 80089c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c6:	b500      	push	{lr}
 80089c8:	b09c      	sub	sp, #112	; 0x70
 80089ca:	ab1d      	add	r3, sp, #116	; 0x74
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	9006      	str	r0, [sp, #24]
 80089d0:	9107      	str	r1, [sp, #28]
 80089d2:	9104      	str	r1, [sp, #16]
 80089d4:	4808      	ldr	r0, [pc, #32]	; (80089f8 <siprintf+0x38>)
 80089d6:	4909      	ldr	r1, [pc, #36]	; (80089fc <siprintf+0x3c>)
 80089d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089dc:	9105      	str	r1, [sp, #20]
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	a902      	add	r1, sp, #8
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	f000 f894 	bl	8008b10 <_svfiprintf_r>
 80089e8:	2200      	movs	r2, #0
 80089ea:	9b02      	ldr	r3, [sp, #8]
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	b01c      	add	sp, #112	; 0x70
 80089f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f4:	b003      	add	sp, #12
 80089f6:	4770      	bx	lr
 80089f8:	20000194 	.word	0x20000194
 80089fc:	ffff0208 	.word	0xffff0208

08008a00 <siscanf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008a06:	b530      	push	{r4, r5, lr}
 8008a08:	b09c      	sub	sp, #112	; 0x70
 8008a0a:	ac1f      	add	r4, sp, #124	; 0x7c
 8008a0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008a10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008a14:	9002      	str	r0, [sp, #8]
 8008a16:	9006      	str	r0, [sp, #24]
 8008a18:	f7f7 fba2 	bl	8000160 <strlen>
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <siscanf+0x4c>)
 8008a1e:	9003      	str	r0, [sp, #12]
 8008a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a22:	2300      	movs	r3, #0
 8008a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a26:	9314      	str	r3, [sp, #80]	; 0x50
 8008a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a2c:	9007      	str	r0, [sp, #28]
 8008a2e:	4808      	ldr	r0, [pc, #32]	; (8008a50 <siscanf+0x50>)
 8008a30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a34:	462a      	mov	r2, r5
 8008a36:	4623      	mov	r3, r4
 8008a38:	a902      	add	r1, sp, #8
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	9401      	str	r4, [sp, #4]
 8008a3e:	f000 f9c1 	bl	8008dc4 <__ssvfiscanf_r>
 8008a42:	b01c      	add	sp, #112	; 0x70
 8008a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a48:	b003      	add	sp, #12
 8008a4a:	4770      	bx	lr
 8008a4c:	08008a55 	.word	0x08008a55
 8008a50:	20000194 	.word	0x20000194

08008a54 <__seofread>:
 8008a54:	2000      	movs	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__ssputs_r>:
 8008a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	688e      	ldr	r6, [r1, #8]
 8008a5e:	4682      	mov	sl, r0
 8008a60:	429e      	cmp	r6, r3
 8008a62:	460c      	mov	r4, r1
 8008a64:	4690      	mov	r8, r2
 8008a66:	461f      	mov	r7, r3
 8008a68:	d838      	bhi.n	8008adc <__ssputs_r+0x84>
 8008a6a:	898a      	ldrh	r2, [r1, #12]
 8008a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a70:	d032      	beq.n	8008ad8 <__ssputs_r+0x80>
 8008a72:	6825      	ldr	r5, [r4, #0]
 8008a74:	6909      	ldr	r1, [r1, #16]
 8008a76:	3301      	adds	r3, #1
 8008a78:	eba5 0901 	sub.w	r9, r5, r1
 8008a7c:	6965      	ldr	r5, [r4, #20]
 8008a7e:	444b      	add	r3, r9
 8008a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a88:	106d      	asrs	r5, r5, #1
 8008a8a:	429d      	cmp	r5, r3
 8008a8c:	bf38      	it	cc
 8008a8e:	461d      	movcc	r5, r3
 8008a90:	0553      	lsls	r3, r2, #21
 8008a92:	d531      	bpl.n	8008af8 <__ssputs_r+0xa0>
 8008a94:	4629      	mov	r1, r5
 8008a96:	f000 fff9 	bl	8009a8c <_malloc_r>
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	b950      	cbnz	r0, 8008ab4 <__ssputs_r+0x5c>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	f8ca 3000 	str.w	r3, [sl]
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab4:	464a      	mov	r2, r9
 8008ab6:	6921      	ldr	r1, [r4, #16]
 8008ab8:	f000 ff58 	bl	800996c <memcpy>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	6126      	str	r6, [r4, #16]
 8008aca:	444e      	add	r6, r9
 8008acc:	6026      	str	r6, [r4, #0]
 8008ace:	463e      	mov	r6, r7
 8008ad0:	6165      	str	r5, [r4, #20]
 8008ad2:	eba5 0509 	sub.w	r5, r5, r9
 8008ad6:	60a5      	str	r5, [r4, #8]
 8008ad8:	42be      	cmp	r6, r7
 8008ada:	d900      	bls.n	8008ade <__ssputs_r+0x86>
 8008adc:	463e      	mov	r6, r7
 8008ade:	4632      	mov	r2, r6
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	f000 ff50 	bl	8009988 <memmove>
 8008ae8:	68a3      	ldr	r3, [r4, #8]
 8008aea:	2000      	movs	r0, #0
 8008aec:	1b9b      	subs	r3, r3, r6
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	4433      	add	r3, r6
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	e7db      	b.n	8008ab0 <__ssputs_r+0x58>
 8008af8:	462a      	mov	r2, r5
 8008afa:	f001 f83b 	bl	8009b74 <_realloc_r>
 8008afe:	4606      	mov	r6, r0
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d1e1      	bne.n	8008ac8 <__ssputs_r+0x70>
 8008b04:	4650      	mov	r0, sl
 8008b06:	6921      	ldr	r1, [r4, #16]
 8008b08:	f000 ff58 	bl	80099bc <_free_r>
 8008b0c:	e7c7      	b.n	8008a9e <__ssputs_r+0x46>
	...

08008b10 <_svfiprintf_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	4698      	mov	r8, r3
 8008b16:	898b      	ldrh	r3, [r1, #12]
 8008b18:	4607      	mov	r7, r0
 8008b1a:	061b      	lsls	r3, r3, #24
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	b09d      	sub	sp, #116	; 0x74
 8008b22:	d50e      	bpl.n	8008b42 <_svfiprintf_r+0x32>
 8008b24:	690b      	ldr	r3, [r1, #16]
 8008b26:	b963      	cbnz	r3, 8008b42 <_svfiprintf_r+0x32>
 8008b28:	2140      	movs	r1, #64	; 0x40
 8008b2a:	f000 ffaf 	bl	8009a8c <_malloc_r>
 8008b2e:	6028      	str	r0, [r5, #0]
 8008b30:	6128      	str	r0, [r5, #16]
 8008b32:	b920      	cbnz	r0, 8008b3e <_svfiprintf_r+0x2e>
 8008b34:	230c      	movs	r3, #12
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	e0d1      	b.n	8008ce2 <_svfiprintf_r+0x1d2>
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	616b      	str	r3, [r5, #20]
 8008b42:	2300      	movs	r3, #0
 8008b44:	9309      	str	r3, [sp, #36]	; 0x24
 8008b46:	2320      	movs	r3, #32
 8008b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b4c:	2330      	movs	r3, #48	; 0x30
 8008b4e:	f04f 0901 	mov.w	r9, #1
 8008b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008cfc <_svfiprintf_r+0x1ec>
 8008b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b5e:	4623      	mov	r3, r4
 8008b60:	469a      	mov	sl, r3
 8008b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b66:	b10a      	cbz	r2, 8008b6c <_svfiprintf_r+0x5c>
 8008b68:	2a25      	cmp	r2, #37	; 0x25
 8008b6a:	d1f9      	bne.n	8008b60 <_svfiprintf_r+0x50>
 8008b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b70:	d00b      	beq.n	8008b8a <_svfiprintf_r+0x7a>
 8008b72:	465b      	mov	r3, fp
 8008b74:	4622      	mov	r2, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7ff ff6d 	bl	8008a58 <__ssputs_r>
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f000 80aa 	beq.w	8008cd8 <_svfiprintf_r+0x1c8>
 8008b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b86:	445a      	add	r2, fp
 8008b88:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80a2 	beq.w	8008cd8 <_svfiprintf_r+0x1c8>
 8008b94:	2300      	movs	r3, #0
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b9e:	f10a 0a01 	add.w	sl, sl, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	9307      	str	r3, [sp, #28]
 8008ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008baa:	931a      	str	r3, [sp, #104]	; 0x68
 8008bac:	4654      	mov	r4, sl
 8008bae:	2205      	movs	r2, #5
 8008bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb4:	4851      	ldr	r0, [pc, #324]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008bb6:	f000 fecb 	bl	8009950 <memchr>
 8008bba:	9a04      	ldr	r2, [sp, #16]
 8008bbc:	b9d8      	cbnz	r0, 8008bf6 <_svfiprintf_r+0xe6>
 8008bbe:	06d0      	lsls	r0, r2, #27
 8008bc0:	bf44      	itt	mi
 8008bc2:	2320      	movmi	r3, #32
 8008bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc8:	0711      	lsls	r1, r2, #28
 8008bca:	bf44      	itt	mi
 8008bcc:	232b      	movmi	r3, #43	; 0x2b
 8008bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd8:	d015      	beq.n	8008c06 <_svfiprintf_r+0xf6>
 8008bda:	4654      	mov	r4, sl
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f04f 0c0a 	mov.w	ip, #10
 8008be2:	9a07      	ldr	r2, [sp, #28]
 8008be4:	4621      	mov	r1, r4
 8008be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bea:	3b30      	subs	r3, #48	; 0x30
 8008bec:	2b09      	cmp	r3, #9
 8008bee:	d94e      	bls.n	8008c8e <_svfiprintf_r+0x17e>
 8008bf0:	b1b0      	cbz	r0, 8008c20 <_svfiprintf_r+0x110>
 8008bf2:	9207      	str	r2, [sp, #28]
 8008bf4:	e014      	b.n	8008c20 <_svfiprintf_r+0x110>
 8008bf6:	eba0 0308 	sub.w	r3, r0, r8
 8008bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	46a2      	mov	sl, r4
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	e7d2      	b.n	8008bac <_svfiprintf_r+0x9c>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	9103      	str	r1, [sp, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfbb      	ittet	lt
 8008c12:	425b      	neglt	r3, r3
 8008c14:	f042 0202 	orrlt.w	r2, r2, #2
 8008c18:	9307      	strge	r3, [sp, #28]
 8008c1a:	9307      	strlt	r3, [sp, #28]
 8008c1c:	bfb8      	it	lt
 8008c1e:	9204      	strlt	r2, [sp, #16]
 8008c20:	7823      	ldrb	r3, [r4, #0]
 8008c22:	2b2e      	cmp	r3, #46	; 0x2e
 8008c24:	d10c      	bne.n	8008c40 <_svfiprintf_r+0x130>
 8008c26:	7863      	ldrb	r3, [r4, #1]
 8008c28:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2a:	d135      	bne.n	8008c98 <_svfiprintf_r+0x188>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	3402      	adds	r4, #2
 8008c30:	1d1a      	adds	r2, r3, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	9203      	str	r2, [sp, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfb8      	it	lt
 8008c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c3e:	9305      	str	r3, [sp, #20]
 8008c40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008d00 <_svfiprintf_r+0x1f0>
 8008c44:	2203      	movs	r2, #3
 8008c46:	4650      	mov	r0, sl
 8008c48:	7821      	ldrb	r1, [r4, #0]
 8008c4a:	f000 fe81 	bl	8009950 <memchr>
 8008c4e:	b140      	cbz	r0, 8008c62 <_svfiprintf_r+0x152>
 8008c50:	2340      	movs	r3, #64	; 0x40
 8008c52:	eba0 000a 	sub.w	r0, r0, sl
 8008c56:	fa03 f000 	lsl.w	r0, r3, r0
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	3401      	adds	r4, #1
 8008c5e:	4303      	orrs	r3, r0
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	2206      	movs	r2, #6
 8008c68:	4826      	ldr	r0, [pc, #152]	; (8008d04 <_svfiprintf_r+0x1f4>)
 8008c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c6e:	f000 fe6f 	bl	8009950 <memchr>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d038      	beq.n	8008ce8 <_svfiprintf_r+0x1d8>
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <_svfiprintf_r+0x1f8>)
 8008c78:	bb1b      	cbnz	r3, 8008cc2 <_svfiprintf_r+0x1b2>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	f023 0307 	bic.w	r3, r3, #7
 8008c82:	3308      	adds	r3, #8
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c88:	4433      	add	r3, r6
 8008c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8c:	e767      	b.n	8008b5e <_svfiprintf_r+0x4e>
 8008c8e:	460c      	mov	r4, r1
 8008c90:	2001      	movs	r0, #1
 8008c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c96:	e7a5      	b.n	8008be4 <_svfiprintf_r+0xd4>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f04f 0c0a 	mov.w	ip, #10
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	3401      	adds	r4, #1
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008caa:	3a30      	subs	r2, #48	; 0x30
 8008cac:	2a09      	cmp	r2, #9
 8008cae:	d903      	bls.n	8008cb8 <_svfiprintf_r+0x1a8>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0c5      	beq.n	8008c40 <_svfiprintf_r+0x130>
 8008cb4:	9105      	str	r1, [sp, #20]
 8008cb6:	e7c3      	b.n	8008c40 <_svfiprintf_r+0x130>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	2301      	movs	r3, #1
 8008cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc0:	e7f0      	b.n	8008ca4 <_svfiprintf_r+0x194>
 8008cc2:	ab03      	add	r3, sp, #12
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	4638      	mov	r0, r7
 8008cca:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <_svfiprintf_r+0x1fc>)
 8008ccc:	a904      	add	r1, sp, #16
 8008cce:	f3af 8000 	nop.w
 8008cd2:	1c42      	adds	r2, r0, #1
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	d1d6      	bne.n	8008c86 <_svfiprintf_r+0x176>
 8008cd8:	89ab      	ldrh	r3, [r5, #12]
 8008cda:	065b      	lsls	r3, r3, #25
 8008cdc:	f53f af2c 	bmi.w	8008b38 <_svfiprintf_r+0x28>
 8008ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce2:	b01d      	add	sp, #116	; 0x74
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	462a      	mov	r2, r5
 8008cee:	4638      	mov	r0, r7
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <_svfiprintf_r+0x1fc>)
 8008cf2:	a904      	add	r1, sp, #16
 8008cf4:	f000 fa50 	bl	8009198 <_printf_i>
 8008cf8:	e7eb      	b.n	8008cd2 <_svfiprintf_r+0x1c2>
 8008cfa:	bf00      	nop
 8008cfc:	0800a318 	.word	0x0800a318
 8008d00:	0800a31e 	.word	0x0800a31e
 8008d04:	0800a322 	.word	0x0800a322
 8008d08:	00000000 	.word	0x00000000
 8008d0c:	08008a59 	.word	0x08008a59

08008d10 <_sungetc_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	1c4b      	adds	r3, r1, #1
 8008d14:	4614      	mov	r4, r2
 8008d16:	d103      	bne.n	8008d20 <_sungetc_r+0x10>
 8008d18:	f04f 35ff 	mov.w	r5, #4294967295
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	8993      	ldrh	r3, [r2, #12]
 8008d22:	b2cd      	uxtb	r5, r1
 8008d24:	f023 0320 	bic.w	r3, r3, #32
 8008d28:	8193      	strh	r3, [r2, #12]
 8008d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d2c:	6852      	ldr	r2, [r2, #4]
 8008d2e:	b18b      	cbz	r3, 8008d54 <_sungetc_r+0x44>
 8008d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d32:	4293      	cmp	r3, r2
 8008d34:	dd08      	ble.n	8008d48 <_sungetc_r+0x38>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	1e5a      	subs	r2, r3, #1
 8008d3a:	6022      	str	r2, [r4, #0]
 8008d3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	3301      	adds	r3, #1
 8008d44:	6063      	str	r3, [r4, #4]
 8008d46:	e7e9      	b.n	8008d1c <_sungetc_r+0xc>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f000 fdc7 	bl	80098dc <__submore>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0f1      	beq.n	8008d36 <_sungetc_r+0x26>
 8008d52:	e7e1      	b.n	8008d18 <_sungetc_r+0x8>
 8008d54:	6921      	ldr	r1, [r4, #16]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	b151      	cbz	r1, 8008d70 <_sungetc_r+0x60>
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	d208      	bcs.n	8008d70 <_sungetc_r+0x60>
 8008d5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008d62:	42a9      	cmp	r1, r5
 8008d64:	d104      	bne.n	8008d70 <_sungetc_r+0x60>
 8008d66:	3b01      	subs	r3, #1
 8008d68:	3201      	adds	r2, #1
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	6062      	str	r2, [r4, #4]
 8008d6e:	e7d5      	b.n	8008d1c <_sungetc_r+0xc>
 8008d70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d78:	6363      	str	r3, [r4, #52]	; 0x34
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d7e:	4623      	mov	r3, r4
 8008d80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7dc      	b.n	8008d44 <_sungetc_r+0x34>

08008d8a <__ssrefill_r>:
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d90:	b169      	cbz	r1, 8008dae <__ssrefill_r+0x24>
 8008d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d001      	beq.n	8008d9e <__ssrefill_r+0x14>
 8008d9a:	f000 fe0f 	bl	80099bc <_free_r>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008da2:	6360      	str	r0, [r4, #52]	; 0x34
 8008da4:	6063      	str	r3, [r4, #4]
 8008da6:	b113      	cbz	r3, 8008dae <__ssrefill_r+0x24>
 8008da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f043 0320 	orr.w	r3, r3, #32
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	e7f3      	b.n	8008dac <__ssrefill_r+0x22>

08008dc4 <__ssvfiscanf_r>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008dd2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008dd6:	49a7      	ldr	r1, [pc, #668]	; (8009074 <__ssvfiscanf_r+0x2b0>)
 8008dd8:	f10d 0804 	add.w	r8, sp, #4
 8008ddc:	91a0      	str	r1, [sp, #640]	; 0x280
 8008dde:	49a6      	ldr	r1, [pc, #664]	; (8009078 <__ssvfiscanf_r+0x2b4>)
 8008de0:	4fa6      	ldr	r7, [pc, #664]	; (800907c <__ssvfiscanf_r+0x2b8>)
 8008de2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009080 <__ssvfiscanf_r+0x2bc>
 8008de6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008dea:	91a1      	str	r1, [sp, #644]	; 0x284
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	7813      	ldrb	r3, [r2, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 815c 	beq.w	80090ae <__ssvfiscanf_r+0x2ea>
 8008df6:	5dd9      	ldrb	r1, [r3, r7]
 8008df8:	1c55      	adds	r5, r2, #1
 8008dfa:	f011 0108 	ands.w	r1, r1, #8
 8008dfe:	d019      	beq.n	8008e34 <__ssvfiscanf_r+0x70>
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd0f      	ble.n	8008e26 <__ssvfiscanf_r+0x62>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	5cba      	ldrb	r2, [r7, r2]
 8008e0c:	0712      	lsls	r2, r2, #28
 8008e0e:	d401      	bmi.n	8008e14 <__ssvfiscanf_r+0x50>
 8008e10:	462a      	mov	r2, r5
 8008e12:	e7ec      	b.n	8008dee <__ssvfiscanf_r+0x2a>
 8008e14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008e16:	3301      	adds	r3, #1
 8008e18:	3201      	adds	r2, #1
 8008e1a:	9245      	str	r2, [sp, #276]	; 0x114
 8008e1c:	6862      	ldr	r2, [r4, #4]
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	3a01      	subs	r2, #1
 8008e22:	6062      	str	r2, [r4, #4]
 8008e24:	e7ec      	b.n	8008e00 <__ssvfiscanf_r+0x3c>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4630      	mov	r0, r6
 8008e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e2c:	4798      	blx	r3
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0e9      	beq.n	8008e06 <__ssvfiscanf_r+0x42>
 8008e32:	e7ed      	b.n	8008e10 <__ssvfiscanf_r+0x4c>
 8008e34:	2b25      	cmp	r3, #37	; 0x25
 8008e36:	d012      	beq.n	8008e5e <__ssvfiscanf_r+0x9a>
 8008e38:	469a      	mov	sl, r3
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f340 8094 	ble.w	8008f6a <__ssvfiscanf_r+0x1a6>
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	7813      	ldrb	r3, [r2, #0]
 8008e46:	4553      	cmp	r3, sl
 8008e48:	f040 8131 	bne.w	80090ae <__ssvfiscanf_r+0x2ea>
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	3201      	adds	r2, #1
 8008e50:	3b01      	subs	r3, #1
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008e56:	6022      	str	r2, [r4, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9345      	str	r3, [sp, #276]	; 0x114
 8008e5c:	e7d8      	b.n	8008e10 <__ssvfiscanf_r+0x4c>
 8008e5e:	9141      	str	r1, [sp, #260]	; 0x104
 8008e60:	9143      	str	r1, [sp, #268]	; 0x10c
 8008e62:	7853      	ldrb	r3, [r2, #1]
 8008e64:	2b2a      	cmp	r3, #42	; 0x2a
 8008e66:	bf04      	itt	eq
 8008e68:	2310      	moveq	r3, #16
 8008e6a:	1c95      	addeq	r5, r2, #2
 8008e6c:	f04f 020a 	mov.w	r2, #10
 8008e70:	bf08      	it	eq
 8008e72:	9341      	streq	r3, [sp, #260]	; 0x104
 8008e74:	46aa      	mov	sl, r5
 8008e76:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008e7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d91d      	bls.n	8008ebe <__ssvfiscanf_r+0xfa>
 8008e82:	2203      	movs	r2, #3
 8008e84:	487e      	ldr	r0, [pc, #504]	; (8009080 <__ssvfiscanf_r+0x2bc>)
 8008e86:	f000 fd63 	bl	8009950 <memchr>
 8008e8a:	b140      	cbz	r0, 8008e9e <__ssvfiscanf_r+0xda>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4655      	mov	r5, sl
 8008e90:	eba0 0009 	sub.w	r0, r0, r9
 8008e94:	fa03 f000 	lsl.w	r0, r3, r0
 8008e98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e9a:	4318      	orrs	r0, r3
 8008e9c:	9041      	str	r0, [sp, #260]	; 0x104
 8008e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ea2:	2b78      	cmp	r3, #120	; 0x78
 8008ea4:	d806      	bhi.n	8008eb4 <__ssvfiscanf_r+0xf0>
 8008ea6:	2b57      	cmp	r3, #87	; 0x57
 8008ea8:	d810      	bhi.n	8008ecc <__ssvfiscanf_r+0x108>
 8008eaa:	2b25      	cmp	r3, #37	; 0x25
 8008eac:	d0c4      	beq.n	8008e38 <__ssvfiscanf_r+0x74>
 8008eae:	d857      	bhi.n	8008f60 <__ssvfiscanf_r+0x19c>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d065      	beq.n	8008f80 <__ssvfiscanf_r+0x1bc>
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8008eb8:	230a      	movs	r3, #10
 8008eba:	9342      	str	r3, [sp, #264]	; 0x108
 8008ebc:	e072      	b.n	8008fa4 <__ssvfiscanf_r+0x1e0>
 8008ebe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008ec0:	4655      	mov	r5, sl
 8008ec2:	fb02 1103 	mla	r1, r2, r3, r1
 8008ec6:	3930      	subs	r1, #48	; 0x30
 8008ec8:	9143      	str	r1, [sp, #268]	; 0x10c
 8008eca:	e7d3      	b.n	8008e74 <__ssvfiscanf_r+0xb0>
 8008ecc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008ed0:	2a20      	cmp	r2, #32
 8008ed2:	d8ef      	bhi.n	8008eb4 <__ssvfiscanf_r+0xf0>
 8008ed4:	a101      	add	r1, pc, #4	; (adr r1, 8008edc <__ssvfiscanf_r+0x118>)
 8008ed6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008f8f 	.word	0x08008f8f
 8008ee0:	08008eb5 	.word	0x08008eb5
 8008ee4:	08008eb5 	.word	0x08008eb5
 8008ee8:	08008fed 	.word	0x08008fed
 8008eec:	08008eb5 	.word	0x08008eb5
 8008ef0:	08008eb5 	.word	0x08008eb5
 8008ef4:	08008eb5 	.word	0x08008eb5
 8008ef8:	08008eb5 	.word	0x08008eb5
 8008efc:	08008eb5 	.word	0x08008eb5
 8008f00:	08008eb5 	.word	0x08008eb5
 8008f04:	08008eb5 	.word	0x08008eb5
 8008f08:	08009003 	.word	0x08009003
 8008f0c:	08008fd9 	.word	0x08008fd9
 8008f10:	08008f67 	.word	0x08008f67
 8008f14:	08008f67 	.word	0x08008f67
 8008f18:	08008f67 	.word	0x08008f67
 8008f1c:	08008eb5 	.word	0x08008eb5
 8008f20:	08008fdd 	.word	0x08008fdd
 8008f24:	08008eb5 	.word	0x08008eb5
 8008f28:	08008eb5 	.word	0x08008eb5
 8008f2c:	08008eb5 	.word	0x08008eb5
 8008f30:	08008eb5 	.word	0x08008eb5
 8008f34:	08009013 	.word	0x08009013
 8008f38:	08008fe5 	.word	0x08008fe5
 8008f3c:	08008f87 	.word	0x08008f87
 8008f40:	08008eb5 	.word	0x08008eb5
 8008f44:	08008eb5 	.word	0x08008eb5
 8008f48:	0800900f 	.word	0x0800900f
 8008f4c:	08008eb5 	.word	0x08008eb5
 8008f50:	08008fd9 	.word	0x08008fd9
 8008f54:	08008eb5 	.word	0x08008eb5
 8008f58:	08008eb5 	.word	0x08008eb5
 8008f5c:	08008f8f 	.word	0x08008f8f
 8008f60:	3b45      	subs	r3, #69	; 0x45
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d8a6      	bhi.n	8008eb4 <__ssvfiscanf_r+0xf0>
 8008f66:	2305      	movs	r3, #5
 8008f68:	e01b      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f70:	4798      	blx	r3
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f43f af65 	beq.w	8008e42 <__ssvfiscanf_r+0x7e>
 8008f78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 808d 	bne.w	800909a <__ssvfiscanf_r+0x2d6>
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295
 8008f84:	e08f      	b.n	80090a6 <__ssvfiscanf_r+0x2e2>
 8008f86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f88:	f042 0220 	orr.w	r2, r2, #32
 8008f8c:	9241      	str	r2, [sp, #260]	; 0x104
 8008f8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f94:	9241      	str	r2, [sp, #260]	; 0x104
 8008f96:	2210      	movs	r2, #16
 8008f98:	2b6f      	cmp	r3, #111	; 0x6f
 8008f9a:	bf34      	ite	cc
 8008f9c:	2303      	movcc	r3, #3
 8008f9e:	2304      	movcs	r3, #4
 8008fa0:	9242      	str	r2, [sp, #264]	; 0x108
 8008fa2:	9347      	str	r3, [sp, #284]	; 0x11c
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd42      	ble.n	8009030 <__ssvfiscanf_r+0x26c>
 8008faa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008fac:	0659      	lsls	r1, r3, #25
 8008fae:	d404      	bmi.n	8008fba <__ssvfiscanf_r+0x1f6>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	5cba      	ldrb	r2, [r7, r2]
 8008fb6:	0712      	lsls	r2, r2, #28
 8008fb8:	d441      	bmi.n	800903e <__ssvfiscanf_r+0x27a>
 8008fba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	dc50      	bgt.n	8009062 <__ssvfiscanf_r+0x29e>
 8008fc0:	466b      	mov	r3, sp
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	a941      	add	r1, sp, #260	; 0x104
 8008fc8:	f000 fa0c 	bl	80093e4 <_scanf_chars>
 8008fcc:	2801      	cmp	r0, #1
 8008fce:	d06e      	beq.n	80090ae <__ssvfiscanf_r+0x2ea>
 8008fd0:	2802      	cmp	r0, #2
 8008fd2:	f47f af1d 	bne.w	8008e10 <__ssvfiscanf_r+0x4c>
 8008fd6:	e7cf      	b.n	8008f78 <__ssvfiscanf_r+0x1b4>
 8008fd8:	220a      	movs	r2, #10
 8008fda:	e7dd      	b.n	8008f98 <__ssvfiscanf_r+0x1d4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9342      	str	r3, [sp, #264]	; 0x108
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e7de      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	9342      	str	r3, [sp, #264]	; 0x108
 8008fe8:	2304      	movs	r3, #4
 8008fea:	e7da      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f000 fb4a 	bl	8009688 <__sccl>
 8008ff4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	9341      	str	r3, [sp, #260]	; 0x104
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7cf      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 8009002:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009008:	9341      	str	r3, [sp, #260]	; 0x104
 800900a:	2300      	movs	r3, #0
 800900c:	e7c9      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 800900e:	2302      	movs	r3, #2
 8009010:	e7c7      	b.n	8008fa2 <__ssvfiscanf_r+0x1de>
 8009012:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009014:	06c3      	lsls	r3, r0, #27
 8009016:	f53f aefb 	bmi.w	8008e10 <__ssvfiscanf_r+0x4c>
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800901e:	1d19      	adds	r1, r3, #4
 8009020:	9100      	str	r1, [sp, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f010 0f01 	tst.w	r0, #1
 8009028:	bf14      	ite	ne
 800902a:	801a      	strhne	r2, [r3, #0]
 800902c:	601a      	streq	r2, [r3, #0]
 800902e:	e6ef      	b.n	8008e10 <__ssvfiscanf_r+0x4c>
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009036:	4798      	blx	r3
 8009038:	2800      	cmp	r0, #0
 800903a:	d0b6      	beq.n	8008faa <__ssvfiscanf_r+0x1e6>
 800903c:	e79c      	b.n	8008f78 <__ssvfiscanf_r+0x1b4>
 800903e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009040:	3201      	adds	r2, #1
 8009042:	9245      	str	r2, [sp, #276]	; 0x114
 8009044:	6862      	ldr	r2, [r4, #4]
 8009046:	3a01      	subs	r2, #1
 8009048:	2a00      	cmp	r2, #0
 800904a:	6062      	str	r2, [r4, #4]
 800904c:	dd02      	ble.n	8009054 <__ssvfiscanf_r+0x290>
 800904e:	3301      	adds	r3, #1
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	e7ad      	b.n	8008fb0 <__ssvfiscanf_r+0x1ec>
 8009054:	4621      	mov	r1, r4
 8009056:	4630      	mov	r0, r6
 8009058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800905a:	4798      	blx	r3
 800905c:	2800      	cmp	r0, #0
 800905e:	d0a7      	beq.n	8008fb0 <__ssvfiscanf_r+0x1ec>
 8009060:	e78a      	b.n	8008f78 <__ssvfiscanf_r+0x1b4>
 8009062:	2b04      	cmp	r3, #4
 8009064:	dc0e      	bgt.n	8009084 <__ssvfiscanf_r+0x2c0>
 8009066:	466b      	mov	r3, sp
 8009068:	4622      	mov	r2, r4
 800906a:	4630      	mov	r0, r6
 800906c:	a941      	add	r1, sp, #260	; 0x104
 800906e:	f000 fa13 	bl	8009498 <_scanf_i>
 8009072:	e7ab      	b.n	8008fcc <__ssvfiscanf_r+0x208>
 8009074:	08008d11 	.word	0x08008d11
 8009078:	08008d8b 	.word	0x08008d8b
 800907c:	0800a367 	.word	0x0800a367
 8009080:	0800a31e 	.word	0x0800a31e
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <__ssvfiscanf_r+0x2f0>)
 8009086:	2b00      	cmp	r3, #0
 8009088:	f43f aec2 	beq.w	8008e10 <__ssvfiscanf_r+0x4c>
 800908c:	466b      	mov	r3, sp
 800908e:	4622      	mov	r2, r4
 8009090:	4630      	mov	r0, r6
 8009092:	a941      	add	r1, sp, #260	; 0x104
 8009094:	f3af 8000 	nop.w
 8009098:	e798      	b.n	8008fcc <__ssvfiscanf_r+0x208>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80090a0:	bf18      	it	ne
 80090a2:	f04f 30ff 	movne.w	r0, #4294967295
 80090a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80090aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 80090b0:	e7f9      	b.n	80090a6 <__ssvfiscanf_r+0x2e2>
 80090b2:	bf00      	nop
 80090b4:	00000000 	.word	0x00000000

080090b8 <_printf_common>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	4616      	mov	r6, r2
 80090be:	4699      	mov	r9, r3
 80090c0:	688a      	ldr	r2, [r1, #8]
 80090c2:	690b      	ldr	r3, [r1, #16]
 80090c4:	4607      	mov	r7, r0
 80090c6:	4293      	cmp	r3, r2
 80090c8:	bfb8      	it	lt
 80090ca:	4613      	movlt	r3, r2
 80090cc:	6033      	str	r3, [r6, #0]
 80090ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d2:	460c      	mov	r4, r1
 80090d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090d8:	b10a      	cbz	r2, 80090de <_printf_common+0x26>
 80090da:	3301      	adds	r3, #1
 80090dc:	6033      	str	r3, [r6, #0]
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	0699      	lsls	r1, r3, #26
 80090e2:	bf42      	ittt	mi
 80090e4:	6833      	ldrmi	r3, [r6, #0]
 80090e6:	3302      	addmi	r3, #2
 80090e8:	6033      	strmi	r3, [r6, #0]
 80090ea:	6825      	ldr	r5, [r4, #0]
 80090ec:	f015 0506 	ands.w	r5, r5, #6
 80090f0:	d106      	bne.n	8009100 <_printf_common+0x48>
 80090f2:	f104 0a19 	add.w	sl, r4, #25
 80090f6:	68e3      	ldr	r3, [r4, #12]
 80090f8:	6832      	ldr	r2, [r6, #0]
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dc28      	bgt.n	8009152 <_printf_common+0x9a>
 8009100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009104:	1e13      	subs	r3, r2, #0
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	bf18      	it	ne
 800910a:	2301      	movne	r3, #1
 800910c:	0692      	lsls	r2, r2, #26
 800910e:	d42d      	bmi.n	800916c <_printf_common+0xb4>
 8009110:	4649      	mov	r1, r9
 8009112:	4638      	mov	r0, r7
 8009114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d020      	beq.n	8009160 <_printf_common+0xa8>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	68e5      	ldr	r5, [r4, #12]
 8009122:	f003 0306 	and.w	r3, r3, #6
 8009126:	2b04      	cmp	r3, #4
 8009128:	bf18      	it	ne
 800912a:	2500      	movne	r5, #0
 800912c:	6832      	ldr	r2, [r6, #0]
 800912e:	f04f 0600 	mov.w	r6, #0
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	bf08      	it	eq
 8009136:	1aad      	subeq	r5, r5, r2
 8009138:	6922      	ldr	r2, [r4, #16]
 800913a:	bf08      	it	eq
 800913c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009140:	4293      	cmp	r3, r2
 8009142:	bfc4      	itt	gt
 8009144:	1a9b      	subgt	r3, r3, r2
 8009146:	18ed      	addgt	r5, r5, r3
 8009148:	341a      	adds	r4, #26
 800914a:	42b5      	cmp	r5, r6
 800914c:	d11a      	bne.n	8009184 <_printf_common+0xcc>
 800914e:	2000      	movs	r0, #0
 8009150:	e008      	b.n	8009164 <_printf_common+0xac>
 8009152:	2301      	movs	r3, #1
 8009154:	4652      	mov	r2, sl
 8009156:	4649      	mov	r1, r9
 8009158:	4638      	mov	r0, r7
 800915a:	47c0      	blx	r8
 800915c:	3001      	adds	r0, #1
 800915e:	d103      	bne.n	8009168 <_printf_common+0xb0>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	3501      	adds	r5, #1
 800916a:	e7c4      	b.n	80090f6 <_printf_common+0x3e>
 800916c:	2030      	movs	r0, #48	; 0x30
 800916e:	18e1      	adds	r1, r4, r3
 8009170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800917a:	4422      	add	r2, r4
 800917c:	3302      	adds	r3, #2
 800917e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009182:	e7c5      	b.n	8009110 <_printf_common+0x58>
 8009184:	2301      	movs	r3, #1
 8009186:	4622      	mov	r2, r4
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d0e6      	beq.n	8009160 <_printf_common+0xa8>
 8009192:	3601      	adds	r6, #1
 8009194:	e7d9      	b.n	800914a <_printf_common+0x92>
	...

08009198 <_printf_i>:
 8009198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	7e0f      	ldrb	r7, [r1, #24]
 800919e:	4691      	mov	r9, r2
 80091a0:	2f78      	cmp	r7, #120	; 0x78
 80091a2:	4680      	mov	r8, r0
 80091a4:	460c      	mov	r4, r1
 80091a6:	469a      	mov	sl, r3
 80091a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091ae:	d807      	bhi.n	80091c0 <_printf_i+0x28>
 80091b0:	2f62      	cmp	r7, #98	; 0x62
 80091b2:	d80a      	bhi.n	80091ca <_printf_i+0x32>
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	f000 80d9 	beq.w	800936c <_printf_i+0x1d4>
 80091ba:	2f58      	cmp	r7, #88	; 0x58
 80091bc:	f000 80a4 	beq.w	8009308 <_printf_i+0x170>
 80091c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091c8:	e03a      	b.n	8009240 <_printf_i+0xa8>
 80091ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ce:	2b15      	cmp	r3, #21
 80091d0:	d8f6      	bhi.n	80091c0 <_printf_i+0x28>
 80091d2:	a101      	add	r1, pc, #4	; (adr r1, 80091d8 <_printf_i+0x40>)
 80091d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091d8:	08009231 	.word	0x08009231
 80091dc:	08009245 	.word	0x08009245
 80091e0:	080091c1 	.word	0x080091c1
 80091e4:	080091c1 	.word	0x080091c1
 80091e8:	080091c1 	.word	0x080091c1
 80091ec:	080091c1 	.word	0x080091c1
 80091f0:	08009245 	.word	0x08009245
 80091f4:	080091c1 	.word	0x080091c1
 80091f8:	080091c1 	.word	0x080091c1
 80091fc:	080091c1 	.word	0x080091c1
 8009200:	080091c1 	.word	0x080091c1
 8009204:	08009353 	.word	0x08009353
 8009208:	08009275 	.word	0x08009275
 800920c:	08009335 	.word	0x08009335
 8009210:	080091c1 	.word	0x080091c1
 8009214:	080091c1 	.word	0x080091c1
 8009218:	08009375 	.word	0x08009375
 800921c:	080091c1 	.word	0x080091c1
 8009220:	08009275 	.word	0x08009275
 8009224:	080091c1 	.word	0x080091c1
 8009228:	080091c1 	.word	0x080091c1
 800922c:	0800933d 	.word	0x0800933d
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	602a      	str	r2, [r5, #0]
 8009238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800923c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009240:	2301      	movs	r3, #1
 8009242:	e0a4      	b.n	800938e <_printf_i+0x1f6>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	6829      	ldr	r1, [r5, #0]
 8009248:	0606      	lsls	r6, r0, #24
 800924a:	f101 0304 	add.w	r3, r1, #4
 800924e:	d50a      	bpl.n	8009266 <_printf_i+0xce>
 8009250:	680e      	ldr	r6, [r1, #0]
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	2e00      	cmp	r6, #0
 8009256:	da03      	bge.n	8009260 <_printf_i+0xc8>
 8009258:	232d      	movs	r3, #45	; 0x2d
 800925a:	4276      	negs	r6, r6
 800925c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009260:	230a      	movs	r3, #10
 8009262:	485e      	ldr	r0, [pc, #376]	; (80093dc <_printf_i+0x244>)
 8009264:	e019      	b.n	800929a <_printf_i+0x102>
 8009266:	680e      	ldr	r6, [r1, #0]
 8009268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	bf18      	it	ne
 8009270:	b236      	sxthne	r6, r6
 8009272:	e7ef      	b.n	8009254 <_printf_i+0xbc>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	1d19      	adds	r1, r3, #4
 800927a:	6029      	str	r1, [r5, #0]
 800927c:	0601      	lsls	r1, r0, #24
 800927e:	d501      	bpl.n	8009284 <_printf_i+0xec>
 8009280:	681e      	ldr	r6, [r3, #0]
 8009282:	e002      	b.n	800928a <_printf_i+0xf2>
 8009284:	0646      	lsls	r6, r0, #25
 8009286:	d5fb      	bpl.n	8009280 <_printf_i+0xe8>
 8009288:	881e      	ldrh	r6, [r3, #0]
 800928a:	2f6f      	cmp	r7, #111	; 0x6f
 800928c:	bf0c      	ite	eq
 800928e:	2308      	moveq	r3, #8
 8009290:	230a      	movne	r3, #10
 8009292:	4852      	ldr	r0, [pc, #328]	; (80093dc <_printf_i+0x244>)
 8009294:	2100      	movs	r1, #0
 8009296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800929a:	6865      	ldr	r5, [r4, #4]
 800929c:	2d00      	cmp	r5, #0
 800929e:	bfa8      	it	ge
 80092a0:	6821      	ldrge	r1, [r4, #0]
 80092a2:	60a5      	str	r5, [r4, #8]
 80092a4:	bfa4      	itt	ge
 80092a6:	f021 0104 	bicge.w	r1, r1, #4
 80092aa:	6021      	strge	r1, [r4, #0]
 80092ac:	b90e      	cbnz	r6, 80092b2 <_printf_i+0x11a>
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	d04d      	beq.n	800934e <_printf_i+0x1b6>
 80092b2:	4615      	mov	r5, r2
 80092b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80092b8:	fb03 6711 	mls	r7, r3, r1, r6
 80092bc:	5dc7      	ldrb	r7, [r0, r7]
 80092be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092c2:	4637      	mov	r7, r6
 80092c4:	42bb      	cmp	r3, r7
 80092c6:	460e      	mov	r6, r1
 80092c8:	d9f4      	bls.n	80092b4 <_printf_i+0x11c>
 80092ca:	2b08      	cmp	r3, #8
 80092cc:	d10b      	bne.n	80092e6 <_printf_i+0x14e>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	07de      	lsls	r6, r3, #31
 80092d2:	d508      	bpl.n	80092e6 <_printf_i+0x14e>
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	6861      	ldr	r1, [r4, #4]
 80092d8:	4299      	cmp	r1, r3
 80092da:	bfde      	ittt	le
 80092dc:	2330      	movle	r3, #48	; 0x30
 80092de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092e6:	1b52      	subs	r2, r2, r5
 80092e8:	6122      	str	r2, [r4, #16]
 80092ea:	464b      	mov	r3, r9
 80092ec:	4621      	mov	r1, r4
 80092ee:	4640      	mov	r0, r8
 80092f0:	f8cd a000 	str.w	sl, [sp]
 80092f4:	aa03      	add	r2, sp, #12
 80092f6:	f7ff fedf 	bl	80090b8 <_printf_common>
 80092fa:	3001      	adds	r0, #1
 80092fc:	d14c      	bne.n	8009398 <_printf_i+0x200>
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009302:	b004      	add	sp, #16
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	4834      	ldr	r0, [pc, #208]	; (80093dc <_printf_i+0x244>)
 800930a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800930e:	6829      	ldr	r1, [r5, #0]
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	f851 6b04 	ldr.w	r6, [r1], #4
 8009316:	6029      	str	r1, [r5, #0]
 8009318:	061d      	lsls	r5, r3, #24
 800931a:	d514      	bpl.n	8009346 <_printf_i+0x1ae>
 800931c:	07df      	lsls	r7, r3, #31
 800931e:	bf44      	itt	mi
 8009320:	f043 0320 	orrmi.w	r3, r3, #32
 8009324:	6023      	strmi	r3, [r4, #0]
 8009326:	b91e      	cbnz	r6, 8009330 <_printf_i+0x198>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	2310      	movs	r3, #16
 8009332:	e7af      	b.n	8009294 <_printf_i+0xfc>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	f043 0320 	orr.w	r3, r3, #32
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	2378      	movs	r3, #120	; 0x78
 800933e:	4828      	ldr	r0, [pc, #160]	; (80093e0 <_printf_i+0x248>)
 8009340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009344:	e7e3      	b.n	800930e <_printf_i+0x176>
 8009346:	0659      	lsls	r1, r3, #25
 8009348:	bf48      	it	mi
 800934a:	b2b6      	uxthmi	r6, r6
 800934c:	e7e6      	b.n	800931c <_printf_i+0x184>
 800934e:	4615      	mov	r5, r2
 8009350:	e7bb      	b.n	80092ca <_printf_i+0x132>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	6826      	ldr	r6, [r4, #0]
 8009356:	1d18      	adds	r0, r3, #4
 8009358:	6961      	ldr	r1, [r4, #20]
 800935a:	6028      	str	r0, [r5, #0]
 800935c:	0635      	lsls	r5, r6, #24
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	d501      	bpl.n	8009366 <_printf_i+0x1ce>
 8009362:	6019      	str	r1, [r3, #0]
 8009364:	e002      	b.n	800936c <_printf_i+0x1d4>
 8009366:	0670      	lsls	r0, r6, #25
 8009368:	d5fb      	bpl.n	8009362 <_printf_i+0x1ca>
 800936a:	8019      	strh	r1, [r3, #0]
 800936c:	2300      	movs	r3, #0
 800936e:	4615      	mov	r5, r2
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	e7ba      	b.n	80092ea <_printf_i+0x152>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	2100      	movs	r1, #0
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	681d      	ldr	r5, [r3, #0]
 800937e:	6862      	ldr	r2, [r4, #4]
 8009380:	4628      	mov	r0, r5
 8009382:	f000 fae5 	bl	8009950 <memchr>
 8009386:	b108      	cbz	r0, 800938c <_printf_i+0x1f4>
 8009388:	1b40      	subs	r0, r0, r5
 800938a:	6060      	str	r0, [r4, #4]
 800938c:	6863      	ldr	r3, [r4, #4]
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	2300      	movs	r3, #0
 8009392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009396:	e7a8      	b.n	80092ea <_printf_i+0x152>
 8009398:	462a      	mov	r2, r5
 800939a:	4649      	mov	r1, r9
 800939c:	4640      	mov	r0, r8
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	47d0      	blx	sl
 80093a2:	3001      	adds	r0, #1
 80093a4:	d0ab      	beq.n	80092fe <_printf_i+0x166>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	079b      	lsls	r3, r3, #30
 80093aa:	d413      	bmi.n	80093d4 <_printf_i+0x23c>
 80093ac:	68e0      	ldr	r0, [r4, #12]
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	4298      	cmp	r0, r3
 80093b2:	bfb8      	it	lt
 80093b4:	4618      	movlt	r0, r3
 80093b6:	e7a4      	b.n	8009302 <_printf_i+0x16a>
 80093b8:	2301      	movs	r3, #1
 80093ba:	4632      	mov	r2, r6
 80093bc:	4649      	mov	r1, r9
 80093be:	4640      	mov	r0, r8
 80093c0:	47d0      	blx	sl
 80093c2:	3001      	adds	r0, #1
 80093c4:	d09b      	beq.n	80092fe <_printf_i+0x166>
 80093c6:	3501      	adds	r5, #1
 80093c8:	68e3      	ldr	r3, [r4, #12]
 80093ca:	9903      	ldr	r1, [sp, #12]
 80093cc:	1a5b      	subs	r3, r3, r1
 80093ce:	42ab      	cmp	r3, r5
 80093d0:	dcf2      	bgt.n	80093b8 <_printf_i+0x220>
 80093d2:	e7eb      	b.n	80093ac <_printf_i+0x214>
 80093d4:	2500      	movs	r5, #0
 80093d6:	f104 0619 	add.w	r6, r4, #25
 80093da:	e7f5      	b.n	80093c8 <_printf_i+0x230>
 80093dc:	0800a329 	.word	0x0800a329
 80093e0:	0800a33a 	.word	0x0800a33a

080093e4 <_scanf_chars>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4615      	mov	r5, r2
 80093ea:	688a      	ldr	r2, [r1, #8]
 80093ec:	4680      	mov	r8, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	b932      	cbnz	r2, 8009400 <_scanf_chars+0x1c>
 80093f2:	698a      	ldr	r2, [r1, #24]
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	bf0c      	ite	eq
 80093f8:	2201      	moveq	r2, #1
 80093fa:	f04f 32ff 	movne.w	r2, #4294967295
 80093fe:	608a      	str	r2, [r1, #8]
 8009400:	2700      	movs	r7, #0
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009494 <_scanf_chars+0xb0>
 8009408:	06d1      	lsls	r1, r2, #27
 800940a:	bf5f      	itttt	pl
 800940c:	681a      	ldrpl	r2, [r3, #0]
 800940e:	1d11      	addpl	r1, r2, #4
 8009410:	6019      	strpl	r1, [r3, #0]
 8009412:	6816      	ldrpl	r6, [r2, #0]
 8009414:	69a0      	ldr	r0, [r4, #24]
 8009416:	b188      	cbz	r0, 800943c <_scanf_chars+0x58>
 8009418:	2801      	cmp	r0, #1
 800941a:	d107      	bne.n	800942c <_scanf_chars+0x48>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	6963      	ldr	r3, [r4, #20]
 8009422:	5c9b      	ldrb	r3, [r3, r2]
 8009424:	b953      	cbnz	r3, 800943c <_scanf_chars+0x58>
 8009426:	2f00      	cmp	r7, #0
 8009428:	d031      	beq.n	800948e <_scanf_chars+0xaa>
 800942a:	e022      	b.n	8009472 <_scanf_chars+0x8e>
 800942c:	2802      	cmp	r0, #2
 800942e:	d120      	bne.n	8009472 <_scanf_chars+0x8e>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009438:	071b      	lsls	r3, r3, #28
 800943a:	d41a      	bmi.n	8009472 <_scanf_chars+0x8e>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	3701      	adds	r7, #1
 8009440:	06da      	lsls	r2, r3, #27
 8009442:	bf5e      	ittt	pl
 8009444:	682b      	ldrpl	r3, [r5, #0]
 8009446:	781b      	ldrbpl	r3, [r3, #0]
 8009448:	f806 3b01 	strbpl.w	r3, [r6], #1
 800944c:	682a      	ldr	r2, [r5, #0]
 800944e:	686b      	ldr	r3, [r5, #4]
 8009450:	3201      	adds	r2, #1
 8009452:	602a      	str	r2, [r5, #0]
 8009454:	68a2      	ldr	r2, [r4, #8]
 8009456:	3b01      	subs	r3, #1
 8009458:	3a01      	subs	r2, #1
 800945a:	606b      	str	r3, [r5, #4]
 800945c:	60a2      	str	r2, [r4, #8]
 800945e:	b142      	cbz	r2, 8009472 <_scanf_chars+0x8e>
 8009460:	2b00      	cmp	r3, #0
 8009462:	dcd7      	bgt.n	8009414 <_scanf_chars+0x30>
 8009464:	4629      	mov	r1, r5
 8009466:	4640      	mov	r0, r8
 8009468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800946c:	4798      	blx	r3
 800946e:	2800      	cmp	r0, #0
 8009470:	d0d0      	beq.n	8009414 <_scanf_chars+0x30>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	f013 0310 	ands.w	r3, r3, #16
 8009478:	d105      	bne.n	8009486 <_scanf_chars+0xa2>
 800947a:	68e2      	ldr	r2, [r4, #12]
 800947c:	3201      	adds	r2, #1
 800947e:	60e2      	str	r2, [r4, #12]
 8009480:	69a2      	ldr	r2, [r4, #24]
 8009482:	b102      	cbz	r2, 8009486 <_scanf_chars+0xa2>
 8009484:	7033      	strb	r3, [r6, #0]
 8009486:	2000      	movs	r0, #0
 8009488:	6923      	ldr	r3, [r4, #16]
 800948a:	443b      	add	r3, r7
 800948c:	6123      	str	r3, [r4, #16]
 800948e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009492:	bf00      	nop
 8009494:	0800a367 	.word	0x0800a367

08009498 <_scanf_i>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	460c      	mov	r4, r1
 800949e:	4698      	mov	r8, r3
 80094a0:	4b75      	ldr	r3, [pc, #468]	; (8009678 <_scanf_i+0x1e0>)
 80094a2:	b087      	sub	sp, #28
 80094a4:	4682      	mov	sl, r0
 80094a6:	4616      	mov	r6, r2
 80094a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094ac:	ab03      	add	r3, sp, #12
 80094ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80094b2:	4b72      	ldr	r3, [pc, #456]	; (800967c <_scanf_i+0x1e4>)
 80094b4:	69a1      	ldr	r1, [r4, #24]
 80094b6:	4a72      	ldr	r2, [pc, #456]	; (8009680 <_scanf_i+0x1e8>)
 80094b8:	4627      	mov	r7, r4
 80094ba:	2903      	cmp	r1, #3
 80094bc:	bf18      	it	ne
 80094be:	461a      	movne	r2, r3
 80094c0:	68a3      	ldr	r3, [r4, #8]
 80094c2:	9201      	str	r2, [sp, #4]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094ca:	bf81      	itttt	hi
 80094cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094d0:	eb03 0905 	addhi.w	r9, r3, r5
 80094d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80094d8:	60a3      	strhi	r3, [r4, #8]
 80094da:	f857 3b1c 	ldr.w	r3, [r7], #28
 80094de:	bf98      	it	ls
 80094e0:	f04f 0900 	movls.w	r9, #0
 80094e4:	463d      	mov	r5, r7
 80094e6:	f04f 0b00 	mov.w	fp, #0
 80094ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	6831      	ldr	r1, [r6, #0]
 80094f2:	ab03      	add	r3, sp, #12
 80094f4:	2202      	movs	r2, #2
 80094f6:	7809      	ldrb	r1, [r1, #0]
 80094f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80094fc:	f000 fa28 	bl	8009950 <memchr>
 8009500:	b328      	cbz	r0, 800954e <_scanf_i+0xb6>
 8009502:	f1bb 0f01 	cmp.w	fp, #1
 8009506:	d159      	bne.n	80095bc <_scanf_i+0x124>
 8009508:	6862      	ldr	r2, [r4, #4]
 800950a:	b92a      	cbnz	r2, 8009518 <_scanf_i+0x80>
 800950c:	2308      	movs	r3, #8
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	68a2      	ldr	r2, [r4, #8]
 8009522:	1e51      	subs	r1, r2, #1
 8009524:	60a1      	str	r1, [r4, #8]
 8009526:	b192      	cbz	r2, 800954e <_scanf_i+0xb6>
 8009528:	6832      	ldr	r2, [r6, #0]
 800952a:	1c51      	adds	r1, r2, #1
 800952c:	6031      	str	r1, [r6, #0]
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	f805 2b01 	strb.w	r2, [r5], #1
 8009534:	6872      	ldr	r2, [r6, #4]
 8009536:	3a01      	subs	r2, #1
 8009538:	2a00      	cmp	r2, #0
 800953a:	6072      	str	r2, [r6, #4]
 800953c:	dc07      	bgt.n	800954e <_scanf_i+0xb6>
 800953e:	4631      	mov	r1, r6
 8009540:	4650      	mov	r0, sl
 8009542:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009546:	4790      	blx	r2
 8009548:	2800      	cmp	r0, #0
 800954a:	f040 8085 	bne.w	8009658 <_scanf_i+0x1c0>
 800954e:	f10b 0b01 	add.w	fp, fp, #1
 8009552:	f1bb 0f03 	cmp.w	fp, #3
 8009556:	d1cb      	bne.n	80094f0 <_scanf_i+0x58>
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	b90b      	cbnz	r3, 8009560 <_scanf_i+0xc8>
 800955c:	230a      	movs	r3, #10
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	4948      	ldr	r1, [pc, #288]	; (8009684 <_scanf_i+0x1ec>)
 8009564:	6960      	ldr	r0, [r4, #20]
 8009566:	1ac9      	subs	r1, r1, r3
 8009568:	f000 f88e 	bl	8009688 <__sccl>
 800956c:	f04f 0b00 	mov.w	fp, #0
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d03d      	beq.n	80095f4 <_scanf_i+0x15c>
 8009578:	6831      	ldr	r1, [r6, #0]
 800957a:	6960      	ldr	r0, [r4, #20]
 800957c:	f891 c000 	ldrb.w	ip, [r1]
 8009580:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009584:	2800      	cmp	r0, #0
 8009586:	d035      	beq.n	80095f4 <_scanf_i+0x15c>
 8009588:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800958c:	d124      	bne.n	80095d8 <_scanf_i+0x140>
 800958e:	0510      	lsls	r0, r2, #20
 8009590:	d522      	bpl.n	80095d8 <_scanf_i+0x140>
 8009592:	f10b 0b01 	add.w	fp, fp, #1
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	d003      	beq.n	80095a4 <_scanf_i+0x10c>
 800959c:	3301      	adds	r3, #1
 800959e:	f109 39ff 	add.w	r9, r9, #4294967295
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	6873      	ldr	r3, [r6, #4]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	6073      	str	r3, [r6, #4]
 80095ac:	dd1b      	ble.n	80095e6 <_scanf_i+0x14e>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	6033      	str	r3, [r6, #0]
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	60a3      	str	r3, [r4, #8]
 80095ba:	e7d9      	b.n	8009570 <_scanf_i+0xd8>
 80095bc:	f1bb 0f02 	cmp.w	fp, #2
 80095c0:	d1ae      	bne.n	8009520 <_scanf_i+0x88>
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80095c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80095cc:	d1bf      	bne.n	800954e <_scanf_i+0xb6>
 80095ce:	2310      	movs	r3, #16
 80095d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	e7a2      	b.n	800951e <_scanf_i+0x86>
 80095d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80095dc:	6022      	str	r2, [r4, #0]
 80095de:	780b      	ldrb	r3, [r1, #0]
 80095e0:	f805 3b01 	strb.w	r3, [r5], #1
 80095e4:	e7de      	b.n	80095a4 <_scanf_i+0x10c>
 80095e6:	4631      	mov	r1, r6
 80095e8:	4650      	mov	r0, sl
 80095ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095ee:	4798      	blx	r3
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0df      	beq.n	80095b4 <_scanf_i+0x11c>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	05db      	lsls	r3, r3, #23
 80095f8:	d50d      	bpl.n	8009616 <_scanf_i+0x17e>
 80095fa:	42bd      	cmp	r5, r7
 80095fc:	d909      	bls.n	8009612 <_scanf_i+0x17a>
 80095fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009602:	4632      	mov	r2, r6
 8009604:	4650      	mov	r0, sl
 8009606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800960a:	f105 39ff 	add.w	r9, r5, #4294967295
 800960e:	4798      	blx	r3
 8009610:	464d      	mov	r5, r9
 8009612:	42bd      	cmp	r5, r7
 8009614:	d02d      	beq.n	8009672 <_scanf_i+0x1da>
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	f012 0210 	ands.w	r2, r2, #16
 800961c:	d113      	bne.n	8009646 <_scanf_i+0x1ae>
 800961e:	702a      	strb	r2, [r5, #0]
 8009620:	4639      	mov	r1, r7
 8009622:	6863      	ldr	r3, [r4, #4]
 8009624:	4650      	mov	r0, sl
 8009626:	9e01      	ldr	r6, [sp, #4]
 8009628:	47b0      	blx	r6
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	f8d8 3000 	ldr.w	r3, [r8]
 8009630:	f011 0f20 	tst.w	r1, #32
 8009634:	d013      	beq.n	800965e <_scanf_i+0x1c6>
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	f8c8 2000 	str.w	r2, [r8]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6018      	str	r0, [r3, #0]
 8009640:	68e3      	ldr	r3, [r4, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	60e3      	str	r3, [r4, #12]
 8009646:	2000      	movs	r0, #0
 8009648:	1bed      	subs	r5, r5, r7
 800964a:	44ab      	add	fp, r5
 800964c:	6925      	ldr	r5, [r4, #16]
 800964e:	445d      	add	r5, fp
 8009650:	6125      	str	r5, [r4, #16]
 8009652:	b007      	add	sp, #28
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	f04f 0b00 	mov.w	fp, #0
 800965c:	e7ca      	b.n	80095f4 <_scanf_i+0x15c>
 800965e:	1d1a      	adds	r2, r3, #4
 8009660:	f8c8 2000 	str.w	r2, [r8]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f011 0f01 	tst.w	r1, #1
 800966a:	bf14      	ite	ne
 800966c:	8018      	strhne	r0, [r3, #0]
 800966e:	6018      	streq	r0, [r3, #0]
 8009670:	e7e6      	b.n	8009640 <_scanf_i+0x1a8>
 8009672:	2001      	movs	r0, #1
 8009674:	e7ed      	b.n	8009652 <_scanf_i+0x1ba>
 8009676:	bf00      	nop
 8009678:	08009c7c 	.word	0x08009c7c
 800967c:	080098d9 	.word	0x080098d9
 8009680:	080097f1 	.word	0x080097f1
 8009684:	0800a364 	.word	0x0800a364

08009688 <__sccl>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	780b      	ldrb	r3, [r1, #0]
 800968c:	4604      	mov	r4, r0
 800968e:	2b5e      	cmp	r3, #94	; 0x5e
 8009690:	bf13      	iteet	ne
 8009692:	2200      	movne	r2, #0
 8009694:	2201      	moveq	r2, #1
 8009696:	784b      	ldrbeq	r3, [r1, #1]
 8009698:	1c48      	addne	r0, r1, #1
 800969a:	bf08      	it	eq
 800969c:	1c88      	addeq	r0, r1, #2
 800969e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80096a2:	1e61      	subs	r1, r4, #1
 80096a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80096a8:	42a9      	cmp	r1, r5
 80096aa:	d1fb      	bne.n	80096a4 <__sccl+0x1c>
 80096ac:	b90b      	cbnz	r3, 80096b2 <__sccl+0x2a>
 80096ae:	3801      	subs	r0, #1
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	f082 0201 	eor.w	r2, r2, #1
 80096b6:	4605      	mov	r5, r0
 80096b8:	54e2      	strb	r2, [r4, r3]
 80096ba:	4628      	mov	r0, r5
 80096bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80096c0:	292d      	cmp	r1, #45	; 0x2d
 80096c2:	d006      	beq.n	80096d2 <__sccl+0x4a>
 80096c4:	295d      	cmp	r1, #93	; 0x5d
 80096c6:	d0f3      	beq.n	80096b0 <__sccl+0x28>
 80096c8:	b909      	cbnz	r1, 80096ce <__sccl+0x46>
 80096ca:	4628      	mov	r0, r5
 80096cc:	e7f0      	b.n	80096b0 <__sccl+0x28>
 80096ce:	460b      	mov	r3, r1
 80096d0:	e7f1      	b.n	80096b6 <__sccl+0x2e>
 80096d2:	786e      	ldrb	r6, [r5, #1]
 80096d4:	2e5d      	cmp	r6, #93	; 0x5d
 80096d6:	d0fa      	beq.n	80096ce <__sccl+0x46>
 80096d8:	42b3      	cmp	r3, r6
 80096da:	dcf8      	bgt.n	80096ce <__sccl+0x46>
 80096dc:	4619      	mov	r1, r3
 80096de:	3502      	adds	r5, #2
 80096e0:	3101      	adds	r1, #1
 80096e2:	428e      	cmp	r6, r1
 80096e4:	5462      	strb	r2, [r4, r1]
 80096e6:	dcfb      	bgt.n	80096e0 <__sccl+0x58>
 80096e8:	1af1      	subs	r1, r6, r3
 80096ea:	3901      	subs	r1, #1
 80096ec:	42b3      	cmp	r3, r6
 80096ee:	bfa8      	it	ge
 80096f0:	2100      	movge	r1, #0
 80096f2:	1c58      	adds	r0, r3, #1
 80096f4:	1843      	adds	r3, r0, r1
 80096f6:	e7e0      	b.n	80096ba <__sccl+0x32>

080096f8 <_strtol_l.constprop.0>:
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fe:	4680      	mov	r8, r0
 8009700:	d001      	beq.n	8009706 <_strtol_l.constprop.0+0xe>
 8009702:	2b24      	cmp	r3, #36	; 0x24
 8009704:	d906      	bls.n	8009714 <_strtol_l.constprop.0+0x1c>
 8009706:	f7ff f929 	bl	800895c <__errno>
 800970a:	2316      	movs	r3, #22
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	2000      	movs	r0, #0
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	460d      	mov	r5, r1
 8009716:	4f35      	ldr	r7, [pc, #212]	; (80097ec <_strtol_l.constprop.0+0xf4>)
 8009718:	4628      	mov	r0, r5
 800971a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800971e:	5de6      	ldrb	r6, [r4, r7]
 8009720:	f016 0608 	ands.w	r6, r6, #8
 8009724:	d1f8      	bne.n	8009718 <_strtol_l.constprop.0+0x20>
 8009726:	2c2d      	cmp	r4, #45	; 0x2d
 8009728:	d12f      	bne.n	800978a <_strtol_l.constprop.0+0x92>
 800972a:	2601      	movs	r6, #1
 800972c:	782c      	ldrb	r4, [r5, #0]
 800972e:	1c85      	adds	r5, r0, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d057      	beq.n	80097e4 <_strtol_l.constprop.0+0xec>
 8009734:	2b10      	cmp	r3, #16
 8009736:	d109      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 8009738:	2c30      	cmp	r4, #48	; 0x30
 800973a:	d107      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 800973c:	7828      	ldrb	r0, [r5, #0]
 800973e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009742:	2858      	cmp	r0, #88	; 0x58
 8009744:	d149      	bne.n	80097da <_strtol_l.constprop.0+0xe2>
 8009746:	2310      	movs	r3, #16
 8009748:	786c      	ldrb	r4, [r5, #1]
 800974a:	3502      	adds	r5, #2
 800974c:	2700      	movs	r7, #0
 800974e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009752:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009756:	fbbe f9f3 	udiv	r9, lr, r3
 800975a:	4638      	mov	r0, r7
 800975c:	fb03 ea19 	mls	sl, r3, r9, lr
 8009760:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009764:	f1bc 0f09 	cmp.w	ip, #9
 8009768:	d814      	bhi.n	8009794 <_strtol_l.constprop.0+0x9c>
 800976a:	4664      	mov	r4, ip
 800976c:	42a3      	cmp	r3, r4
 800976e:	dd22      	ble.n	80097b6 <_strtol_l.constprop.0+0xbe>
 8009770:	2f00      	cmp	r7, #0
 8009772:	db1d      	blt.n	80097b0 <_strtol_l.constprop.0+0xb8>
 8009774:	4581      	cmp	r9, r0
 8009776:	d31b      	bcc.n	80097b0 <_strtol_l.constprop.0+0xb8>
 8009778:	d101      	bne.n	800977e <_strtol_l.constprop.0+0x86>
 800977a:	45a2      	cmp	sl, r4
 800977c:	db18      	blt.n	80097b0 <_strtol_l.constprop.0+0xb8>
 800977e:	2701      	movs	r7, #1
 8009780:	fb00 4003 	mla	r0, r0, r3, r4
 8009784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009788:	e7ea      	b.n	8009760 <_strtol_l.constprop.0+0x68>
 800978a:	2c2b      	cmp	r4, #43	; 0x2b
 800978c:	bf04      	itt	eq
 800978e:	782c      	ldrbeq	r4, [r5, #0]
 8009790:	1c85      	addeq	r5, r0, #2
 8009792:	e7cd      	b.n	8009730 <_strtol_l.constprop.0+0x38>
 8009794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009798:	f1bc 0f19 	cmp.w	ip, #25
 800979c:	d801      	bhi.n	80097a2 <_strtol_l.constprop.0+0xaa>
 800979e:	3c37      	subs	r4, #55	; 0x37
 80097a0:	e7e4      	b.n	800976c <_strtol_l.constprop.0+0x74>
 80097a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097a6:	f1bc 0f19 	cmp.w	ip, #25
 80097aa:	d804      	bhi.n	80097b6 <_strtol_l.constprop.0+0xbe>
 80097ac:	3c57      	subs	r4, #87	; 0x57
 80097ae:	e7dd      	b.n	800976c <_strtol_l.constprop.0+0x74>
 80097b0:	f04f 37ff 	mov.w	r7, #4294967295
 80097b4:	e7e6      	b.n	8009784 <_strtol_l.constprop.0+0x8c>
 80097b6:	2f00      	cmp	r7, #0
 80097b8:	da07      	bge.n	80097ca <_strtol_l.constprop.0+0xd2>
 80097ba:	2322      	movs	r3, #34	; 0x22
 80097bc:	4670      	mov	r0, lr
 80097be:	f8c8 3000 	str.w	r3, [r8]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d0a4      	beq.n	8009710 <_strtol_l.constprop.0+0x18>
 80097c6:	1e69      	subs	r1, r5, #1
 80097c8:	e005      	b.n	80097d6 <_strtol_l.constprop.0+0xde>
 80097ca:	b106      	cbz	r6, 80097ce <_strtol_l.constprop.0+0xd6>
 80097cc:	4240      	negs	r0, r0
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d09e      	beq.n	8009710 <_strtol_l.constprop.0+0x18>
 80097d2:	2f00      	cmp	r7, #0
 80097d4:	d1f7      	bne.n	80097c6 <_strtol_l.constprop.0+0xce>
 80097d6:	6011      	str	r1, [r2, #0]
 80097d8:	e79a      	b.n	8009710 <_strtol_l.constprop.0+0x18>
 80097da:	2430      	movs	r4, #48	; 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1b5      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 80097e0:	2308      	movs	r3, #8
 80097e2:	e7b3      	b.n	800974c <_strtol_l.constprop.0+0x54>
 80097e4:	2c30      	cmp	r4, #48	; 0x30
 80097e6:	d0a9      	beq.n	800973c <_strtol_l.constprop.0+0x44>
 80097e8:	230a      	movs	r3, #10
 80097ea:	e7af      	b.n	800974c <_strtol_l.constprop.0+0x54>
 80097ec:	0800a367 	.word	0x0800a367

080097f0 <_strtol_r>:
 80097f0:	f7ff bf82 	b.w	80096f8 <_strtol_l.constprop.0>

080097f4 <_strtoul_l.constprop.0>:
 80097f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097f8:	4686      	mov	lr, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	4f35      	ldr	r7, [pc, #212]	; (80098d4 <_strtoul_l.constprop.0+0xe0>)
 80097fe:	4628      	mov	r0, r5
 8009800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009804:	5de6      	ldrb	r6, [r4, r7]
 8009806:	f016 0608 	ands.w	r6, r6, #8
 800980a:	d1f8      	bne.n	80097fe <_strtoul_l.constprop.0+0xa>
 800980c:	2c2d      	cmp	r4, #45	; 0x2d
 800980e:	d12f      	bne.n	8009870 <_strtoul_l.constprop.0+0x7c>
 8009810:	2601      	movs	r6, #1
 8009812:	782c      	ldrb	r4, [r5, #0]
 8009814:	1c85      	adds	r5, r0, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d057      	beq.n	80098ca <_strtoul_l.constprop.0+0xd6>
 800981a:	2b10      	cmp	r3, #16
 800981c:	d109      	bne.n	8009832 <_strtoul_l.constprop.0+0x3e>
 800981e:	2c30      	cmp	r4, #48	; 0x30
 8009820:	d107      	bne.n	8009832 <_strtoul_l.constprop.0+0x3e>
 8009822:	7828      	ldrb	r0, [r5, #0]
 8009824:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009828:	2858      	cmp	r0, #88	; 0x58
 800982a:	d149      	bne.n	80098c0 <_strtoul_l.constprop.0+0xcc>
 800982c:	2310      	movs	r3, #16
 800982e:	786c      	ldrb	r4, [r5, #1]
 8009830:	3502      	adds	r5, #2
 8009832:	f04f 38ff 	mov.w	r8, #4294967295
 8009836:	fbb8 f8f3 	udiv	r8, r8, r3
 800983a:	2700      	movs	r7, #0
 800983c:	fb03 f908 	mul.w	r9, r3, r8
 8009840:	4638      	mov	r0, r7
 8009842:	ea6f 0909 	mvn.w	r9, r9
 8009846:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800984a:	f1bc 0f09 	cmp.w	ip, #9
 800984e:	d814      	bhi.n	800987a <_strtoul_l.constprop.0+0x86>
 8009850:	4664      	mov	r4, ip
 8009852:	42a3      	cmp	r3, r4
 8009854:	dd22      	ble.n	800989c <_strtoul_l.constprop.0+0xa8>
 8009856:	2f00      	cmp	r7, #0
 8009858:	db1d      	blt.n	8009896 <_strtoul_l.constprop.0+0xa2>
 800985a:	4580      	cmp	r8, r0
 800985c:	d31b      	bcc.n	8009896 <_strtoul_l.constprop.0+0xa2>
 800985e:	d101      	bne.n	8009864 <_strtoul_l.constprop.0+0x70>
 8009860:	45a1      	cmp	r9, r4
 8009862:	db18      	blt.n	8009896 <_strtoul_l.constprop.0+0xa2>
 8009864:	2701      	movs	r7, #1
 8009866:	fb00 4003 	mla	r0, r0, r3, r4
 800986a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800986e:	e7ea      	b.n	8009846 <_strtoul_l.constprop.0+0x52>
 8009870:	2c2b      	cmp	r4, #43	; 0x2b
 8009872:	bf04      	itt	eq
 8009874:	782c      	ldrbeq	r4, [r5, #0]
 8009876:	1c85      	addeq	r5, r0, #2
 8009878:	e7cd      	b.n	8009816 <_strtoul_l.constprop.0+0x22>
 800987a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800987e:	f1bc 0f19 	cmp.w	ip, #25
 8009882:	d801      	bhi.n	8009888 <_strtoul_l.constprop.0+0x94>
 8009884:	3c37      	subs	r4, #55	; 0x37
 8009886:	e7e4      	b.n	8009852 <_strtoul_l.constprop.0+0x5e>
 8009888:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800988c:	f1bc 0f19 	cmp.w	ip, #25
 8009890:	d804      	bhi.n	800989c <_strtoul_l.constprop.0+0xa8>
 8009892:	3c57      	subs	r4, #87	; 0x57
 8009894:	e7dd      	b.n	8009852 <_strtoul_l.constprop.0+0x5e>
 8009896:	f04f 37ff 	mov.w	r7, #4294967295
 800989a:	e7e6      	b.n	800986a <_strtoul_l.constprop.0+0x76>
 800989c:	2f00      	cmp	r7, #0
 800989e:	da07      	bge.n	80098b0 <_strtoul_l.constprop.0+0xbc>
 80098a0:	2322      	movs	r3, #34	; 0x22
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	f8ce 3000 	str.w	r3, [lr]
 80098aa:	b932      	cbnz	r2, 80098ba <_strtoul_l.constprop.0+0xc6>
 80098ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b0:	b106      	cbz	r6, 80098b4 <_strtoul_l.constprop.0+0xc0>
 80098b2:	4240      	negs	r0, r0
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	d0f9      	beq.n	80098ac <_strtoul_l.constprop.0+0xb8>
 80098b8:	b107      	cbz	r7, 80098bc <_strtoul_l.constprop.0+0xc8>
 80098ba:	1e69      	subs	r1, r5, #1
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	e7f5      	b.n	80098ac <_strtoul_l.constprop.0+0xb8>
 80098c0:	2430      	movs	r4, #48	; 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1b5      	bne.n	8009832 <_strtoul_l.constprop.0+0x3e>
 80098c6:	2308      	movs	r3, #8
 80098c8:	e7b3      	b.n	8009832 <_strtoul_l.constprop.0+0x3e>
 80098ca:	2c30      	cmp	r4, #48	; 0x30
 80098cc:	d0a9      	beq.n	8009822 <_strtoul_l.constprop.0+0x2e>
 80098ce:	230a      	movs	r3, #10
 80098d0:	e7af      	b.n	8009832 <_strtoul_l.constprop.0+0x3e>
 80098d2:	bf00      	nop
 80098d4:	0800a367 	.word	0x0800a367

080098d8 <_strtoul_r>:
 80098d8:	f7ff bf8c 	b.w	80097f4 <_strtoul_l.constprop.0>

080098dc <__submore>:
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	460c      	mov	r4, r1
 80098e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80098e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d11b      	bne.n	8009924 <__submore+0x48>
 80098ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098f0:	f000 f8cc 	bl	8009a8c <_malloc_r>
 80098f4:	b918      	cbnz	r0, 80098fe <__submore+0x22>
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009902:	63a3      	str	r3, [r4, #56]	; 0x38
 8009904:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009908:	6360      	str	r0, [r4, #52]	; 0x34
 800990a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800990e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009912:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009916:	7043      	strb	r3, [r0, #1]
 8009918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800991c:	7003      	strb	r3, [r0, #0]
 800991e:	6020      	str	r0, [r4, #0]
 8009920:	2000      	movs	r0, #0
 8009922:	e7ea      	b.n	80098fa <__submore+0x1e>
 8009924:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009926:	0077      	lsls	r7, r6, #1
 8009928:	463a      	mov	r2, r7
 800992a:	f000 f923 	bl	8009b74 <_realloc_r>
 800992e:	4605      	mov	r5, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	d0e0      	beq.n	80098f6 <__submore+0x1a>
 8009934:	eb00 0806 	add.w	r8, r0, r6
 8009938:	4601      	mov	r1, r0
 800993a:	4632      	mov	r2, r6
 800993c:	4640      	mov	r0, r8
 800993e:	f000 f815 	bl	800996c <memcpy>
 8009942:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009946:	f8c4 8000 	str.w	r8, [r4]
 800994a:	e7e9      	b.n	8009920 <__submore+0x44>

0800994c <__retarget_lock_acquire_recursive>:
 800994c:	4770      	bx	lr

0800994e <__retarget_lock_release_recursive>:
 800994e:	4770      	bx	lr

08009950 <memchr>:
 8009950:	4603      	mov	r3, r0
 8009952:	b510      	push	{r4, lr}
 8009954:	b2c9      	uxtb	r1, r1
 8009956:	4402      	add	r2, r0
 8009958:	4293      	cmp	r3, r2
 800995a:	4618      	mov	r0, r3
 800995c:	d101      	bne.n	8009962 <memchr+0x12>
 800995e:	2000      	movs	r0, #0
 8009960:	e003      	b.n	800996a <memchr+0x1a>
 8009962:	7804      	ldrb	r4, [r0, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	428c      	cmp	r4, r1
 8009968:	d1f6      	bne.n	8009958 <memchr+0x8>
 800996a:	bd10      	pop	{r4, pc}

0800996c <memcpy>:
 800996c:	440a      	add	r2, r1
 800996e:	4291      	cmp	r1, r2
 8009970:	f100 33ff 	add.w	r3, r0, #4294967295
 8009974:	d100      	bne.n	8009978 <memcpy+0xc>
 8009976:	4770      	bx	lr
 8009978:	b510      	push	{r4, lr}
 800997a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800997e:	4291      	cmp	r1, r2
 8009980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009984:	d1f9      	bne.n	800997a <memcpy+0xe>
 8009986:	bd10      	pop	{r4, pc}

08009988 <memmove>:
 8009988:	4288      	cmp	r0, r1
 800998a:	b510      	push	{r4, lr}
 800998c:	eb01 0402 	add.w	r4, r1, r2
 8009990:	d902      	bls.n	8009998 <memmove+0x10>
 8009992:	4284      	cmp	r4, r0
 8009994:	4623      	mov	r3, r4
 8009996:	d807      	bhi.n	80099a8 <memmove+0x20>
 8009998:	1e43      	subs	r3, r0, #1
 800999a:	42a1      	cmp	r1, r4
 800999c:	d008      	beq.n	80099b0 <memmove+0x28>
 800999e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099a6:	e7f8      	b.n	800999a <memmove+0x12>
 80099a8:	4601      	mov	r1, r0
 80099aa:	4402      	add	r2, r0
 80099ac:	428a      	cmp	r2, r1
 80099ae:	d100      	bne.n	80099b2 <memmove+0x2a>
 80099b0:	bd10      	pop	{r4, pc}
 80099b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ba:	e7f7      	b.n	80099ac <memmove+0x24>

080099bc <_free_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4605      	mov	r5, r0
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d040      	beq.n	8009a46 <_free_r+0x8a>
 80099c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c8:	1f0c      	subs	r4, r1, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfb8      	it	lt
 80099ce:	18e4      	addlt	r4, r4, r3
 80099d0:	f000 f910 	bl	8009bf4 <__malloc_lock>
 80099d4:	4a1c      	ldr	r2, [pc, #112]	; (8009a48 <_free_r+0x8c>)
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	b933      	cbnz	r3, 80099e8 <_free_r+0x2c>
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	6014      	str	r4, [r2, #0]
 80099de:	4628      	mov	r0, r5
 80099e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e4:	f000 b90c 	b.w	8009c00 <__malloc_unlock>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d908      	bls.n	80099fe <_free_r+0x42>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf01      	itttt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	1809      	addeq	r1, r1, r0
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	e7ed      	b.n	80099da <_free_r+0x1e>
 80099fe:	461a      	mov	r2, r3
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	b10b      	cbz	r3, 8009a08 <_free_r+0x4c>
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d9fa      	bls.n	80099fe <_free_r+0x42>
 8009a08:	6811      	ldr	r1, [r2, #0]
 8009a0a:	1850      	adds	r0, r2, r1
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d10b      	bne.n	8009a28 <_free_r+0x6c>
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	4401      	add	r1, r0
 8009a14:	1850      	adds	r0, r2, r1
 8009a16:	4283      	cmp	r3, r0
 8009a18:	6011      	str	r1, [r2, #0]
 8009a1a:	d1e0      	bne.n	80099de <_free_r+0x22>
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	4401      	add	r1, r0
 8009a22:	6011      	str	r1, [r2, #0]
 8009a24:	6053      	str	r3, [r2, #4]
 8009a26:	e7da      	b.n	80099de <_free_r+0x22>
 8009a28:	d902      	bls.n	8009a30 <_free_r+0x74>
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	e7d6      	b.n	80099de <_free_r+0x22>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	1821      	adds	r1, r4, r0
 8009a34:	428b      	cmp	r3, r1
 8009a36:	bf01      	itttt	eq
 8009a38:	6819      	ldreq	r1, [r3, #0]
 8009a3a:	685b      	ldreq	r3, [r3, #4]
 8009a3c:	1809      	addeq	r1, r1, r0
 8009a3e:	6021      	streq	r1, [r4, #0]
 8009a40:	6063      	str	r3, [r4, #4]
 8009a42:	6054      	str	r4, [r2, #4]
 8009a44:	e7cb      	b.n	80099de <_free_r+0x22>
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	20003a94 	.word	0x20003a94

08009a4c <sbrk_aligned>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4e0e      	ldr	r6, [pc, #56]	; (8009a88 <sbrk_aligned+0x3c>)
 8009a50:	460c      	mov	r4, r1
 8009a52:	6831      	ldr	r1, [r6, #0]
 8009a54:	4605      	mov	r5, r0
 8009a56:	b911      	cbnz	r1, 8009a5e <sbrk_aligned+0x12>
 8009a58:	f000 f8bc 	bl	8009bd4 <_sbrk_r>
 8009a5c:	6030      	str	r0, [r6, #0]
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4628      	mov	r0, r5
 8009a62:	f000 f8b7 	bl	8009bd4 <_sbrk_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	d00a      	beq.n	8009a80 <sbrk_aligned+0x34>
 8009a6a:	1cc4      	adds	r4, r0, #3
 8009a6c:	f024 0403 	bic.w	r4, r4, #3
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	d007      	beq.n	8009a84 <sbrk_aligned+0x38>
 8009a74:	1a21      	subs	r1, r4, r0
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f8ac 	bl	8009bd4 <_sbrk_r>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d101      	bne.n	8009a84 <sbrk_aligned+0x38>
 8009a80:	f04f 34ff 	mov.w	r4, #4294967295
 8009a84:	4620      	mov	r0, r4
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	20003a98 	.word	0x20003a98

08009a8c <_malloc_r>:
 8009a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	1ccd      	adds	r5, r1, #3
 8009a92:	f025 0503 	bic.w	r5, r5, #3
 8009a96:	3508      	adds	r5, #8
 8009a98:	2d0c      	cmp	r5, #12
 8009a9a:	bf38      	it	cc
 8009a9c:	250c      	movcc	r5, #12
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	db01      	blt.n	8009aa8 <_malloc_r+0x1c>
 8009aa4:	42a9      	cmp	r1, r5
 8009aa6:	d905      	bls.n	8009ab4 <_malloc_r+0x28>
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	2600      	movs	r6, #0
 8009aac:	603b      	str	r3, [r7, #0]
 8009aae:	4630      	mov	r0, r6
 8009ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab4:	4e2e      	ldr	r6, [pc, #184]	; (8009b70 <_malloc_r+0xe4>)
 8009ab6:	f000 f89d 	bl	8009bf4 <__malloc_lock>
 8009aba:	6833      	ldr	r3, [r6, #0]
 8009abc:	461c      	mov	r4, r3
 8009abe:	bb34      	cbnz	r4, 8009b0e <_malloc_r+0x82>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f7ff ffc2 	bl	8009a4c <sbrk_aligned>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	4604      	mov	r4, r0
 8009acc:	d14d      	bne.n	8009b6a <_malloc_r+0xde>
 8009ace:	6834      	ldr	r4, [r6, #0]
 8009ad0:	4626      	mov	r6, r4
 8009ad2:	2e00      	cmp	r6, #0
 8009ad4:	d140      	bne.n	8009b58 <_malloc_r+0xcc>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4638      	mov	r0, r7
 8009adc:	eb04 0803 	add.w	r8, r4, r3
 8009ae0:	f000 f878 	bl	8009bd4 <_sbrk_r>
 8009ae4:	4580      	cmp	r8, r0
 8009ae6:	d13a      	bne.n	8009b5e <_malloc_r+0xd2>
 8009ae8:	6821      	ldr	r1, [r4, #0]
 8009aea:	3503      	adds	r5, #3
 8009aec:	1a6d      	subs	r5, r5, r1
 8009aee:	f025 0503 	bic.w	r5, r5, #3
 8009af2:	3508      	adds	r5, #8
 8009af4:	2d0c      	cmp	r5, #12
 8009af6:	bf38      	it	cc
 8009af8:	250c      	movcc	r5, #12
 8009afa:	4638      	mov	r0, r7
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7ff ffa5 	bl	8009a4c <sbrk_aligned>
 8009b02:	3001      	adds	r0, #1
 8009b04:	d02b      	beq.n	8009b5e <_malloc_r+0xd2>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	442b      	add	r3, r5
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	e00e      	b.n	8009b2c <_malloc_r+0xa0>
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	1b52      	subs	r2, r2, r5
 8009b12:	d41e      	bmi.n	8009b52 <_malloc_r+0xc6>
 8009b14:	2a0b      	cmp	r2, #11
 8009b16:	d916      	bls.n	8009b46 <_malloc_r+0xba>
 8009b18:	1961      	adds	r1, r4, r5
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	bf18      	it	ne
 8009b20:	6059      	strne	r1, [r3, #4]
 8009b22:	6863      	ldr	r3, [r4, #4]
 8009b24:	bf08      	it	eq
 8009b26:	6031      	streq	r1, [r6, #0]
 8009b28:	5162      	str	r2, [r4, r5]
 8009b2a:	604b      	str	r3, [r1, #4]
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f104 060b 	add.w	r6, r4, #11
 8009b32:	f000 f865 	bl	8009c00 <__malloc_unlock>
 8009b36:	f026 0607 	bic.w	r6, r6, #7
 8009b3a:	1d23      	adds	r3, r4, #4
 8009b3c:	1af2      	subs	r2, r6, r3
 8009b3e:	d0b6      	beq.n	8009aae <_malloc_r+0x22>
 8009b40:	1b9b      	subs	r3, r3, r6
 8009b42:	50a3      	str	r3, [r4, r2]
 8009b44:	e7b3      	b.n	8009aae <_malloc_r+0x22>
 8009b46:	6862      	ldr	r2, [r4, #4]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	bf0c      	ite	eq
 8009b4c:	6032      	streq	r2, [r6, #0]
 8009b4e:	605a      	strne	r2, [r3, #4]
 8009b50:	e7ec      	b.n	8009b2c <_malloc_r+0xa0>
 8009b52:	4623      	mov	r3, r4
 8009b54:	6864      	ldr	r4, [r4, #4]
 8009b56:	e7b2      	b.n	8009abe <_malloc_r+0x32>
 8009b58:	4634      	mov	r4, r6
 8009b5a:	6876      	ldr	r6, [r6, #4]
 8009b5c:	e7b9      	b.n	8009ad2 <_malloc_r+0x46>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	4638      	mov	r0, r7
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	f000 f84c 	bl	8009c00 <__malloc_unlock>
 8009b68:	e7a1      	b.n	8009aae <_malloc_r+0x22>
 8009b6a:	6025      	str	r5, [r4, #0]
 8009b6c:	e7de      	b.n	8009b2c <_malloc_r+0xa0>
 8009b6e:	bf00      	nop
 8009b70:	20003a94 	.word	0x20003a94

08009b74 <_realloc_r>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	460e      	mov	r6, r1
 8009b7e:	b921      	cbnz	r1, 8009b8a <_realloc_r+0x16>
 8009b80:	4611      	mov	r1, r2
 8009b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	f7ff bf81 	b.w	8009a8c <_malloc_r>
 8009b8a:	b92a      	cbnz	r2, 8009b98 <_realloc_r+0x24>
 8009b8c:	f7ff ff16 	bl	80099bc <_free_r>
 8009b90:	4625      	mov	r5, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	f000 f838 	bl	8009c0c <_malloc_usable_size_r>
 8009b9c:	4284      	cmp	r4, r0
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	d802      	bhi.n	8009ba8 <_realloc_r+0x34>
 8009ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ba6:	d812      	bhi.n	8009bce <_realloc_r+0x5a>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4640      	mov	r0, r8
 8009bac:	f7ff ff6e 	bl	8009a8c <_malloc_r>
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0ed      	beq.n	8009b92 <_realloc_r+0x1e>
 8009bb6:	42bc      	cmp	r4, r7
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4631      	mov	r1, r6
 8009bbc:	bf28      	it	cs
 8009bbe:	463a      	movcs	r2, r7
 8009bc0:	f7ff fed4 	bl	800996c <memcpy>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7ff fef8 	bl	80099bc <_free_r>
 8009bcc:	e7e1      	b.n	8009b92 <_realloc_r+0x1e>
 8009bce:	4635      	mov	r5, r6
 8009bd0:	e7df      	b.n	8009b92 <_realloc_r+0x1e>
	...

08009bd4 <_sbrk_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4d05      	ldr	r5, [pc, #20]	; (8009bf0 <_sbrk_r+0x1c>)
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f7 fe72 	bl	80018c8 <_sbrk>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_sbrk_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_sbrk_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	20003a8c 	.word	0x20003a8c

08009bf4 <__malloc_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__malloc_lock+0x8>)
 8009bf6:	f7ff bea9 	b.w	800994c <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20003a90 	.word	0x20003a90

08009c00 <__malloc_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__malloc_unlock+0x8>)
 8009c02:	f7ff bea4 	b.w	800994e <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20003a90 	.word	0x20003a90

08009c0c <_malloc_usable_size_r>:
 8009c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c10:	1f18      	subs	r0, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfbc      	itt	lt
 8009c16:	580b      	ldrlt	r3, [r1, r0]
 8009c18:	18c0      	addlt	r0, r0, r3
 8009c1a:	4770      	bx	lr

08009c1c <_init>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	bf00      	nop
 8009c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	469e      	mov	lr, r3
 8009c26:	4770      	bx	lr

08009c28 <_fini>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	bf00      	nop
 8009c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2e:	bc08      	pop	{r3}
 8009c30:	469e      	mov	lr, r3
 8009c32:	4770      	bx	lr
